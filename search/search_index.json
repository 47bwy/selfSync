{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"47bwy \u7684\u5b66\u4e60\u4e4b\u8def \u672c\u7f51\u7ad9\u7684\u8bf4\u660e \u4e2a\u4eba\u7684\u5b66\u4e60\u5de5\u4f5c\u5fc3\u8def\u5386\u7a0b\u3002 \u672c\u7f51\u7ad9\u5236\u4f5c\u548c\u5199\u4f5c\u65b9\u5f0f \u4f7f\u7528 mkdocs \u548c markdown \u6784\u5efa\uff0c\u4f7f\u7528 Python-Markdown-Math \u5b8c\u6210\u6570\u5b66\u516c\u5f0f\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a requirements.txt \u4f7f\u7528 pipenv \u5b89\u88c5 \u7f16\u5199\u5e76\u67e5\u770b\uff1a mkdocs serve # \u4fee\u6539\u81ea\u52a8\u5237\u65b0\u6d4f\u89c8\u5668\uff0c\u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:8000 \u8bbf\u95ee mkdocs gh-deploy # \u90e8\u7f72\u5230\u81ea\u5df1\u7684 github pages, \u5982\u679c\u662f readthedocs \u4f1a\u81ea\u52a8\u89e6\u53d1\u6784\u5efa \u672c\u7f51\u7ad9\u7684\u8bbf\u95ee\u5730\u5740 https://47bwy.readthedocs.io/en/latest/ https://47bwy.github.io/selfSync/","title":"\u7b80\u4ecb"},{"location":"#47bwy","text":"","title":"47bwy \u7684\u5b66\u4e60\u4e4b\u8def"},{"location":"#_1","text":"\u4e2a\u4eba\u7684\u5b66\u4e60\u5de5\u4f5c\u5fc3\u8def\u5386\u7a0b\u3002","title":"\u672c\u7f51\u7ad9\u7684\u8bf4\u660e"},{"location":"#_2","text":"\u4f7f\u7528 mkdocs \u548c markdown \u6784\u5efa\uff0c\u4f7f\u7528 Python-Markdown-Math \u5b8c\u6210\u6570\u5b66\u516c\u5f0f\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a requirements.txt \u4f7f\u7528 pipenv \u5b89\u88c5 \u7f16\u5199\u5e76\u67e5\u770b\uff1a mkdocs serve # \u4fee\u6539\u81ea\u52a8\u5237\u65b0\u6d4f\u89c8\u5668\uff0c\u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:8000 \u8bbf\u95ee mkdocs gh-deploy # \u90e8\u7f72\u5230\u81ea\u5df1\u7684 github pages, \u5982\u679c\u662f readthedocs \u4f1a\u81ea\u52a8\u89e6\u53d1\u6784\u5efa","title":"\u672c\u7f51\u7ad9\u5236\u4f5c\u548c\u5199\u4f5c\u65b9\u5f0f"},{"location":"#_3","text":"https://47bwy.readthedocs.io/en/latest/ https://47bwy.github.io/selfSync/","title":"\u672c\u7f51\u7ad9\u7684\u8bbf\u95ee\u5730\u5740"},{"location":"01_network/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/","text":"","title":"\u7f51\u7edc\u57fa\u7840"},{"location":"02_linux/linux%E4%BD%BF%E7%94%A8%E5%92%8C%E7%BB%B4%E6%8A%A4/","text":"","title":"Linux \u4f7f\u7528\u548c\u7ef4\u62a4"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/","text":"\u5728\u5b66\u4e60\u548c\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u9010\u6b65\u5b8c\u5584\u7684\u77e5\u8bc6\u70b9\u3001\u6280\u672f\u3001\u529f\u80fd\u3001\u5f00\u53d1\u65b9\u5f0f\u7b49\u3002 \u53d8\u91cf \u53d8\u91cf\u7684\u5b9a\u4e49\u3001\u8d4b\u503c\u3002 \u6807\u51c6\u6570\u636e\u7c7b\u578b Number\uff08\u6570\u5b57\uff09 String\uff08\u5b57\u7b26\u4e32\uff09 bool\uff08\u5e03\u5c14\u7c7b\u578b\uff09 List\uff08\u5217\u8868\uff09 Tuple\uff08\u5143\u7ec4\uff09 Set\uff08\u96c6\u5408\uff09 Dictionary\uff08\u5b57\u5178\uff09 \u4e0d\u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1aNumber\uff08\u6570\u5b57\uff09\u3001String\uff08\u5b57\u7b26\u4e32\uff09\u3001Tuple\uff08\u5143\u7ec4\uff09\u3002 \u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1aList\uff08\u5217\u8868\uff09\u3001Dictionary\uff08\u5b57\u5178\uff09\u3001Set\uff08\u96c6\u5408\uff09\u3002 \u53e6\u5916\u8fd8\u6709 collections.deque \u6bd4\u8f83\u5e38\u7528\u3002 \u89e3\u91ca\u5668 Python \u89e3\u91ca\u5668\u53ef\u4e0d\u6b62\u4e00\u79cd\uff0c\u6709 CPython\u3001IPython\u3001Jython\u3001PyPy \u7b49\u3002 \u8bed\u6cd5 \u6761\u4ef6\u63a7\u5236\u3001\u5faa\u73af\u8bed\u53e5\u3001\u63a8\u5bfc\u5f0f\u3001\u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668\u3001\u51fd\u6570\u3001lambda\u3001\u88c5\u9970\u5668 \u51fd\u6570\u5c3d\u53ef\u80fd\u5e26\u4e0a\u5143\u4fe1\u606f lambda \u51fd\u6570\u901a\u5e38\u4e0e\u5185\u7f6e\u51fd\u6570\u5982 map()\u3001filter()\u3001\u548c reduce() \u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u4fbf\u5728\u96c6\u5408\u4e0a\u6267\u884c\u64cd\u4f5c\u3002 numbers = [1, 2, 3, 4, 5] squared = list(map(lambda x: x**2, numbers)) print(squared) # \u8f93\u51fa: [1, 4, 9, 16, 25] numbers = [1, 2, 3, 4, 5, 6, 7, 8] even_numbers = list(filter(lambda x: x % 2 == 0, numbers)) print(even_numbers) # \u8f93\u51fa\uff1a[2, 4, 6, 8] from functools import reduce numbers = [1, 2, 3, 4, 5] # \u4f7f\u7528 reduce() \u548c lambda \u51fd\u6570\u8ba1\u7b97\u4e58\u79ef product = reduce(lambda x, y: x * y, numbers) print(product) # \u8f93\u51fa\uff1a120 \u504f\u51fd\u6570\uff1a\u628a\u4e00\u4e2a\u51fd\u6570\u7684\u67d0\u4e9b\u53c2\u6570\u7ed9\u56fa\u5b9a\u4f4f\uff08\u4e5f\u5c31\u662f\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff09\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\uff0c\u8c03\u7528\u8fd9\u4e2a\u65b0\u51fd\u6570\u4f1a\u66f4\u7b80\u5355\u3002 import functools int2 = functools.partial(int, base=2) int2('1000000') # \u8f93\u51fa\uff1a64 \u88c5\u9970\u5668 \u88c5\u9970\u5668\uff08decorators\uff09\u662f Python \u4e2d\u7684\u4e00\u79cd\u9ad8\u7ea7\u529f\u80fd\uff0c\u5b83\u5141\u8bb8\u4f60\u52a8\u6001\u5730\u4fee\u6539\u51fd\u6570\u6216\u7c7b\u7684\u884c\u4e3a\u3002 \u88c5\u9970\u5668\u662f\u4e00\u79cd\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u6216\u4fee\u6539\u539f\u6765\u7684\u51fd\u6570\u3002 from functools import wraps def repeat(num_times): def decorator(func): @wraps(func) def wrapper(*args, **kwargs): # \u8fd9\u91cc\u662f\u5728\u8c03\u7528\u539f\u59cb\u51fd\u6570\u524d\u6dfb\u52a0\u7684\u65b0\u529f\u80fd print(\"before\") result = func(*args, **kwargs) # \u8fd9\u91cc\u662f\u5728\u8c03\u7528\u539f\u59cb\u51fd\u6570\u540e\u6dfb\u52a0\u7684\u65b0\u529f\u80fd print(\"after\") return result return wrapper return decorator \u5185\u7f6e\u88c5\u9970\u5668 Python \u63d0\u4f9b\u4e86\u4e00\u4e9b\u5185\u7f6e\u7684\u88c5\u9970\u5668\uff0c\u4f8b\u5982\uff1a @staticmethod : \u5c06\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u9759\u6001\u65b9\u6cd5\uff0c\u4e0d\u9700\u8981\u5b9e\u4f8b\u5316\u7c7b\u5373\u53ef\u8c03\u7528\u3002 @classmethod : \u5c06\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u7c7b\u65b9\u6cd5\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u7c7b\u672c\u8eab\uff08\u901a\u5e38\u547d\u540d\u4e3a cls \uff09\u3002 @property : \u5c06\u65b9\u6cd5\u8f6c\u6362\u4e3a\u5c5e\u6027\uff0c\u4f7f\u5176\u53ef\u4ee5\u50cf\u5c5e\u6027\u4e00\u6837\u8bbf\u95ee\u3002 \u591a\u4e2a\u88c5\u9970\u5668\u7684\u5806\u53e0 \u5c06\u591a\u4e2a\u88c5\u9970\u5668\u5806\u53e0\u5728\u4e00\u8d77\uff0c\u5b83\u4eec\u4f1a\u6309\u7167\u4ece\u5916\u5230\u5185\u7684\u987a\u5e8f\u4f9d\u6b21\u5e94\u7528\u3002 \u6a21\u5757 \u6a21\u5757\u53ef\u4ee5\u5305\u542b\u51fd\u6570\u3001\u7c7b\u3001\u53d8\u91cf\u4ee5\u53ca\u53ef\u6267\u884c\u7684\u4ee3\u7801\u3002\u901a\u8fc7\u6a21\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4ee3\u7801\u7ec4\u7ec7\u6210\u53ef\u91cd\u7528\u7684\u5355\u5143\uff0c\u4fbf\u4e8e\u7ba1\u7406\u548c\u7ef4\u62a4\u3002 \u6a21\u5757\u7684\u4f5c\u7528\uff1a \u4ee3\u7801\u590d\u7528 \uff1a\u5c06\u5e38\u7528\u7684\u529f\u80fd\u5c01\u88c5\u5230\u6a21\u5757\u4e2d\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u7a0b\u5e8f\u4e2d\u91cd\u590d\u4f7f\u7528\u3002 \u547d\u540d\u7a7a\u95f4\u7ba1\u7406 \uff1a\u6a21\u5757\u53ef\u4ee5\u907f\u514d\u547d\u540d\u51b2\u7a81\uff0c\u4e0d\u540c\u6a21\u5757\u4e2d\u7684\u540c\u540d\u51fd\u6570\u6216\u53d8\u91cf\u4e0d\u4f1a\u4e92\u76f8\u5e72\u6270\u3002 \u4ee3\u7801\u7ec4\u7ec7 \uff1a\u5c06\u4ee3\u7801\u6309\u529f\u80fd\u5212\u5206\u5230\u4e0d\u540c\u7684\u6a21\u5757\u4e2d\uff0c\u4f7f\u7a0b\u5e8f\u7ed3\u6784\u66f4\u6e05\u6670\u3002 \u6a21\u5757\u7684\u641c\u7d22\u8def\u5f84\uff1a \u5f53\u5bfc\u5165\u4e00\u4e2a\u6a21\u5757\u65f6\uff0cPython \u4f1a\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u67e5\u627e\u6a21\u5757\uff1a \u5f53\u524d\u76ee\u5f55\u3002 \u73af\u5883\u53d8\u91cf PYTHONPATH \u6307\u5b9a\u7684\u76ee\u5f55\u3002 Python \u6807\u51c6\u5e93\u76ee\u5f55\u3002 .pth \u6587\u4ef6\u4e2d\u6307\u5b9a\u7684\u76ee\u5f55\u3002 \u5305 \u5305\u662f\u4e00\u79cd\u7ba1\u7406 Python \u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7684\u5f62\u5f0f\uff0c\u91c7\u7528\"\u70b9\u6a21\u5757\u540d\u79f0\"\u3002 \u6bd4\u5982\u4e00\u4e2a\u6a21\u5757\u7684\u540d\u79f0\u662f A.B\uff0c \u90a3\u4e48\u4ed6\u8868\u793a\u4e00\u4e2a\u5305 A\u4e2d\u7684\u5b50\u6a21\u5757 B \u3002 \u9762\u5411\u5bf9\u8c61 \u7c7b(Class): \u7528\u6765\u63cf\u8ff0\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u5bf9\u8c61\u7684\u96c6\u5408\u3002\u5b83\u5b9a\u4e49\u4e86\u8be5\u96c6\u5408\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u6240\u5171\u6709\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002 \u65b9\u6cd5\uff1a \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u7c7b\u53d8\u91cf\uff1a \u7c7b\u53d8\u91cf\u5728\u6574\u4e2a\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61\u4e2d\u662f\u516c\u7528\u7684\u3002\u7c7b\u53d8\u91cf\u5b9a\u4e49\u5728\u7c7b\u4e2d\u4e14\u5728\u51fd\u6570\u4f53\u4e4b\u5916\u3002\u7c7b\u53d8\u91cf\u901a\u5e38\u4e0d\u4f5c\u4e3a\u5b9e\u4f8b\u53d8\u91cf\u4f7f\u7528\u3002 \u6570\u636e\u6210\u5458\uff1a \u7c7b\u53d8\u91cf\u6216\u8005\u5b9e\u4f8b\u53d8\u91cf\u7528\u4e8e\u5904\u7406\u7c7b\u53ca\u5176\u5b9e\u4f8b\u5bf9\u8c61\u7684\u76f8\u5173\u7684\u6570\u636e\u3002 \u65b9\u6cd5\u91cd\u5199\uff1a \u5982\u679c\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u4e0d\u80fd\u6ee1\u8db3\u5b50\u7c7b\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6539\u5199\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u65b9\u6cd5\u7684\u8986\u76d6\uff08override\uff09\uff0c\u4e5f\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u5199\u3002 \u5c40\u90e8\u53d8\u91cf\uff1a \u5b9a\u4e49\u5728\u65b9\u6cd5\u4e2d\u7684\u53d8\u91cf\uff0c\u53ea\u4f5c\u7528\u4e8e\u5f53\u524d\u5b9e\u4f8b\u7684\u7c7b\u3002 \u5b9e\u4f8b\u53d8\u91cf\uff1a \u5728\u7c7b\u7684\u58f0\u660e\u4e2d\uff0c\u5c5e\u6027\u662f\u7528\u53d8\u91cf\u6765\u8868\u793a\u7684\uff0c\u8fd9\u79cd\u53d8\u91cf\u5c31\u79f0\u4e3a\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5b9e\u4f8b\u53d8\u91cf\u5c31\u662f\u4e00\u4e2a\u7528 self \u4fee\u9970\u7684\u53d8\u91cf\u3002 \u7ee7\u627f\uff1a \u5373\u4e00\u4e2a\u6d3e\u751f\u7c7b\uff08derived class\uff09\u7ee7\u627f\u57fa\u7c7b\uff08base class\uff09\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5\u3002\u7ee7\u627f\u4e5f\u5141\u8bb8\u628a\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7c7b\u5bf9\u8c61\u5bf9\u5f85\u3002\u4f8b\u5982\uff0c\u6709\u8fd9\u6837\u4e00\u4e2a\u8bbe\u8ba1\uff1a\u4e00\u4e2aDog\u7c7b\u578b\u7684\u5bf9\u8c61\u6d3e\u751f\u81eaAnimal\u7c7b\uff0c\u8fd9\u662f\u6a21\u62df\"\u662f\u4e00\u4e2a\uff08is-a\uff09\"\u5173\u7cfb\uff08\u4f8b\u56fe\uff0cDog\u662f\u4e00\u4e2aAnimal\uff09\u3002 \u5b9e\u4f8b\u5316\uff1a \u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u7c7b\u7684\u5177\u4f53\u5bf9\u8c61\u3002 \u5bf9\u8c61\uff1a \u901a\u8fc7\u7c7b\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u4f8b\u3002\u5bf9\u8c61\u5305\u62ec\u4e24\u4e2a\u6570\u636e\u6210\u5458\uff08\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\uff09\u548c\u65b9\u6cd5\u3002 \u5e38\u7528\u7684\u64cd\u4f5c\u5305\u62ec\uff1a\u7ee7\u627f\u3001\u591a\u7ee7\u627f\uff08Mixin\uff09\u3001\u65b9\u6cd5\u91cd\u5199\u3001\u5355\u4f8b\u3001\u5de5\u5382\u3002 \u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff1a\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u58f0\u660e\u8be5\u5c5e\u6027\u4e3a\u79c1\u6709\uff0c\u4e0d\u80fd\u5728\u7c7b\u7684\u5916\u90e8\u88ab\u4f7f\u7528\u6216\u76f4\u63a5\u8bbf\u95ee\u3002 \u5b9a\u5236\u7c7b\uff08\u91cd\u5199\u67d0\u4e9b\u65b9\u6cd5\uff09\u3001\u679a\u4e3e\u7c7b\u3001\u5143\u7c7b\u3002 \u547d\u540d\u7a7a\u95f4 \u4e00\u822c\u6709\u4e09\u79cd\u547d\u540d\u7a7a\u95f4\uff1a \u5185\u7f6e\u540d\u79f0\uff08built-in names \uff09\uff0c Python \u8bed\u8a00\u5185\u7f6e\u7684\u540d\u79f0\uff0c\u6bd4\u5982\u51fd\u6570\u540d abs\u3001char \u548c\u5f02\u5e38\u540d\u79f0 BaseException\u3001Exception \u7b49\u7b49\u3002 \u5168\u5c40\u540d\u79f0\uff08global names\uff09 \uff0c\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u6a21\u5757\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u3001\u7c7b\u3001\u5176\u5b83\u5bfc\u5165\u7684\u6a21\u5757\u3001\u6a21\u5757\u7ea7\u7684\u53d8\u91cf\u548c\u5e38\u91cf\u3002 \u5c40\u90e8\u540d\u79f0\uff08local names\uff09 \uff0c\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u7684\u53c2\u6570\u548c\u5c40\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u3002\uff08\u7c7b\u4e2d\u5b9a\u4e49\u7684\u4e5f\u662f\uff09 \u5c40\u90e8\u540d\u79f0<\u5168\u5c40\u540d\u79f0<\u5185\u7f6e\u540d\u79f0 \u4f5c\u7528\u57df LEGB \u89c4\u5219\uff08Local, Enclosing, Global, Built-in\uff09\uff1aPython \u67e5\u627e\u53d8\u91cf\u65f6\u7684\u987a\u5e8f\u662f\uff1a L \u2013> E \u2013> G \u2013> B \u3002 Local \uff1a\u5f53\u524d\u51fd\u6570\u7684\u5c40\u90e8\u4f5c\u7528\u57df\u3002 Enclosing \uff1a\u5305\u542b\u5f53\u524d\u51fd\u6570\u7684\u5916\u90e8\u51fd\u6570\u7684\u4f5c\u7528\u57df\uff08\u5982\u679c\u6709\u5d4c\u5957\u51fd\u6570\uff09\u3002 Global \uff1a\u5f53\u524d\u6a21\u5757\u7684\u5168\u5c40\u4f5c\u7528\u57df\u3002 Built-in \uff1aPython \u5185\u7f6e\u7684\u4f5c\u7528\u57df\u3002","title":"Python \u7f16\u7a0b"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_1","text":"","title":"\u5728\u5b66\u4e60\u548c\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u9010\u6b65\u5b8c\u5584\u7684\u77e5\u8bc6\u70b9\u3001\u6280\u672f\u3001\u529f\u80fd\u3001\u5f00\u53d1\u65b9\u5f0f\u7b49\u3002"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_2","text":"\u53d8\u91cf\u7684\u5b9a\u4e49\u3001\u8d4b\u503c\u3002","title":"\u53d8\u91cf"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_3","text":"Number\uff08\u6570\u5b57\uff09 String\uff08\u5b57\u7b26\u4e32\uff09 bool\uff08\u5e03\u5c14\u7c7b\u578b\uff09 List\uff08\u5217\u8868\uff09 Tuple\uff08\u5143\u7ec4\uff09 Set\uff08\u96c6\u5408\uff09 Dictionary\uff08\u5b57\u5178\uff09 \u4e0d\u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1aNumber\uff08\u6570\u5b57\uff09\u3001String\uff08\u5b57\u7b26\u4e32\uff09\u3001Tuple\uff08\u5143\u7ec4\uff09\u3002 \u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1aList\uff08\u5217\u8868\uff09\u3001Dictionary\uff08\u5b57\u5178\uff09\u3001Set\uff08\u96c6\u5408\uff09\u3002 \u53e6\u5916\u8fd8\u6709 collections.deque \u6bd4\u8f83\u5e38\u7528\u3002","title":"\u6807\u51c6\u6570\u636e\u7c7b\u578b"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_4","text":"Python \u89e3\u91ca\u5668\u53ef\u4e0d\u6b62\u4e00\u79cd\uff0c\u6709 CPython\u3001IPython\u3001Jython\u3001PyPy \u7b49\u3002","title":"\u89e3\u91ca\u5668"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_5","text":"\u6761\u4ef6\u63a7\u5236\u3001\u5faa\u73af\u8bed\u53e5\u3001\u63a8\u5bfc\u5f0f\u3001\u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668\u3001\u51fd\u6570\u3001lambda\u3001\u88c5\u9970\u5668 \u51fd\u6570\u5c3d\u53ef\u80fd\u5e26\u4e0a\u5143\u4fe1\u606f lambda \u51fd\u6570\u901a\u5e38\u4e0e\u5185\u7f6e\u51fd\u6570\u5982 map()\u3001filter()\u3001\u548c reduce() \u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u4fbf\u5728\u96c6\u5408\u4e0a\u6267\u884c\u64cd\u4f5c\u3002 numbers = [1, 2, 3, 4, 5] squared = list(map(lambda x: x**2, numbers)) print(squared) # \u8f93\u51fa: [1, 4, 9, 16, 25] numbers = [1, 2, 3, 4, 5, 6, 7, 8] even_numbers = list(filter(lambda x: x % 2 == 0, numbers)) print(even_numbers) # \u8f93\u51fa\uff1a[2, 4, 6, 8] from functools import reduce numbers = [1, 2, 3, 4, 5] # \u4f7f\u7528 reduce() \u548c lambda \u51fd\u6570\u8ba1\u7b97\u4e58\u79ef product = reduce(lambda x, y: x * y, numbers) print(product) # \u8f93\u51fa\uff1a120 \u504f\u51fd\u6570\uff1a\u628a\u4e00\u4e2a\u51fd\u6570\u7684\u67d0\u4e9b\u53c2\u6570\u7ed9\u56fa\u5b9a\u4f4f\uff08\u4e5f\u5c31\u662f\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff09\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\uff0c\u8c03\u7528\u8fd9\u4e2a\u65b0\u51fd\u6570\u4f1a\u66f4\u7b80\u5355\u3002 import functools int2 = functools.partial(int, base=2) int2('1000000') # \u8f93\u51fa\uff1a64","title":"\u8bed\u6cd5"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_6","text":"\u88c5\u9970\u5668\uff08decorators\uff09\u662f Python \u4e2d\u7684\u4e00\u79cd\u9ad8\u7ea7\u529f\u80fd\uff0c\u5b83\u5141\u8bb8\u4f60\u52a8\u6001\u5730\u4fee\u6539\u51fd\u6570\u6216\u7c7b\u7684\u884c\u4e3a\u3002 \u88c5\u9970\u5668\u662f\u4e00\u79cd\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u6216\u4fee\u6539\u539f\u6765\u7684\u51fd\u6570\u3002 from functools import wraps def repeat(num_times): def decorator(func): @wraps(func) def wrapper(*args, **kwargs): # \u8fd9\u91cc\u662f\u5728\u8c03\u7528\u539f\u59cb\u51fd\u6570\u524d\u6dfb\u52a0\u7684\u65b0\u529f\u80fd print(\"before\") result = func(*args, **kwargs) # \u8fd9\u91cc\u662f\u5728\u8c03\u7528\u539f\u59cb\u51fd\u6570\u540e\u6dfb\u52a0\u7684\u65b0\u529f\u80fd print(\"after\") return result return wrapper return decorator","title":"\u88c5\u9970\u5668"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_7","text":"Python \u63d0\u4f9b\u4e86\u4e00\u4e9b\u5185\u7f6e\u7684\u88c5\u9970\u5668\uff0c\u4f8b\u5982\uff1a @staticmethod : \u5c06\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u9759\u6001\u65b9\u6cd5\uff0c\u4e0d\u9700\u8981\u5b9e\u4f8b\u5316\u7c7b\u5373\u53ef\u8c03\u7528\u3002 @classmethod : \u5c06\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u7c7b\u65b9\u6cd5\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u7c7b\u672c\u8eab\uff08\u901a\u5e38\u547d\u540d\u4e3a cls \uff09\u3002 @property : \u5c06\u65b9\u6cd5\u8f6c\u6362\u4e3a\u5c5e\u6027\uff0c\u4f7f\u5176\u53ef\u4ee5\u50cf\u5c5e\u6027\u4e00\u6837\u8bbf\u95ee\u3002","title":"\u5185\u7f6e\u88c5\u9970\u5668"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_8","text":"\u5c06\u591a\u4e2a\u88c5\u9970\u5668\u5806\u53e0\u5728\u4e00\u8d77\uff0c\u5b83\u4eec\u4f1a\u6309\u7167\u4ece\u5916\u5230\u5185\u7684\u987a\u5e8f\u4f9d\u6b21\u5e94\u7528\u3002","title":"\u591a\u4e2a\u88c5\u9970\u5668\u7684\u5806\u53e0"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_9","text":"\u6a21\u5757\u53ef\u4ee5\u5305\u542b\u51fd\u6570\u3001\u7c7b\u3001\u53d8\u91cf\u4ee5\u53ca\u53ef\u6267\u884c\u7684\u4ee3\u7801\u3002\u901a\u8fc7\u6a21\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4ee3\u7801\u7ec4\u7ec7\u6210\u53ef\u91cd\u7528\u7684\u5355\u5143\uff0c\u4fbf\u4e8e\u7ba1\u7406\u548c\u7ef4\u62a4\u3002 \u6a21\u5757\u7684\u4f5c\u7528\uff1a \u4ee3\u7801\u590d\u7528 \uff1a\u5c06\u5e38\u7528\u7684\u529f\u80fd\u5c01\u88c5\u5230\u6a21\u5757\u4e2d\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u7a0b\u5e8f\u4e2d\u91cd\u590d\u4f7f\u7528\u3002 \u547d\u540d\u7a7a\u95f4\u7ba1\u7406 \uff1a\u6a21\u5757\u53ef\u4ee5\u907f\u514d\u547d\u540d\u51b2\u7a81\uff0c\u4e0d\u540c\u6a21\u5757\u4e2d\u7684\u540c\u540d\u51fd\u6570\u6216\u53d8\u91cf\u4e0d\u4f1a\u4e92\u76f8\u5e72\u6270\u3002 \u4ee3\u7801\u7ec4\u7ec7 \uff1a\u5c06\u4ee3\u7801\u6309\u529f\u80fd\u5212\u5206\u5230\u4e0d\u540c\u7684\u6a21\u5757\u4e2d\uff0c\u4f7f\u7a0b\u5e8f\u7ed3\u6784\u66f4\u6e05\u6670\u3002 \u6a21\u5757\u7684\u641c\u7d22\u8def\u5f84\uff1a \u5f53\u5bfc\u5165\u4e00\u4e2a\u6a21\u5757\u65f6\uff0cPython \u4f1a\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u67e5\u627e\u6a21\u5757\uff1a \u5f53\u524d\u76ee\u5f55\u3002 \u73af\u5883\u53d8\u91cf PYTHONPATH \u6307\u5b9a\u7684\u76ee\u5f55\u3002 Python \u6807\u51c6\u5e93\u76ee\u5f55\u3002 .pth \u6587\u4ef6\u4e2d\u6307\u5b9a\u7684\u76ee\u5f55\u3002","title":"\u6a21\u5757"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_10","text":"\u5305\u662f\u4e00\u79cd\u7ba1\u7406 Python \u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7684\u5f62\u5f0f\uff0c\u91c7\u7528\"\u70b9\u6a21\u5757\u540d\u79f0\"\u3002 \u6bd4\u5982\u4e00\u4e2a\u6a21\u5757\u7684\u540d\u79f0\u662f A.B\uff0c \u90a3\u4e48\u4ed6\u8868\u793a\u4e00\u4e2a\u5305 A\u4e2d\u7684\u5b50\u6a21\u5757 B \u3002","title":"\u5305"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_11","text":"\u7c7b(Class): \u7528\u6765\u63cf\u8ff0\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u5bf9\u8c61\u7684\u96c6\u5408\u3002\u5b83\u5b9a\u4e49\u4e86\u8be5\u96c6\u5408\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u6240\u5171\u6709\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002 \u65b9\u6cd5\uff1a \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u7c7b\u53d8\u91cf\uff1a \u7c7b\u53d8\u91cf\u5728\u6574\u4e2a\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61\u4e2d\u662f\u516c\u7528\u7684\u3002\u7c7b\u53d8\u91cf\u5b9a\u4e49\u5728\u7c7b\u4e2d\u4e14\u5728\u51fd\u6570\u4f53\u4e4b\u5916\u3002\u7c7b\u53d8\u91cf\u901a\u5e38\u4e0d\u4f5c\u4e3a\u5b9e\u4f8b\u53d8\u91cf\u4f7f\u7528\u3002 \u6570\u636e\u6210\u5458\uff1a \u7c7b\u53d8\u91cf\u6216\u8005\u5b9e\u4f8b\u53d8\u91cf\u7528\u4e8e\u5904\u7406\u7c7b\u53ca\u5176\u5b9e\u4f8b\u5bf9\u8c61\u7684\u76f8\u5173\u7684\u6570\u636e\u3002 \u65b9\u6cd5\u91cd\u5199\uff1a \u5982\u679c\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u4e0d\u80fd\u6ee1\u8db3\u5b50\u7c7b\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6539\u5199\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u65b9\u6cd5\u7684\u8986\u76d6\uff08override\uff09\uff0c\u4e5f\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u5199\u3002 \u5c40\u90e8\u53d8\u91cf\uff1a \u5b9a\u4e49\u5728\u65b9\u6cd5\u4e2d\u7684\u53d8\u91cf\uff0c\u53ea\u4f5c\u7528\u4e8e\u5f53\u524d\u5b9e\u4f8b\u7684\u7c7b\u3002 \u5b9e\u4f8b\u53d8\u91cf\uff1a \u5728\u7c7b\u7684\u58f0\u660e\u4e2d\uff0c\u5c5e\u6027\u662f\u7528\u53d8\u91cf\u6765\u8868\u793a\u7684\uff0c\u8fd9\u79cd\u53d8\u91cf\u5c31\u79f0\u4e3a\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5b9e\u4f8b\u53d8\u91cf\u5c31\u662f\u4e00\u4e2a\u7528 self \u4fee\u9970\u7684\u53d8\u91cf\u3002 \u7ee7\u627f\uff1a \u5373\u4e00\u4e2a\u6d3e\u751f\u7c7b\uff08derived class\uff09\u7ee7\u627f\u57fa\u7c7b\uff08base class\uff09\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5\u3002\u7ee7\u627f\u4e5f\u5141\u8bb8\u628a\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7c7b\u5bf9\u8c61\u5bf9\u5f85\u3002\u4f8b\u5982\uff0c\u6709\u8fd9\u6837\u4e00\u4e2a\u8bbe\u8ba1\uff1a\u4e00\u4e2aDog\u7c7b\u578b\u7684\u5bf9\u8c61\u6d3e\u751f\u81eaAnimal\u7c7b\uff0c\u8fd9\u662f\u6a21\u62df\"\u662f\u4e00\u4e2a\uff08is-a\uff09\"\u5173\u7cfb\uff08\u4f8b\u56fe\uff0cDog\u662f\u4e00\u4e2aAnimal\uff09\u3002 \u5b9e\u4f8b\u5316\uff1a \u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u7c7b\u7684\u5177\u4f53\u5bf9\u8c61\u3002 \u5bf9\u8c61\uff1a \u901a\u8fc7\u7c7b\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u4f8b\u3002\u5bf9\u8c61\u5305\u62ec\u4e24\u4e2a\u6570\u636e\u6210\u5458\uff08\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\uff09\u548c\u65b9\u6cd5\u3002 \u5e38\u7528\u7684\u64cd\u4f5c\u5305\u62ec\uff1a\u7ee7\u627f\u3001\u591a\u7ee7\u627f\uff08Mixin\uff09\u3001\u65b9\u6cd5\u91cd\u5199\u3001\u5355\u4f8b\u3001\u5de5\u5382\u3002 \u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff1a\u4e24\u4e2a\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u58f0\u660e\u8be5\u5c5e\u6027\u4e3a\u79c1\u6709\uff0c\u4e0d\u80fd\u5728\u7c7b\u7684\u5916\u90e8\u88ab\u4f7f\u7528\u6216\u76f4\u63a5\u8bbf\u95ee\u3002 \u5b9a\u5236\u7c7b\uff08\u91cd\u5199\u67d0\u4e9b\u65b9\u6cd5\uff09\u3001\u679a\u4e3e\u7c7b\u3001\u5143\u7c7b\u3002","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_12","text":"\u4e00\u822c\u6709\u4e09\u79cd\u547d\u540d\u7a7a\u95f4\uff1a \u5185\u7f6e\u540d\u79f0\uff08built-in names \uff09\uff0c Python \u8bed\u8a00\u5185\u7f6e\u7684\u540d\u79f0\uff0c\u6bd4\u5982\u51fd\u6570\u540d abs\u3001char \u548c\u5f02\u5e38\u540d\u79f0 BaseException\u3001Exception \u7b49\u7b49\u3002 \u5168\u5c40\u540d\u79f0\uff08global names\uff09 \uff0c\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u6a21\u5757\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u3001\u7c7b\u3001\u5176\u5b83\u5bfc\u5165\u7684\u6a21\u5757\u3001\u6a21\u5757\u7ea7\u7684\u53d8\u91cf\u548c\u5e38\u91cf\u3002 \u5c40\u90e8\u540d\u79f0\uff08local names\uff09 \uff0c\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u7684\u53c2\u6570\u548c\u5c40\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u3002\uff08\u7c7b\u4e2d\u5b9a\u4e49\u7684\u4e5f\u662f\uff09 \u5c40\u90e8\u540d\u79f0<\u5168\u5c40\u540d\u79f0<\u5185\u7f6e\u540d\u79f0","title":"\u547d\u540d\u7a7a\u95f4"},{"location":"03_python/00_python%E7%BC%96%E7%A8%8B/#_13","text":"LEGB \u89c4\u5219\uff08Local, Enclosing, Global, Built-in\uff09\uff1aPython \u67e5\u627e\u53d8\u91cf\u65f6\u7684\u987a\u5e8f\u662f\uff1a L \u2013> E \u2013> G \u2013> B \u3002 Local \uff1a\u5f53\u524d\u51fd\u6570\u7684\u5c40\u90e8\u4f5c\u7528\u57df\u3002 Enclosing \uff1a\u5305\u542b\u5f53\u524d\u51fd\u6570\u7684\u5916\u90e8\u51fd\u6570\u7684\u4f5c\u7528\u57df\uff08\u5982\u679c\u6709\u5d4c\u5957\u51fd\u6570\uff09\u3002 Global \uff1a\u5f53\u524d\u6a21\u5757\u7684\u5168\u5c40\u4f5c\u7528\u57df\u3002 Built-in \uff1aPython \u5185\u7f6e\u7684\u4f5c\u7528\u57df\u3002","title":"\u4f5c\u7528\u57df"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/","text":"\u6570\u5b57\u7684\u64cd\u4f5c \u6574\u6570(Int)\u64cd\u4f5c # \u57fa\u672c\u8fd0\u7b97 a, b = 10, 3 print(f\"{a} + {b} = {a + b}\") # \u8f93\u51fa: 10 + 3 = 13 print(f\"{a} - {b} = {a - b}\") # \u8f93\u51fa: 10 - 3 = 7 print(f\"{a} * {b} = {a * b}\") # \u8f93\u51fa: 10 * 3 = 30 print(f\"{a} / {b} = {a / b}\") # \u8f93\u51fa: 10 / 3 = 3.3333333333333335 print(f\"{a} // {b} = {a // b}\") # \u8f93\u51fa: 10 // 3 = 3 (\u6574\u9664) print(f\"{a} % {b} = {a % b}\") # \u8f93\u51fa: 10 % 3 = 1 (\u53d6\u6a21) print(f\"{a} ** {b} = {a ** b}\") # \u8f93\u51fa: 10 ** 3 = 1000 (\u5e42\u8fd0\u7b97) # \u4f4d\u8fd0\u7b97 x, y = 5, 3 # 5=0b101, 3=0b011 print(f\"{x} & {y} = {x & y}\") # \u8f93\u51fa: 5 & 3 = 1 (\u6309\u4f4d\u4e0e 0b001) print(f\"{x} | {y} = {x | y}\") # \u8f93\u51fa: 5 | 3 = 7 (\u6309\u4f4d\u6216 0b111) print(f\"{x} ^ {y} = {x ^ y}\") # \u8f93\u51fa: 5 ^ 3 = 6 (\u6309\u4f4d\u5f02\u6216 0b110) print(f\"~{x} = {~x}\") # \u8f93\u51fa: ~5 = -6 (\u6309\u4f4d\u53d6\u53cd) print(f\"{x} << 1 = {x << 1}\") # \u8f93\u51fa: 5 << 1 = 10 (\u5de6\u79fb 0b1010) print(f\"{x} >> 1 = {x >> 1}\") # \u8f93\u51fa: 5 >> 1 = 2 (\u53f3\u79fb 0b10) # \u8fdb\u5236\u8f6c\u6362 num = 255 print(f\"255\u7684\u4e8c\u8fdb\u5236: {bin(num)}\") # \u8f93\u51fa: 255\u7684\u4e8c\u8fdb\u5236: 0b11111111 print(f\"255\u7684\u516b\u8fdb\u5236: {oct(num)}\") # \u8f93\u51fa: 255\u7684\u516b\u8fdb\u5236: 0o377 print(f\"255\u7684\u5341\u516d\u8fdb\u5236: {hex(num)}\") # \u8f93\u51fa: 255\u7684\u5341\u516d\u8fdb\u5236: 0xff \u6d6e\u70b9\u6570(Float)\u64cd\u4f5c # \u57fa\u672c\u8fd0\u7b97 f1, f2 = 3.5, 2.1 print(f\"{f1} + {f2} = {f1 + f2}\") # \u8f93\u51fa: 3.5 + 2.1 = 5.6 print(f\"{f1} - {f2} = {f1 - f2}\") # \u8f93\u51fa: 3.5 - 2.1 = 1.4 print(f\"{f1} * {f2} = {f1 * f2}\") # \u8f93\u51fa: 3.5 * 2.1 = 7.35 print(f\"{f1} / {f2} = {f1 / f2}\") # \u8f93\u51fa: 3.5 / 2.1 \u2248 1.6666666666666667 # \u6d6e\u70b9\u6570\u7cbe\u5ea6\u95ee\u9898 print(\"0.1 + 0.2 =\", 0.1 + 0.2) # \u8f93\u51fa: 0.1 + 0.2 = 0.30000000000000004 # \u56db\u820d\u4e94\u5165 print(f\"round(3.14159, 2) = {round(3.14159, 2)}\") # \u8f93\u51fa: round(3.14159, 2) = 3.14 print(f\"round(2.675, 2) = {round(2.675, 2)}\") # \u8f93\u51fa: round(2.675, 2) = 2.67 (\u6ce8\u610f\u6d6e\u70b9\u6570\u7cbe\u5ea6\u95ee\u9898) print(f\"round(1627731, -2) = {round(1627731, -2)}\") # \u8f93\u51fa: round(1627731, -2) = 1627700 \u7cbe\u786e\u7684\u6d6e\u70b9\u6570\u8ba1\u7b97\u4f7f\u7528\u5185\u7f6e\u5e93\uff0c\u6bd4\u5982\uff1amath\u3001decimal \u590d\u6570(Complex)\u64cd\u4f5c c1 = 3 + 4j c2 = 2 - 1j print(f\"{c1} + {c2} = {c1 + c2}\") # \u8f93\u51fa: (3+4j) + (2-1j) = (5+3j) print(f\"{c1} * {c2} = {c1 * c2}\") # \u8f93\u51fa: (3+4j) * (2-1j) = (10+5j) print(f\"{c1}\u7684\u5b9e\u90e8: {c1.real}\") # \u8f93\u51fa: (3+4j)\u7684\u5b9e\u90e8: 3.0 print(f\"{c1}\u7684\u865a\u90e8: {c1.imag}\") # \u8f93\u51fa: (3+4j)\u7684\u865a\u90e8: 4.0 print(f\"{c1}\u7684\u5171\u8f6d\u590d\u6570: {c1.conjugate()}\") # \u8f93\u51fa: (3+4j)\u7684\u5171\u8f6d\u590d\u6570: (3-4j) \u65e0\u7a77\u5927\u4e0eNaN Python\u5e76\u6ca1\u6709\u7279\u6b8a\u7684\u8bed\u6cd5\u6765\u8868\u793a\u8fd9\u4e9b\u7279\u6b8a\u7684\u6d6e\u70b9\u503c\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 float() \u6765\u521b\u5efa\u5b83\u4eec\u3002\u6bd4\u5982\uff1a >>> a = float('inf') >>> b = float('-inf') >>> c = float('nan') >>> a inf >>> b -inf >>> c nan >>> \u6570\u5b57\u7c7b\u578b\u8f6c\u6362 # \u7c7b\u578b\u8f6c\u6362 i = 10 f = 3.14 print(f\"int({f}) = {int(f)}\") # \u8f93\u51fa: int(3.14) = 3 print(f\"float({i}) = {float(i)}\") # \u8f93\u51fa: float(10) = 10.0 print(f\"complex({i}) = {complex(i)}\") # \u8f93\u51fa: complex(10) = (10+0j) # \u5b57\u7b26\u4e32\u8f6c\u6570\u5b57 s1 = \"123\" s2 = \"3.14\" print(f\"int('{s1}') = {int(s1)}\") # \u8f93\u51fa: int('123') = 123 print(f\"float('{s2}') = {float(s2)}\") # \u8f93\u51fa: float('3.14') = 3.14 \u6570\u5b66\u51fd\u6570 # \u5185\u7f6e\u51fd\u6570 print(f\"abs(-5) = {abs(-5)}\") # \u8f93\u51fa: abs(-5) = 5 print(f\"pow(2, 3) = {pow(2, 3)}\") # \u8f93\u51fa: pow(2, 3) = 8 print(f\"divmod(10, 3) = {divmod(10, 3)}\") # \u8f93\u51fa: divmod(10, 3) = (3, 1) # math\u6a21\u5757\u51fd\u6570 print(f\"math.sqrt(16) = {math.sqrt(16)}\") # \u8f93\u51fa: math.sqrt(16) = 4.0 print(f\"math.exp(1) = {math.exp(1)}\") # \u8f93\u51fa: math.exp(1) \u2248 2.718281828459045 print(f\"math.log(100, 10) = {math.log(100, 10)}\") # \u8f93\u51fa: math.log(100, 10) = 2.0 print(f\"math.sin(math.pi/2) = {math.sin(math.pi/2)}\") # \u8f93\u51fa: math.sin(math.pi/2) \u2248 1.0 \u6570\u5b57\u683c\u5f0f\u5316 num = 1234567.89123 print(f\"\u5343\u5206\u4f4d\u683c\u5f0f\u5316: {num:,}\") # \u8f93\u51fa: \u5343\u5206\u4f4d\u683c\u5f0f\u5316: 1,234,567.89123 print(f\"\u4fdd\u75592\u4f4d\u5c0f\u6570: {num:.2f}\") # \u8f93\u51fa: \u4fdd\u75592\u4f4d\u5c0f\u6570: 1234567.89 print(f\"\u79d1\u5b66\u8ba1\u6570\u6cd5: {num:.2e}\") # \u8f93\u51fa: \u79d1\u5b66\u8ba1\u6570\u6cd5: 1.23e+06 print(f\"\u767e\u5206\u6bd4\u683c\u5f0f: {0.256:.1%}\") # \u8f93\u51fa: \u767e\u5206\u6bd4\u683c\u5f0f: 25.6% x = 1234.56789 format(x, '>10.1f') # ' 1234.6' format(x, '<10.1f') # '1234.6 ' format(x, '^10.1f') # ' 1234.6 ' format(x, ',') # '1,234.56789' format(x, '0,.1f') # '1,234.6' \u4e8c\u516b\u5341\u516d\u8fdb\u5236\u6574\u6570 \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u6216\u5341\u516d\u8fdb\u5236\u7684\u6587\u672c\u4e32\uff0c \u53ef\u4ee5\u5206\u522b\u4f7f\u7528 bin() , oct() \u6216 hex() \u51fd\u6570\uff1a >>> x = 1234 >>> bin(x) '0b10011010010' >>> oct(x) '0o2322' >>> hex(x) '0x4d2' >>> \u53e6\u5916\uff0c\u5982\u679c\u4e0d\u60f3\u8f93\u51fa 0b , 0o \u6216\u8005 0x \u7684\u524d\u7f00\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528 format() \u51fd\u6570\u3002\u6bd4\u5982\uff1a >>> format(x, 'b') '10011010010' >>> format(x, 'o') '2322' >>> format(x, 'x') '4d2' >>> \u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5904\u7406\u4e8c\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236\u6574\u6570\u662f\u5f88\u7b80\u5355\u7684\u3002 \u53ea\u8981\u8bb0\u4f4f\u8fd9\u4e9b\u8f6c\u6362\u5c5e\u4e8e\u6574\u6570\u548c\u5176\u5bf9\u5e94\u7684\u6587\u672c\u8868\u793a\u4e4b\u95f4\u7684\u8f6c\u6362\u5373\u53ef\uff0c\u6c38\u8fdc\u53ea\u6709\u4e00\u79cd\u6574\u6570\u7c7b\u578b\u3002 \u5927\u6574\u6570 \u4e3a\u4e86\u5c06bytes\u89e3\u6790\u4e3a\u6574\u6570\uff0c\u4f7f\u7528 int.from_bytes() \u65b9\u6cd5\uff0c\u5e76\u50cf\u4e0b\u9762\u8fd9\u6837\u6307\u5b9a\u5b57\u8282\u987a\u5e8f\uff1a >>> len(data) 16 >>> int.from_bytes(data, 'little') 69120565665751139577663547927094891008 >>> int.from_bytes(data, 'big') 94522842520747284487117727783387188 >>> \u4e3a\u4e86\u5c06\u4e00\u4e2a\u5927\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5b57\u8282\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 int.to_bytes() \u65b9\u6cd5\uff0c\u5e76\u50cf\u4e0b\u9762\u8fd9\u6837\u6307\u5b9a\u5b57\u8282\u6570\u548c\u5b57\u8282\u987a\u5e8f\uff1a >>> x = 94522842520747284487117727783387188 >>> x.to_bytes(16, 'big') b'\\x00\\x124V\\x00x\\x90\\xab\\x00\\xcd\\xef\\x01\\x00#\\x004' >>> x.to_bytes(16, 'little') b'4\\x00#\\x00\\x01\\xef\\xcd\\x00\\xab\\x90x\\x00V4\\x12\\x00' >>> \u5927\u6574\u6570\u548c\u5b57\u8282\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u8f6c\u6362\u64cd\u4f5c\u5e76\u4e0d\u5e38\u89c1\u3002 \u7136\u800c\uff0c\u5728\u4e00\u4e9b\u5e94\u7528\u9886\u57df\u6709\u65f6\u5019\u4e5f\u4f1a\u51fa\u73b0\uff0c\u6bd4\u5982\u5bc6\u7801\u5b66\u6216\u8005\u7f51\u7edc\u3002 \u4f8b\u5982\uff0cIPv6\u7f51\u7edc\u5730\u5740\u4f7f\u7528\u4e00\u4e2a128\u4f4d\u7684\u6574\u6570\u8868\u793a\u3002 \u4f5c\u4e3a\u4e00\u79cd\u66ff\u4ee3\u65b9\u6848\uff0c\u5185\u7f6e\u7684 struct \u6a21\u5757\u53ef\u4ee5\u7528\u6765\u89e3\u538b\u5b57\u8282\u3002\u89c1\u5185\u7f6e\u5e93\u3002 \u5b57\u7b26\u4e32\u7684\u64cd\u4f5c \u7b80\u5355\u67e5\u627e \u5982\u679c\u60f3\u5339\u914d\u7684\u662f\u5b57\u9762\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u901a\u5e38\u53ea\u9700\u8981\u8c03\u7528\u57fa\u672c\u5b57\u7b26\u4e32\u65b9\u6cd5\u5c31\u884c\uff0c \u6bd4\u5982 str.find() , str.endswith() , str.startswith() >>> text = 'yeah, but no, but yeah, but no, but yeah' >>> # Search for the location of the first occurrence >>> text.find('no') 10 >>> \u68c0\u67e5\u5f00\u5934\u6216\u7ed3\u5c3e \u68c0\u67e5\u5b57\u7b26\u4e32\u5f00\u5934\u6216\u7ed3\u5c3e\u7684\u4e00\u4e2a\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u7528 str.startswith() \u6216\u8005\u662f str.endswith() \u65b9\u6cd5\u3002 \u63a5\u6536\u7684\u53c2\u6570\u5fc5\u987b\u662f\u5143\u7ec4\u3002 >>> filename = 'spam.txt' >>> filename.endswith('.txt') True >>> filename.startswith('file:') False >>> url = 'http://www.python.org' >>> url.startswith('http:') True >>> >>> import os >>> filenames = os.listdir('.') >>> filenames [ 'Makefile', 'foo.c', 'bar.py', 'spam.c', 'spam.h' ] >>> [name for name in filenames if name.endswith(('.c', '.h')) ] ['foo.c', 'spam.c', 'spam.h' >>> any(name.endswith('.py') for name in filenames) True if any(name.endswith(('.c', '.h')) for name in listdir(dirname)): ... \u590d\u6742\u67e5\u627e fnmatch() \u51fd\u6570\u5339\u914d\u80fd\u529b\u4ecb\u4e8e\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u65b9\u6cd5\u548c\u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e4b\u95f4\u3002\u5982\u679c\u5728\u6570\u636e\u5904\u7406\u64cd\u4f5c\u4e2d\u53ea\u9700\u8981\u7b80\u5355\u7684\u901a\u914d\u7b26\u5c31\u80fd\u5b8c\u6210\u7684\u65f6\u5019\uff0c\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u6bd4\u8f83\u5408\u7406\u7684\u65b9\u6848\u3002 \u5982\u679c\u4ee3\u7801\u9700\u8981\u505a\u6587\u4ef6\u540d\u7684\u5339\u914d\uff0c\u6700\u597d\u4f7f\u7528 glob \u6a21\u5757\u3002 >>> from fnmatch import fnmatch, fnmatchcase >>> fnmatch('foo.txt', '*.txt') True >>> fnmatch('foo.txt', '?oo.txt') True >>> fnmatch('Dat45.csv', 'Dat[0-9]*') True >>> names = ['Dat1.csv', 'Dat2.csv', 'config.ini', 'foo.py'] >>> [name for name in names if fnmatch(name, 'Dat*.csv')] ['Dat1.csv', 'Dat2.csv'] >>> import glob pyfiles = glob.glob('*.py') print(pyfiles) # \u8f93\u51fa\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u7684 Python \u6587\u4ef6 \u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u627e \u89c1 re \u4f7f\u7528\u65b9\u6cd5\u3002 \u5206\u5272 string \u5bf9\u8c61\u7684 split() \u65b9\u6cd5\u53ea\u9002\u5e94\u4e8e\u975e\u5e38\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u5206\u5272\u60c5\u5f62\uff0c \u5b83\u5e76\u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\u5206\u9694\u7b26\u6216\u8005\u662f\u5206\u9694\u7b26\u5468\u56f4\u4e0d\u786e\u5b9a\u7684\u7a7a\u683c\u3002 \u5f53\u4f60\u9700\u8981\u66f4\u52a0\u7075\u6d3b\u7684\u5207\u5272\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u6700\u597d\u4f7f\u7528 re.split() \u65b9\u6cd5\uff1a >>> line = 'asdf fjdk; afed, fjek,asdf, foo' >>> import re >>> re.split(r'[;,\\s]\\s*', line) ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo'] >>> fields = re.split(r'(;|,|\\s)\\s*', line) >>> fields ['asdf', ' ', 'fjdk', ';', 'afed', ',', 'fjek', ',', 'asdf', ',', 'foo'] >>> >>> values = fields[::2] >>> delimiters = fields[1::2] + [''] >>> values ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo'] >>> delimiters [' ', ';', ',', ',', ',', ''] >>> # Reform the line using the same delimiters >>> ''.join(v+d for v,d in zip(values, delimiters)) 'asdf fjdk;afed,fjek,asdf,foo' >>> re.split(r'(?:,|;|\\s)\\s*', line) ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo'] \u66ff\u6362 \u5bf9\u4e8e\u7b80\u5355\u7684\u5b57\u9762\u6a21\u5f0f\uff0c\u76f4\u63a5\u4f7f\u7528 str.replace() \u65b9\u6cd5\u5373\u53ef\uff0c\u5bf9\u4e8e\u590d\u6742\u7684\u6a21\u5f0f\uff0c\u4f7f\u7528 re \u6a21\u5757\u4e2d\u7684 sub() \u51fd\u6570\u3002 \u5220\u9664 strip() \u65b9\u6cd5\u80fd\u7528\u4e8e\u5220\u9664\u5f00\u59cb\u6216\u7ed3\u5c3e\u7684\u5b57\u7b26\u3002 lstrip() \u548c rstrip() \u5206\u522b\u4ece\u5de6\u548c\u4ece\u53f3\u6267\u884c\u5220\u9664\u64cd\u4f5c\u3002 \u6e05\u7406 \u5728\u975e\u5e38\u7b80\u5355\u7684\u60c5\u5f62\u4e0b\uff0c\u53ef\u80fd\u4f1a\u9009\u62e9\u4f7f\u7528\u5b57\u7b26\u4e32\u51fd\u6570(\u6bd4\u5982 str.upper() \u548c str.lower() )\u5c06\u6587\u672c\u8f6c\u4e3a\u6807\u51c6\u683c\u5f0f\u3002 \u4f7f\u7528 str.replace() \u6216\u8005 re.sub() \u7684\u7b80\u5355\u66ff\u6362\u64cd\u4f5c\u80fd\u5220\u9664\u6216\u8005\u6539\u53d8\u6307\u5b9a\u7684\u5b57\u7b26\u5e8f\u5217\uff0c\u540c\u6837\u8fd8\u53ef\u4ee5\u4f7f\u7528 unicodedata.normalize() \u51fd\u6570\u5c06 unicode \u6587\u672c\u6807\u51c6\u5316\u3002 \u4f7f\u7528 str.translate() \u6279\u91cf\u5904\u7406\u3002 \u6e05\u7406\u4e00\u4e2a\u6700\u4e3b\u8981\u7684\u95ee\u9898\u5e94\u8be5\u662f\u8fd0\u884c\u7684\u6027\u80fd\u3002\u4e00\u822c\u6765\u8bb2\uff0c\u4ee3\u7801\u8d8a\u7b80\u5355\u8fd0\u884c\u8d8a\u5feb\u3002 \u5bf9\u4e8e\u7b80\u5355\u7684\u66ff\u6362\u64cd\u4f5c\uff0c str.replace() \u65b9\u6cd5\u901a\u5e38\u662f\u6700\u5feb\u7684\uff0c\u751a\u81f3\u9700\u8981\u591a\u6b21\u8c03\u7528\u7684\u65f6\u5019\u3002\u5982\u679c\u8981\u6267\u884c\u4efb\u4f55\u590d\u6742\u5b57\u7b26\u5bf9\u5b57\u7b26\u7684\u91cd\u65b0\u6620\u5c04\u6216\u8005\u5220\u9664\u64cd\u4f5c\u7684\u8bdd\uff0c translate() \u65b9\u6cd5\u4f1a\u975e\u5e38\u7684\u5feb\u3002 >>> s = 'p\u00fdt\u0125\u00f6\u00f1\\fis\\tawesome\\r\\n' >>> remap = { ... ord('\\t') : ' ', ... ord('\\f') : ' ', ... ord('\\r') : None # Deleted ... } >>> a = s.translate(remap) >>> a 'p\u00fdt\u0125\u00f6\u00f1 is awesome\\n' >>> >>> import unicodedata >>> import sys >>> cmb_chrs = dict.fromkeys(c for c in range(sys.maxunicode) ... if unicodedata.combining(chr(c))) ... >>> b = unicodedata.normalize('NFD', a) >>> b 'p\u00fdt\u0125\u00f6\u00f1 is awesome\\n' >>> b.translate(cmb_chrs) 'python is awesome\\n' >>> \u683c\u5f0f\u5316 \u51fd\u6570 format() \u53ef\u4ee5\u7528\u6765\u5f88\u5bb9\u6613\u7684\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 < , > \u6216\u8005 ^ \u5b57\u7b26\u540e\u9762\u7d27\u8ddf\u4e00\u4e2a\u6307\u5b9a\u7684\u5bbd\u5ea6\u3002 >>> format(text, '>20') ' Hello World' >>> format(text, '<20') 'Hello World ' >>> format(text, '^20') ' Hello World ' >>> >>> format(text, '=>20s') '=========Hello World' >>> format(text, '*^20s') '****Hello World*****' >>> \u5176\u4ed6\u5bf9\u9f50\u65b9\u5f0f\uff1a \u7b26\u53f7 \u5bf9\u9f50\u65b9\u5f0f \u793a\u4f8b < \u5de6\u5bf9\u9f50 'Hello ' \uff08\u586b\u5145\u53f3\u8fb9\uff09 > \u53f3\u5bf9\u9f50 ' Hello' \uff08\u586b\u5145\u5de6\u8fb9\uff09 ^ \u5c45\u4e2d\u5bf9\u9f50 ' Hello ' \uff08\u586b\u5145\u4e24\u8fb9\uff09 = \u586b\u5145\u7b26\u53f7 + \u5bf9\u9f50 '====Hello' \uff08\u9700\u914d\u5408 > \uff09 \u62fc\u63a5 \u5982\u679c\u8981\u5408\u5e76\u7684\u5b57\u7b26\u4e32\u662f\u5728\u4e00\u4e2a\u5e8f\u5217\u6216\u8005 iterable \u4e2d\uff0c\u90a3\u4e48\u6700\u5feb\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528 join() \u65b9\u6cd5\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u52a0\u53f7(+)\u64cd\u4f5c\u7b26\u53bb\u8fde\u63a5\u5927\u91cf\u7684\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u662f\u975e\u5e38\u4f4e\u6548\u7387\u7684\uff0c \u56e0\u4e3a\u52a0\u53f7\u8fde\u63a5\u4f1a\u5f15\u8d77\u5185\u5b58\u590d\u5236\u4ee5\u53ca\u5783\u573e\u56de\u6536\u64cd\u4f5c\u3002 \u7279\u522b\u7684\uff0c\u4f60\u6c38\u8fdc\u90fd\u4e0d\u5e94\u50cf\u4e0b\u9762\u8fd9\u6837\u5199\u5b57\u7b26\u4e32\u8fde\u63a5\u4ee3\u7801\uff1a s = '' for p in parts: s += p \u540c\u6837\u8fd8\u5f97\u6ce8\u610f\u4e0d\u5fc5\u8981\u7684\u5b57\u7b26\u4e32\u8fde\u63a5\u64cd\u4f5c\u3002\u6709\u65f6\u5019\u7a0b\u5e8f\u5458\u5728\u6ca1\u6709\u5fc5\u8981\u505a\u8fde\u63a5\u64cd\u4f5c\u7684\u65f6\u5019\u4ecd\u7136\u591a\u6b64\u4e00\u4e3e\u3002\u6bd4\u5982\u5728\u6253\u5370\u7684\u65f6\u5019\uff1a print(a + ':' + b + ':' + c) # Ugly print(':'.join([a, b, c])) # Still ugly print(a, b, c, sep=':') # Better \u5f53\u6df7\u5408\u4f7f\u7528I/O\u64cd\u4f5c\u548c\u5b57\u7b26\u4e32\u8fde\u63a5\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6709\u65f6\u5019\u9700\u8981\u4ed4\u7ec6\u7814\u7a76\u3002 \u6bd4\u5982\uff0c\u8003\u8651\u4e0b\u9762\u7684\u4e24\u7aef\u4ee3\u7801\u7247\u6bb5\uff1a # Version 1 (string concatenation) f.write(chunk1 + chunk2) # Version 2 (separate I/O operations) f.write(chunk1) f.write(chunk2) \u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f88\u5c0f\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u7248\u672c\u6027\u80fd\u4f1a\u66f4\u597d\u4e9b\uff0c\u56e0\u4e3aI/O\u7cfb\u7edf\u8c03\u7528\u5929\u751f\u5c31\u6162\u3002 \u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f88\u5927\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u7248\u672c\u53ef\u80fd\u4f1a\u66f4\u52a0\u9ad8\u6548\uff0c \u56e0\u4e3a\u5b83\u907f\u514d\u4e86\u521b\u5efa\u4e00\u4e2a\u5f88\u5927\u7684\u4e34\u65f6\u7ed3\u679c\u5e76\u4e14\u8981\u590d\u5236\u5927\u91cf\u7684\u5185\u5b58\u5757\u6570\u636e\u3002 \u63d2\u5165 Python\u5e76\u6ca1\u6709\u5bf9\u5728\u5b57\u7b26\u4e32\u4e2d\u7b80\u5355\u66ff\u6362\u53d8\u91cf\u503c\u63d0\u4f9b\u76f4\u63a5\u7684\u652f\u6301\u3002 \u4f46\u662f\u901a\u8fc7\u4f7f\u7528\u5b57\u7b26\u4e32\u7684 format() \u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6bd4\u5982\uff1a >>> s = '{name} has {n} messages.' >>> s.format(name='Guido', n=37) 'Guido has 37 messages.' >>> \u6216\u8005\uff0c\u5982\u679c\u8981\u88ab\u66ff\u6362\u7684\u53d8\u91cf\u80fd\u5728\u53d8\u91cf\u57df\u4e2d\u627e\u5230\uff0c \u90a3\u4e48\u4f60\u53ef\u4ee5\u7ed3\u5408\u4f7f\u7528 format_map() \u548c vars() \u3002\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a >>> name = 'Guido' >>> n = 37 >>> s.format_map(vars()) 'Guido has 37 messages.' >>> format() \u548c format_map() \u7684\u4e00\u4e2a\u7f3a\u9677\u5c31\u662f\u5b83\u4eec\u5e76\u4e0d\u80fd\u5f88\u597d\u7684\u5904\u7406\u53d8\u91cf\u7f3a\u5931\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\uff1a >>> s.format(name='Guido') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> KeyError: 'n' >>> class safesub(dict): \"\"\"\u9632\u6b62key\u627e\u4e0d\u5230\"\"\" def __missing__(self, key): return '{' + key + '}' >>> del n # Make sure n is undefined >>> s.format_map(safesub(vars())) 'Guido has {n} messages.' >>> \u547d\u540d\u5207\u7247 \u5982\u679c\u7a0b\u5e8f\u5305\u542b\u4e86\u5927\u91cf\u65e0\u6cd5\u76f4\u89c6\u7684\u786c\u7f16\u7801\u5207\u7247\uff0c\u53ef\u4ee5\u8fd9\u6837\u8fd9\u6837\u547d\u540d\u5207\u7247\uff1a ###### 0123456789012345678901234567890123456789012345678901234567890' record = '....................100 .......513.25 ..........' cost = int(record[20:23]) * float(record[31:37]) # \u547d\u540d\u5207\u7247 SHARES = slice(20, 23) PRICE = slice(31, 37) cost = int(record[SHARES]) * float(record[PRICE]) >>> a = slice(5, 50, 2) >>> a.start 5 >>> a.stop 50 >>> a.step 2 >>> \u5217\u8868\u7684\u64cd\u4f5c # \u521b\u5efa\u5217\u8868 lst = [1, 2, 3, 4, 5] print(f\"\u521d\u59cb\u5217\u8868: {lst}\") # \u8f93\u51fa: \u521d\u59cb\u5217\u8868: [1, 2, 3, 4, 5] # \u8bbf\u95ee\u5143\u7d20 print(f\"\u7b2c\u4e00\u4e2a\u5143\u7d20: {lst[0]}\") # \u8f93\u51fa: \u7b2c\u4e00\u4e2a\u5143\u7d20: 1 print(f\"\u6700\u540e\u4e00\u4e2a\u5143\u7d20: {lst[-1]}\") # \u8f93\u51fa: \u6700\u540e\u4e00\u4e2a\u5143\u7d20: 5 print(f\"\u5207\u7247(1-3): {lst[1:3]}\") # \u8f93\u51fa: \u5207\u7247(1-3): [2, 3] # \u4fee\u6539\u5217\u8868 lst[0] = 10 print(f\"\u4fee\u6539\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e: {lst}\") # \u8f93\u51fa: \u4fee\u6539\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e: [10, 2, 3, 4, 5] # \u6dfb\u52a0\u5143\u7d20 lst.append(6) print(f\"\u8ffd\u52a0\u5143\u7d20\u540e: {lst}\") # \u8f93\u51fa: \u8ffd\u52a0\u5143\u7d20\u540e: [10, 2, 3, 4, 5, 6] lst.insert(1, 1.5) print(f\"\u63d2\u5165\u5143\u7d20\u540e: {lst}\") # \u8f93\u51fa: \u63d2\u5165\u5143\u7d20\u540e: [10, 1.5, 2, 3, 4, 5, 6] # \u5220\u9664\u5143\u7d20 del lst[0] print(f\"\u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e: {lst}\") # \u8f93\u51fa: \u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e: [1.5, 2, 3, 4, 5, 6] popped = lst.pop() print(f\"\u5f39\u51fa\u6700\u540e\u4e00\u4e2a\u5143\u7d20: {popped}, \u5269\u4f59\u5217\u8868: {lst}\") # \u8f93\u51fa: \u5f39\u51fa\u6700\u540e\u4e00\u4e2a\u5143\u7d20: 6, \u5269\u4f59\u5217\u8868: [1.5, 2, 3, 4, 5] lst.remove(3) print(f\"\u79fb\u9664\u5143\u7d203\u540e: {lst}\") # \u8f93\u51fa: \u79fb\u9664\u5143\u7d203\u540e: [1.5, 2, 4, 5] # \u5217\u8868\u64cd\u4f5c lst.extend([6, 7]) print(f\"\u6269\u5c55\u5217\u8868\u540e: {lst}\") # \u8f93\u51fa: \u6269\u5c55\u5217\u8868\u540e: [1.5, 2, 4, 5, 6, 7] lst.reverse() print(f\"\u53cd\u8f6c\u5217\u8868\u540e: {lst}\") # \u8f93\u51fa: \u53cd\u8f6c\u5217\u8868\u540e: [7, 6, 5, 4, 2, 1.5] lst.sort() print(f\"\u6392\u5e8f\u540e\u5217\u8868: {lst}\") # \u8f93\u51fa: \u6392\u5e8f\u540e\u5217\u8868: [1.5, 2, 4, 5, 6, 7] # \u5217\u8868\u63a8\u5bfc\u5f0f squares = [x**2 for x in lst] print(f\"\u5217\u8868\u63a8\u5bfc\u5f0f(\u5e73\u65b9): {squares}\") # \u8f93\u51fa: \u5217\u8868\u63a8\u5bfc\u5f0f(\u5e73\u65b9): [2.25, 4, 16, 25, 36, 49] # \u5176\u4ed6\u5e38\u7528\u65b9\u6cd5 print(f\"\u5217\u8868\u957f\u5ea6: {len(lst)}\") # \u8f93\u51fa: \u5217\u8868\u957f\u5ea6: 6 print(f\"\u5143\u7d205\u7684\u7d22\u5f15: {lst.index(5)}\") # \u8f93\u51fa: \u5143\u7d205\u7684\u7d22\u5f15: 3 print(f\"\u5143\u7d202\u51fa\u73b0\u6b21\u6570: {lst.count(2)}\") # \u8f93\u51fa: \u5143\u7d202\u51fa\u73b0\u6b21\u6570: 1 \u5143\u7ec4\u7684\u64cd\u4f5c # \u521b\u5efa\u5143\u7ec4 tup = (1, 2, 3, 4, 5) print(f\"\u521d\u59cb\u5143\u7ec4: {tup}\") # \u8f93\u51fa: \u521d\u59cb\u5143\u7ec4: (1, 2, 3, 4, 5) # \u8bbf\u95ee\u5143\u7d20 print(f\"\u7b2c\u4e00\u4e2a\u5143\u7d20: {tup[0]}\") # \u8f93\u51fa: \u7b2c\u4e00\u4e2a\u5143\u7d20: 1 print(f\"\u6700\u540e\u4e00\u4e2a\u5143\u7d20: {tup[-1]}\") # \u8f93\u51fa: \u6700\u540e\u4e00\u4e2a\u5143\u7d20: 5 print(f\"\u5207\u7247(1-3): {tup[1:3]}\") # \u8f93\u51fa: \u5207\u7247(1-3): (2, 3) # \u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4ee5\u4e0b\u64cd\u4f5c\u4f1a\u62a5\u9519 # tup[0] = 10 # TypeError: 'tuple' object does not support item assignment # \u5143\u7ec4\u64cd\u4f5c print(f\"\u5143\u7ec4\u957f\u5ea6: {len(tup)}\") # \u8f93\u51fa: \u5143\u7ec4\u957f\u5ea6: 5 print(f\"\u5143\u7d203\u7684\u7d22\u5f15: {tup.index(3)}\") # \u8f93\u51fa: \u5143\u7d203\u7684\u7d22\u5f15: 2 print(f\"\u5143\u7d202\u51fa\u73b0\u6b21\u6570: {tup.count(2)}\") # \u8f93\u51fa: \u5143\u7d202\u51fa\u73b0\u6b21\u6570: 1 # \u5143\u7ec4\u89e3\u5305 a, b, c, d, e = tup print(f\"\u89e3\u5305\u7ed3\u679c: a={a}, b={b}, c={c}\") # \u8f93\u51fa: \u89e3\u5305\u7ed3\u679c: a=1, b=2, c=3 # \u5143\u7ec4\u8fde\u63a5 new_tup = tup + (6, 7) print(f\"\u8fde\u63a5\u540e\u7684\u65b0\u5143\u7ec4: {new_tup}\") # \u8f93\u51fa: \u8fde\u63a5\u540e\u7684\u65b0\u5143\u7ec4: (1, 2, 3, 4, 5, 6, 7) # \u5143\u7ec4\u4e0e\u5217\u8868\u8f6c\u6362 lst_from_tup = list(tup) print(f\"\u5143\u7ec4\u8f6c\u5217\u8868: {lst_from_tup}\") # \u8f93\u51fa: \u5143\u7ec4\u8f6c\u5217\u8868: [1, 2, 3, 4, 5] tup_from_lst = tuple(lst) print(f\"\u5217\u8868\u8f6c\u5143\u7ec4: {tup_from_lst}\") # \u8f93\u51fa: \u5217\u8868\u8f6c\u5143\u7ec4: (1.5, 2, 4, 5, 6, 7) \u5217\u8868\u548c\u5143\u7ec4\u7684\u533a\u522b \u5217\u8868\u662f\u53ef\u53d8\u7684(mutable)\uff0c\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684(immutable) \u5217\u8868\u4f7f\u7528\u65b9\u62ec\u53f7[]\uff0c\u5143\u7ec4\u4f7f\u7528\u5706\u62ec\u53f7() \u5217\u8868\u6709\u66f4\u591a\u5185\u7f6e\u65b9\u6cd5(\u5982append, remove\u7b49) \u5143\u7ec4\u901a\u5e38\u7528\u4e8e\u5f02\u6784\u6570\u636e\uff0c\u5217\u8868\u7528\u4e8e\u540c\u6784\u6570\u636e \u5143\u7ec4\u53ef\u4ee5\u4f5c\u4e3a\u5b57\u5178\u7684\u952e\uff0c\u5217\u8868\u4e0d\u80fd \u5c06\u5e8f\u5217\u5206\u89e3\u4e3a\u5355\u72ec\u7684\u53d8\u91cf \u4efb\u4f55\u7684\u5e8f\u5217\uff08\u6216\u8005\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u8d4b\u503c\u64cd\u4f5c\u6765\u5206\u89e3\u4e3a\u5355\u72ec\u7684\u53d8\u91cf\u3002 \u552f\u4e00\u7684\u8981\u6c42\u5c31\u662f\u53d8\u91cf\u7684\u603b\u6570\u548c\u7ed3\u6784\u5fc5\u987b\u4e0e\u5e8f\u5217\u76f8\u543b\u5408\u3002 >>> p = (4, 5) >>> x, y = p >>> x 4 >>> y 5 >>> >>> data = [ 'ACME', 50, 91.1, (2012, 12, 21) ] >>> name, shares, price, date = data >>> name 'ACME' >>> date (2012, 12, 21) >>> name, shares, price, (year, mon, day) = data >>> name 'ACME' >>> year 2012 >>> mon 12 >>> day 21 >>> >>> record = ('Dave', 'dave@example.com', '773-555-1212', '847-555-1212') >>> name, email, *phone_numbers = record >>> name 'Dave' >>> email 'dave@example.com' >>> phone_numbers ['773-555-1212', '847-555-1212'] >>> \u5220\u9664\u5e8f\u5217\u76f8\u540c\u5143\u7d20\u5e76\u4fdd\u6301\u987a\u5e8f \u5982\u679c\u5e8f\u5217\u4e0a\u7684\u503c\u90fd\u662f hashable \u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u5229\u7528\u96c6\u5408\u6216\u8005\u751f\u6210\u5668\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6bd4\u5982\uff1a def my_dedupe(items): seen = set() for item in items: if item not in seen: yield item seen.add(item) \u4f7f\u7528\u65b9\u6cd5\uff1a >>> a = [1, 5, 2, 1, 9, 1, 5, 10] >>> list(dedupe(a)) [1, 5, 2, 9, 10] >>> \u8fd9\u4e2a\u65b9\u6cd5\u4ec5\u4ec5\u5728\u5e8f\u5217\u4e2d\u5143\u7d20\u4e3a hashable \u7684\u65f6\u5019\u624d\u7ba1\u7528\u3002 \u5982\u679c\u4f60\u60f3\u6d88\u9664\u5143\u7d20\u4e0d\u53ef\u54c8\u5e0c\uff08\u6bd4\u5982 dict \u7c7b\u578b\uff09\u7684\u5e8f\u5217\u4e2d\u91cd\u590d\u5143\u7d20\u7684\u8bdd\uff0c\u9700\u8981\u5c06\u4e0a\u8ff0\u4ee3\u7801\u7a0d\u5fae\u6539\u53d8\u4e00\u4e0b\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a def my_dedupe(items, key=None): seen = set() for item in items: val = item if key is None else key(item) if val not in seen: yield item seen.add(val) \u4f7f\u7528\u65b9\u6cd5\uff1a >>> a = [ {'x':1, 'y':2}, {'x':1, 'y':3}, {'x':1, 'y':2}, {'x':2, 'y':4}] >>> list(dedupe(a, key=lambda d: (d['x'],d['y']))) [{'x': 1, 'y': 2}, {'x': 1, 'y': 3}, {'x': 2, 'y': 4}] >>> list(dedupe(a, key=lambda d: d['x'])) [{'x': 1, 'y': 2}, {'x': 2, 'y': 4}] >>> \u8fc7\u6ee4\u5e8f\u5217\u5143\u7d20 \u6709\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u60f3\u5229\u7528\u4e00\u4e9b\u89c4\u5219\u4ece\u4e2d\u63d0\u53d6\u51fa\u9700\u8981\u7684\u503c\u6216\u8005\u662f\u7f29\u77ed\u5e8f\u5217 \u6700\u7b80\u5355\u7684\u8fc7\u6ee4\u5e8f\u5217\u5143\u7d20\u7684\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u3002\u6bd4\u5982\uff1a >>> mylist = [1, 4, -5, 10, -7, 2, 3, -1] >>> [n for n in mylist if n > 0] [1, 4, 10, 2, 3] >>> [n for n in mylist if n < 0] [-5, -7, -1] >>> \u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u7684\u4e00\u4e2a\u6f5c\u5728\u7f3a\u9677\u5c31\u662f\u5982\u679c\u8f93\u5165\u975e\u5e38\u5927\u7684\u65f6\u5019\u4f1a\u4ea7\u751f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u7ed3\u679c\u96c6\uff0c\u5360\u7528\u5927\u91cf\u5185\u5b58\u3002 \u5982\u679c\u4f60\u5bf9\u5185\u5b58\u6bd4\u8f83\u654f\u611f\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u8fed\u4ee3\u4ea7\u751f\u8fc7\u6ee4\u7684\u5143\u7d20\u3002\u6bd4\u5982\uff1a >>> pos = (n for n in mylist if n > 0) >>> pos <generator object <genexpr> at 0x1006a0eb0> >>> for x in pos: ... print(x) ... 1 4 10 2 3 >>> \u6709\u65f6\u5019\uff0c\u8fc7\u6ee4\u89c4\u5219\u6bd4\u8f83\u590d\u6742\uff0c\u4e0d\u80fd\u7b80\u5355\u7684\u5728\u5217\u8868\u63a8\u5bfc\u6216\u8005\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d\u8868\u8fbe\u51fa\u6765\u3002 \u6bd4\u5982\uff0c\u5047\u8bbe\u8fc7\u6ee4\u7684\u65f6\u5019\u9700\u8981\u5904\u7406\u4e00\u4e9b\u5f02\u5e38\u6216\u8005\u5176\u4ed6\u590d\u6742\u60c5\u51b5\u3002\u8fd9\u65f6\u5019\u4f60\u53ef\u4ee5\u5c06\u8fc7\u6ee4\u4ee3\u7801\u653e\u5230\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c \u7136\u540e\u4f7f\u7528\u5185\u5efa\u7684 filter() \u51fd\u6570\u3002\u793a\u4f8b\u5982\u4e0b\uff1a values = ['1', '2', '-3', '-', '4', 'N/A', '5'] def is_int(val): try: x = int(val) return True except ValueError: return False ivals = list(filter(is_int, values)) print(ivals) # Outputs ['1', '2', '-3', '4', '5'] itertools.compress() \u89c1\u5185\u7f6e\u6a21\u5757 \u8f6c\u6362\u5e76\u540c\u65f6\u8ba1\u7b97\u6570\u636e \u5728\u6570\u636e\u5e8f\u5217\u4e0a\u6267\u884c\u805a\u96c6\u51fd\u6570\uff08\u6bd4\u5982 sum() , min() , max() \uff09\uff0c \u4f46\u662f\u9996\u5148\u9700\u8981\u5148\u8f6c\u6362\u6216\u8005\u8fc7\u6ee4\u6570\u636e\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e00\u4e2a\u975e\u5e38\u4f18\u96c5\u7684\u65b9\u5f0f\u53bb\u7ed3\u5408\u6570\u636e\u8ba1\u7b97\u4e0e\u8f6c\u6362\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53c2\u6570\u3002 nums = [1, 2, 3, 4, 5] s = sum(x * x for x in nums) \u6bd4 sum((x * x for x in nums)) \u4f18\u96c5\u3002 \u89e3\u538b\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8d4b\u503c\u7ed9\u591a\u4e2a\u53d8\u91cf \u5982\u679c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u4e2a\u6570\u8d85\u8fc7\u53d8\u91cf\u4e2a\u6570\u65f6\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a ValueError \u3002Python \u7684\u661f\u53f7\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 >>> record = ('Dave', 'dave@example.com', '773-555-1212', '847-555-1212') >>> name, email, *phone_numbers = record >>> name 'Dave' >>> email 'dave@example.com' >>> phone_numbers ['773-555-1212', '847-555-1212'] >>> \u661f\u53f7\u8868\u8fbe\u5f0f\u5728\u8fed\u4ee3\u5143\u7d20\u4e3a\u53ef\u53d8\u957f\u5143\u7ec4\u7684\u5e8f\u5217\u65f6\u662f\u5f88\u6709\u7528\u7684\u3002 records = [ ('foo', 1, 2), ('bar', 'hello'), ('foo', 3, 4), ] def do_foo(x, y): print('foo', x, y) def do_bar(s): print('bar', s) for tag, *args in records: if tag == 'foo': do_foo(*args) elif tag == 'bar': do_bar(*args) \u96c6\u5408\u7684\u64cd\u4f5c \u57fa\u672c\u64cd\u4f5c # \u521b\u5efa\u96c6\u5408 s1 = {1, 2, 3, 4, 5} s2 = {4, 5, 6, 7, 8} print(f\"\u96c6\u5408s1: {s1}\") # \u8f93\u51fa: \u96c6\u5408s1: {1, 2, 3, 4, 5} print(f\"\u96c6\u5408s2: {s2}\") # \u8f93\u51fa: \u96c6\u5408s2: {4, 5, 6, 7, 8} # \u6dfb\u52a0\u5143\u7d20 s1.add(6) print(f\"\u6dfb\u52a0\u5143\u7d206\u540es1: {s1}\") # \u8f93\u51fa: \u6dfb\u52a0\u5143\u7d206\u540es1: {1, 2, 3, 4, 5, 6} # \u5220\u9664\u5143\u7d20 s1.remove(6) # \u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\u4f1a\u62a5KeyError print(f\"\u5220\u9664\u5143\u7d206\u540es1: {s1}\") # \u8f93\u51fa: \u5220\u9664\u5143\u7d206\u540es1: {1, 2, 3, 4, 5} s1.discard(10) # \u5b89\u5168\u5220\u9664\uff0c\u5143\u7d20\u4e0d\u5b58\u5728\u4e0d\u4f1a\u62a5\u9519 print(f\"\u5c1d\u8bd5\u5220\u9664\u4e0d\u5b58\u5728\u7684\u5143\u7d2010\u540es1: {s1}\") # \u8f93\u51fa: \u5c1d\u8bd5\u5220\u9664\u4e0d\u5b58\u5728\u7684\u5143\u7d2010\u540es1: {1, 2, 3, 4, 5} popped = s1.pop() # \u968f\u673a\u5220\u9664\u5e76\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20 print(f\"\u5f39\u51fa\u5143\u7d20: {popped}, \u5269\u4f59\u96c6\u5408: {s1}\") # \u8f93\u51fa\u793a\u4f8b: \u5f39\u51fa\u5143\u7d20: 1, \u5269\u4f59\u96c6\u5408: {2, 3, 4, 5} # \u6e05\u7a7a\u96c6\u5408 s1.clear() print(f\"\u6e05\u7a7a\u540e\u7684s1: {s1}\") # \u8f93\u51fa: \u6e05\u7a7a\u540e\u7684s1: set() \u8fd0\u7b97\u64cd\u4f5c s1 = {1, 2, 3, 4, 5} s2 = {4, 5, 6, 7, 8} # \u5e76\u96c6 print(f\"\u5e76\u96c6(s1 | s2): {s1 | s2}\") # \u8f93\u51fa: \u5e76\u96c6(s1 | s2): {1, 2, 3, 4, 5, 6, 7, 8} print(f\"\u5e76\u96c6(s1.union(s2)): {s1.union(s2)}\") # \u540c\u4e0a # \u4ea4\u96c6 print(f\"\u4ea4\u96c6(s1 & s2): {s1 & s2}\") # \u8f93\u51fa: \u4ea4\u96c6(s1 & s2): {4, 5} print(f\"\u4ea4\u96c6(s1.intersection(s2)): {s1.intersection(s2)}\") # \u540c\u4e0a # \u5dee\u96c6 print(f\"\u5dee\u96c6(s1 - s2): {s1 - s2}\") # \u8f93\u51fa: \u5dee\u96c6(s1 - s2): {1, 2, 3} print(f\"\u5dee\u96c6(s1.difference(s2)): {s1.difference(s2)}\") # \u540c\u4e0a # \u5bf9\u79f0\u5dee\u96c6(\u4ec5\u5728\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\u4e2d\u5b58\u5728\u7684\u5143\u7d20) print(f\"\u5bf9\u79f0\u5dee\u96c6(s1 ^ s2): {s1 ^ s2}\") # \u8f93\u51fa: \u5bf9\u79f0\u5dee\u96c6(s1 ^ s2): {1, 2, 3, 6, 7, 8} print(f\"\u5bf9\u79f0\u5dee\u96c6(s1.symmetric_difference(s2)): {s1.symmetric_difference(s2)}\") # \u540c\u4e0a \u5173\u7cfb\u5224\u65ad a = {1, 2, 3} b = {1, 2, 3, 4, 5} # \u5b50\u96c6\u5224\u65ad print(f\"a\u662f\u5426\u662fb\u7684\u5b50\u96c6: {a.issubset(b)}\") # \u8f93\u51fa: a\u662f\u5426\u662fb\u7684\u5b50\u96c6: True print(f\"a <= b: {a <= b}\") # \u8f93\u51fa: a <= b: True # \u771f\u5b50\u96c6\u5224\u65ad print(f\"a\u662f\u5426\u662fb\u7684\u771f\u5b50\u96c6: {a < b}\") # \u8f93\u51fa: a\u662f\u5426\u662fb\u7684\u771f\u5b50\u96c6: True # \u8d85\u96c6\u5224\u65ad print(f\"b\u662f\u5426\u662fa\u7684\u8d85\u96c6: {b.issuperset(a)}\") # \u8f93\u51fa: b\u662f\u5426\u662fa\u7684\u8d85\u96c6: True print(f\"b >= a: {b >= a}\") # \u8f93\u51fa: b >= a: True # \u771f\u8d85\u96c6\u5224\u65ad print(f\"b\u662f\u5426\u662fa\u7684\u771f\u8d85\u96c6: {b > a}\") # \u8f93\u51fa: b\u662f\u5426\u662fa\u7684\u771f\u8d85\u96c6: True # \u4e0d\u76f8\u4ea4\u5224\u65ad print(f\"a\u548c{6,7,8}\u662f\u5426\u4e0d\u76f8\u4ea4: {a.isdisjoint({6,7,8})}\") # \u8f93\u51fa: a\u548c{6,7,8}\u662f\u5426\u4e0d\u76f8\u4ea4: True \u5176\u4ed6\u64cd\u4f5c # \u96c6\u5408\u957f\u5ea6 print(f\"s1\u7684\u957f\u5ea6: {len(s1)}\") # \u8f93\u51fa: s1\u7684\u957f\u5ea6: 5 # \u68c0\u67e5\u5143\u7d20\u662f\u5426\u5b58\u5728 print(f\"3\u662f\u5426\u5728s1\u4e2d: {3 in s1}\") # \u8f93\u51fa: 3\u662f\u5426\u5728s1\u4e2d: True # \u96c6\u5408\u63a8\u5bfc\u5f0f squared = {x**2 for x in s1} print(f\"\u96c6\u5408\u63a8\u5bfc\u5f0f(\u5e73\u65b9): {squared}\") # \u8f93\u51fa\u793a\u4f8b: \u96c6\u5408\u63a8\u5bfc\u5f0f(\u5e73\u65b9): {16, 1, 4, 9, 25} # \u51bb\u7ed3\u96c6\u5408(\u4e0d\u53ef\u53d8\u96c6\u5408) fs = frozenset([1, 2, 3]) print(f\"\u51bb\u7ed3\u96c6\u5408: {fs}\") # \u8f93\u51fa: \u51bb\u7ed3\u96c6\u5408: frozenset({1, 2, 3}) # fs.add(4) # \u62a5\u9519: AttributeError: 'frozenset' object has no attribute 'add' \u96c6\u5408\u4e0e\u5217\u8868/\u5143\u7ec4\u8f6c\u6362 # \u5217\u8868/\u5143\u7ec4\u8f6c\u96c6\u5408(\u81ea\u52a8\u53bb\u91cd) lst = [1, 2, 2, 3, 3, 3] s = set(lst) print(f\"\u5217\u8868\u8f6c\u96c6\u5408(\u81ea\u52a8\u53bb\u91cd): {s}\") # \u8f93\u51fa: \u5217\u8868\u8f6c\u96c6\u5408(\u81ea\u52a8\u53bb\u91cd): {1, 2, 3} # \u96c6\u5408\u8f6c\u5217\u8868/\u5143\u7ec4 lst_from_set = list(s) tup_from_set = tuple(s) print(f\"\u96c6\u5408\u8f6c\u5217\u8868: {lst_from_set}\") # \u8f93\u51fa\u793a\u4f8b: \u96c6\u5408\u8f6c\u5217\u8868: [1, 2, 3] print(f\"\u96c6\u5408\u8f6c\u5143\u7ec4: {tup_from_set}\") # \u8f93\u51fa\u793a\u4f8b: \u96c6\u5408\u8f6c\u5143\u7ec4: (1, 2, 3) \u5b57\u5178\u7684\u64cd\u4f5c \u57fa\u672c\u64cd\u4f5c # \u521b\u5efa\u5b57\u5178 d1 = {'name': 'Alice', 'age': 25, 'city': 'New York'} d2 = dict(name='Bob', age=30, city='London') print(f\"\u5b57\u5178d1: {d1}\") # \u8f93\u51fa: \u5b57\u5178d1: {'name': 'Alice', 'age': 25, 'city': 'New York'} print(f\"\u5b57\u5178d2: {d2}\") # \u8f93\u51fa: \u5b57\u5178d2: {'name': 'Bob', 'age': 30, 'city': 'London'} # \u8bbf\u95ee\u5143\u7d20 print(f\"\u83b7\u53d6name: {d1['name']}\") # \u8f93\u51fa: \u83b7\u53d6name: Alice print(f\"get\u65b9\u6cd5\u83b7\u53d6age: {d1.get('age')}\") # \u8f93\u51fa: get\u65b9\u6cd5\u83b7\u53d6age: 25 print(f\"\u83b7\u53d6\u4e0d\u5b58\u5728\u7684key: {d1.get('country', 'USA')}\") # \u8f93\u51fa: \u83b7\u53d6\u4e0d\u5b58\u5728\u7684key: USA # \u4fee\u6539\u5143\u7d20 d1['age'] = 26 print(f\"\u4fee\u6539age\u540e: {d1}\") # \u8f93\u51fa: \u4fee\u6539age\u540e: {'name': 'Alice', 'age': 26, 'city': 'New York'} # \u6dfb\u52a0\u5143\u7d20 d1['gender'] = 'Female' print(f\"\u6dfb\u52a0gender\u540e: {d1}\") # \u8f93\u51fa: \u6dfb\u52a0gender\u540e: {'name': 'Alice', 'age': 26, 'city': 'New York', 'gender': 'Female'} # \u5220\u9664\u5143\u7d20 del d1['gender'] print(f\"\u5220\u9664gender\u540e: {d1}\") # \u8f93\u51fa: \u5220\u9664gender\u540e: {'name': 'Alice', 'age': 26, 'city': 'New York'} popped = d1.pop('age') print(f\"\u5f39\u51faage: {popped}, \u5269\u4f59\u5b57\u5178: {d1}\") # \u8f93\u51fa: \u5f39\u51faage: 26, \u5269\u4f59\u5b57\u5178: {'name': 'Alice', 'city': 'New York'} # \u6e05\u7a7a\u5b57\u5178 d1.clear() print(f\"\u6e05\u7a7a\u540e\u7684d1: {d1}\") # \u8f93\u51fa: \u6e05\u7a7a\u540e\u7684d1: {} \u904d\u5386\u64cd\u4f5c d3 = {'name': 'Charlie', 'age': 35, 'city': 'Paris'} # \u904d\u5386\u952e for key in d3.keys(): print(key, end=\" \") # \u8f93\u51fa: name age city print() # \u904d\u5386\u503c for value in d3.values(): print(value, end=\" \") # \u8f93\u51fa: Charlie 35 Paris print() # \u904d\u5386\u952e\u503c\u5bf9 for key, value in d3.items(): print(f\"{key}:{value}\", end=\" \") # \u8f93\u51fa: name:Charlie age:35 city:Paris print() \u63a8\u5bfc\u5f0f numbers = [1, 2, 3, 4, 5] squared_dict = {x: x**2 for x in numbers} print(f\"\u5b57\u5178\u63a8\u5bfc\u5f0f(\u5e73\u65b9): {squared_dict}\") # \u8f93\u51fa: \u5b57\u5178\u63a8\u5bfc\u5f0f(\u5e73\u65b9): {1: 1, 2: 4, 3: 9, 4: 16, 5: 25} # \u6761\u4ef6\u5b57\u5178\u63a8\u5bfc\u5f0f even_squared = {x: x**2 for x in numbers if x % 2 == 0} print(f\"\u5076\u6570\u5e73\u65b9\u5b57\u5178: {even_squared}\") # \u8f93\u51fa: \u5076\u6570\u5e73\u65b9\u5b57\u5178: {2: 4, 4: 16} \u6784\u9020\u4e00\u4e2a\u5b57\u5178\uff0c\u5b83\u662f\u53e6\u5916\u4e00\u4e2a\u5b57\u5178\u7684\u5b50\u96c6\u3002 prices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75 } # Make a dictionary of all prices over 200 p1 = {key: value for key, value in prices.items() if value > 200} # Make a dictionary of tech stocks tech_names = {'AAPL', 'IBM', 'HPQ', 'MSFT'} p2 = {key: value for key, value in prices.items() if key in tech_names} \u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5b57\u5178\u63a8\u5bfc\u80fd\u505a\u5230\u7684\uff0c\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u5143\u7ec4\u5e8f\u5217\u7136\u540e\u628a\u5b83\u4f20\u7ed9 dict() \u51fd\u6570\u4e5f\u80fd\u5b9e\u73b0\u3002\u6bd4\u5982\uff1a p1 = dict((key, value) for key, value in prices.items() if value > 200) \u4f46\u662f\uff0c\u5b57\u5178\u63a8\u5bfc\u65b9\u5f0f\u8868\u610f\u66f4\u6e05\u6670\uff0c\u5e76\u4e14\u5b9e\u9645\u4e0a\u4e5f\u4f1a\u8fd0\u884c\u7684\u66f4\u5feb\u4e9b \uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b9e\u9645\u6d4b\u8bd5\u51e0\u4e4e\u6bd4 dict() \u51fd\u6570\u65b9\u5f0f\u5feb\u6574\u6574\u4e00\u500d\uff09\u3002 \u5408\u5e76\u4e0e\u66f4\u65b0 d4 = {'a': 1, 'b': 2} d5 = {'b': 3, 'c': 4} # \u5408\u5e76\u5b57\u5178(Python 3.9+) merged = d4 | d5 print(f\"\u5408\u5e76\u540e\u7684\u5b57\u5178: {merged}\") # \u8f93\u51fa: \u5408\u5e76\u540e\u7684\u5b57\u5178: {'a': 1, 'b': 3, 'c': 4} # \u66f4\u65b0\u5b57\u5178 d4.update(d5) print(f\"\u66f4\u65b0\u540e\u7684d4: {d4}\") # \u8f93\u51fa: \u66f4\u65b0\u540e\u7684d4: {'a': 1, 'b': 3, 'c': 4} collections \u4e2d\u7684 ChainMap \u7c7b\u4e5f\u80fd\u5408\u5e76\u5b57\u5178\uff0c\u89c1\u5185\u7f6e\u5e93\u3002 \u5176\u4ed6\u64cd\u4f5c d6 = {'apple': 3, 'banana': 5, 'orange': 2} # \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728 print(f\"'apple'\u662f\u5426\u5728\u5b57\u5178\u4e2d: {'apple' in d6}\") # \u8f93\u51fa: 'apple'\u662f\u5426\u5728\u5b57\u5178\u4e2d: True # \u5b57\u5178\u957f\u5ea6 print(f\"\u5b57\u5178\u957f\u5ea6: {len(d6)}\") # \u8f93\u51fa: \u5b57\u5178\u957f\u5ea6: 3 # \u8bbe\u7f6e\u9ed8\u8ba4\u503c count = d6.setdefault('pear', 0) print(f\"pear\u7684\u8ba1\u6570: {count}, \u5b57\u5178: {d6}\") # \u8f93\u51fa: pear\u7684\u8ba1\u6570: 0, \u5b57\u5178: {'apple': 3, 'banana': 5, 'orange': 2, 'pear': 0} # \u83b7\u53d6\u6240\u6709\u952e/\u503c/\u952e\u503c\u5bf9 print(f\"\u6240\u6709\u952e: {d6.keys()}\") # \u8f93\u51fa: \u6240\u6709\u952e: dict_keys(['apple', 'banana', 'orange', 'pear']) print(f\"\u6240\u6709\u503c: {d6.values()}\") # \u8f93\u51fa: \u6240\u6709\u503c: dict_values([3, 5, 2, 0]) print(f\"\u6240\u6709\u952e\u503c\u5bf9: {d6.items()}\") # \u8f93\u51fa: \u6240\u6709\u952e\u503c\u5bf9: dict_items([('apple', 3), ('banana', 5), ('orange', 2), ('pear', 0)]) \u5b57\u5178\u4e0e\u5217\u8868\u8f6c\u6362 # \u5b57\u5178\u8f6c\u5217\u8868(\u952e/\u503c/\u952e\u503c\u5bf9) keys_list = list(d6.keys()) values_list = list(d6.values()) items_list = list(d6.items()) print(f\"\u952e\u5217\u8868: {keys_list}\") # \u8f93\u51fa: \u952e\u5217\u8868: ['apple', 'banana', 'orange', 'pear'] print(f\"\u503c\u5217\u8868: {values_list}\") # \u8f93\u51fa: \u503c\u5217\u8868: [3, 5, 2, 0] print(f\"\u952e\u503c\u5bf9\u5217\u8868: {items_list}\") # \u8f93\u51fa: \u952e\u503c\u5bf9\u5217\u8868: [('apple', 3), ('banana', 5), ('orange', 2), ('pear', 0)] # \u5217\u8868\u8f6c\u5b57\u5178(\u9700\u8981\u7279\u5b9a\u683c\u5f0f) pairs = [('a', 1), ('b', 2), ('c', 3)] dict_from_list = dict(pairs) print(f\"\u5217\u8868\u8f6c\u5b57\u5178: {dict_from_list}\") # \u8f93\u51fa: \u5217\u8868\u8f6c\u5b57\u5178: {'a': 1, 'b': 2, 'c': 3} \u5b57\u5178\u6392\u5e8f scores = {'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95} # \u6309\u952e\u6392\u5e8f sorted_by_key = dict(sorted(scores.items())) print(f\"\u6309\u952e\u6392\u5e8f: {sorted_by_key}\") # \u8f93\u51fa: \u6309\u952e\u6392\u5e8f: {'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95} # \u6309\u503c\u6392\u5e8f(\u964d\u5e8f) sorted_by_value = dict(sorted(scores.items(), key=lambda item: item[1], reverse=True)) print(f\"\u6309\u503c\u6392\u5e8f(\u964d\u5e8f): {sorted_by_value}\") # \u8f93\u51fa: \u6309\u503c\u6392\u5e8f(\u964d\u5e8f): {'David': 95, 'Bob': 92, 'Alice': 85, 'Charlie': 78} # \u6700\u5c0f\u503c/\u6700\u5927\u503c min_price = min(zip(scores.values(), scores.keys())) # \u8f93\u51fa: (78, 'Charlie') max_price = max(zip(scores.values(), scores.keys())) # \u8f93\u51fa: (95, 'David') \u9700\u8981\u6ce8\u610f\u7684\u662f zip() \u51fd\u6570\u521b\u5efa\u7684\u662f\u4e00\u4e2a\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\u7684\u8fed\u4ee3\u5668\u3002 scores_and_names = zip(scores.values(), scores.keys()) print(min(scores_and_names)) # OK print(max(scores_and_names)) # ValueError: max() arg is an empty sequence","title":"Python \u6570\u636e\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_1","text":"","title":""},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_2","text":"","title":"\u6570\u5b57\u7684\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#int","text":"# \u57fa\u672c\u8fd0\u7b97 a, b = 10, 3 print(f\"{a} + {b} = {a + b}\") # \u8f93\u51fa: 10 + 3 = 13 print(f\"{a} - {b} = {a - b}\") # \u8f93\u51fa: 10 - 3 = 7 print(f\"{a} * {b} = {a * b}\") # \u8f93\u51fa: 10 * 3 = 30 print(f\"{a} / {b} = {a / b}\") # \u8f93\u51fa: 10 / 3 = 3.3333333333333335 print(f\"{a} // {b} = {a // b}\") # \u8f93\u51fa: 10 // 3 = 3 (\u6574\u9664) print(f\"{a} % {b} = {a % b}\") # \u8f93\u51fa: 10 % 3 = 1 (\u53d6\u6a21) print(f\"{a} ** {b} = {a ** b}\") # \u8f93\u51fa: 10 ** 3 = 1000 (\u5e42\u8fd0\u7b97) # \u4f4d\u8fd0\u7b97 x, y = 5, 3 # 5=0b101, 3=0b011 print(f\"{x} & {y} = {x & y}\") # \u8f93\u51fa: 5 & 3 = 1 (\u6309\u4f4d\u4e0e 0b001) print(f\"{x} | {y} = {x | y}\") # \u8f93\u51fa: 5 | 3 = 7 (\u6309\u4f4d\u6216 0b111) print(f\"{x} ^ {y} = {x ^ y}\") # \u8f93\u51fa: 5 ^ 3 = 6 (\u6309\u4f4d\u5f02\u6216 0b110) print(f\"~{x} = {~x}\") # \u8f93\u51fa: ~5 = -6 (\u6309\u4f4d\u53d6\u53cd) print(f\"{x} << 1 = {x << 1}\") # \u8f93\u51fa: 5 << 1 = 10 (\u5de6\u79fb 0b1010) print(f\"{x} >> 1 = {x >> 1}\") # \u8f93\u51fa: 5 >> 1 = 2 (\u53f3\u79fb 0b10) # \u8fdb\u5236\u8f6c\u6362 num = 255 print(f\"255\u7684\u4e8c\u8fdb\u5236: {bin(num)}\") # \u8f93\u51fa: 255\u7684\u4e8c\u8fdb\u5236: 0b11111111 print(f\"255\u7684\u516b\u8fdb\u5236: {oct(num)}\") # \u8f93\u51fa: 255\u7684\u516b\u8fdb\u5236: 0o377 print(f\"255\u7684\u5341\u516d\u8fdb\u5236: {hex(num)}\") # \u8f93\u51fa: 255\u7684\u5341\u516d\u8fdb\u5236: 0xff","title":"\u6574\u6570(Int)\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#float","text":"# \u57fa\u672c\u8fd0\u7b97 f1, f2 = 3.5, 2.1 print(f\"{f1} + {f2} = {f1 + f2}\") # \u8f93\u51fa: 3.5 + 2.1 = 5.6 print(f\"{f1} - {f2} = {f1 - f2}\") # \u8f93\u51fa: 3.5 - 2.1 = 1.4 print(f\"{f1} * {f2} = {f1 * f2}\") # \u8f93\u51fa: 3.5 * 2.1 = 7.35 print(f\"{f1} / {f2} = {f1 / f2}\") # \u8f93\u51fa: 3.5 / 2.1 \u2248 1.6666666666666667 # \u6d6e\u70b9\u6570\u7cbe\u5ea6\u95ee\u9898 print(\"0.1 + 0.2 =\", 0.1 + 0.2) # \u8f93\u51fa: 0.1 + 0.2 = 0.30000000000000004 # \u56db\u820d\u4e94\u5165 print(f\"round(3.14159, 2) = {round(3.14159, 2)}\") # \u8f93\u51fa: round(3.14159, 2) = 3.14 print(f\"round(2.675, 2) = {round(2.675, 2)}\") # \u8f93\u51fa: round(2.675, 2) = 2.67 (\u6ce8\u610f\u6d6e\u70b9\u6570\u7cbe\u5ea6\u95ee\u9898) print(f\"round(1627731, -2) = {round(1627731, -2)}\") # \u8f93\u51fa: round(1627731, -2) = 1627700 \u7cbe\u786e\u7684\u6d6e\u70b9\u6570\u8ba1\u7b97\u4f7f\u7528\u5185\u7f6e\u5e93\uff0c\u6bd4\u5982\uff1amath\u3001decimal","title":"\u6d6e\u70b9\u6570(Float)\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#complex","text":"c1 = 3 + 4j c2 = 2 - 1j print(f\"{c1} + {c2} = {c1 + c2}\") # \u8f93\u51fa: (3+4j) + (2-1j) = (5+3j) print(f\"{c1} * {c2} = {c1 * c2}\") # \u8f93\u51fa: (3+4j) * (2-1j) = (10+5j) print(f\"{c1}\u7684\u5b9e\u90e8: {c1.real}\") # \u8f93\u51fa: (3+4j)\u7684\u5b9e\u90e8: 3.0 print(f\"{c1}\u7684\u865a\u90e8: {c1.imag}\") # \u8f93\u51fa: (3+4j)\u7684\u865a\u90e8: 4.0 print(f\"{c1}\u7684\u5171\u8f6d\u590d\u6570: {c1.conjugate()}\") # \u8f93\u51fa: (3+4j)\u7684\u5171\u8f6d\u590d\u6570: (3-4j)","title":"\u590d\u6570(Complex)\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#nan","text":"Python\u5e76\u6ca1\u6709\u7279\u6b8a\u7684\u8bed\u6cd5\u6765\u8868\u793a\u8fd9\u4e9b\u7279\u6b8a\u7684\u6d6e\u70b9\u503c\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 float() \u6765\u521b\u5efa\u5b83\u4eec\u3002\u6bd4\u5982\uff1a >>> a = float('inf') >>> b = float('-inf') >>> c = float('nan') >>> a inf >>> b -inf >>> c nan >>>","title":"\u65e0\u7a77\u5927\u4e0eNaN"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_3","text":"# \u7c7b\u578b\u8f6c\u6362 i = 10 f = 3.14 print(f\"int({f}) = {int(f)}\") # \u8f93\u51fa: int(3.14) = 3 print(f\"float({i}) = {float(i)}\") # \u8f93\u51fa: float(10) = 10.0 print(f\"complex({i}) = {complex(i)}\") # \u8f93\u51fa: complex(10) = (10+0j) # \u5b57\u7b26\u4e32\u8f6c\u6570\u5b57 s1 = \"123\" s2 = \"3.14\" print(f\"int('{s1}') = {int(s1)}\") # \u8f93\u51fa: int('123') = 123 print(f\"float('{s2}') = {float(s2)}\") # \u8f93\u51fa: float('3.14') = 3.14","title":"\u6570\u5b57\u7c7b\u578b\u8f6c\u6362"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_4","text":"# \u5185\u7f6e\u51fd\u6570 print(f\"abs(-5) = {abs(-5)}\") # \u8f93\u51fa: abs(-5) = 5 print(f\"pow(2, 3) = {pow(2, 3)}\") # \u8f93\u51fa: pow(2, 3) = 8 print(f\"divmod(10, 3) = {divmod(10, 3)}\") # \u8f93\u51fa: divmod(10, 3) = (3, 1) # math\u6a21\u5757\u51fd\u6570 print(f\"math.sqrt(16) = {math.sqrt(16)}\") # \u8f93\u51fa: math.sqrt(16) = 4.0 print(f\"math.exp(1) = {math.exp(1)}\") # \u8f93\u51fa: math.exp(1) \u2248 2.718281828459045 print(f\"math.log(100, 10) = {math.log(100, 10)}\") # \u8f93\u51fa: math.log(100, 10) = 2.0 print(f\"math.sin(math.pi/2) = {math.sin(math.pi/2)}\") # \u8f93\u51fa: math.sin(math.pi/2) \u2248 1.0","title":"\u6570\u5b66\u51fd\u6570"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_5","text":"num = 1234567.89123 print(f\"\u5343\u5206\u4f4d\u683c\u5f0f\u5316: {num:,}\") # \u8f93\u51fa: \u5343\u5206\u4f4d\u683c\u5f0f\u5316: 1,234,567.89123 print(f\"\u4fdd\u75592\u4f4d\u5c0f\u6570: {num:.2f}\") # \u8f93\u51fa: \u4fdd\u75592\u4f4d\u5c0f\u6570: 1234567.89 print(f\"\u79d1\u5b66\u8ba1\u6570\u6cd5: {num:.2e}\") # \u8f93\u51fa: \u79d1\u5b66\u8ba1\u6570\u6cd5: 1.23e+06 print(f\"\u767e\u5206\u6bd4\u683c\u5f0f: {0.256:.1%}\") # \u8f93\u51fa: \u767e\u5206\u6bd4\u683c\u5f0f: 25.6% x = 1234.56789 format(x, '>10.1f') # ' 1234.6' format(x, '<10.1f') # '1234.6 ' format(x, '^10.1f') # ' 1234.6 ' format(x, ',') # '1,234.56789' format(x, '0,.1f') # '1,234.6'","title":"\u6570\u5b57\u683c\u5f0f\u5316"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_6","text":"\u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u6216\u5341\u516d\u8fdb\u5236\u7684\u6587\u672c\u4e32\uff0c \u53ef\u4ee5\u5206\u522b\u4f7f\u7528 bin() , oct() \u6216 hex() \u51fd\u6570\uff1a >>> x = 1234 >>> bin(x) '0b10011010010' >>> oct(x) '0o2322' >>> hex(x) '0x4d2' >>> \u53e6\u5916\uff0c\u5982\u679c\u4e0d\u60f3\u8f93\u51fa 0b , 0o \u6216\u8005 0x \u7684\u524d\u7f00\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528 format() \u51fd\u6570\u3002\u6bd4\u5982\uff1a >>> format(x, 'b') '10011010010' >>> format(x, 'o') '2322' >>> format(x, 'x') '4d2' >>> \u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5904\u7406\u4e8c\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236\u6574\u6570\u662f\u5f88\u7b80\u5355\u7684\u3002 \u53ea\u8981\u8bb0\u4f4f\u8fd9\u4e9b\u8f6c\u6362\u5c5e\u4e8e\u6574\u6570\u548c\u5176\u5bf9\u5e94\u7684\u6587\u672c\u8868\u793a\u4e4b\u95f4\u7684\u8f6c\u6362\u5373\u53ef\uff0c\u6c38\u8fdc\u53ea\u6709\u4e00\u79cd\u6574\u6570\u7c7b\u578b\u3002","title":"\u4e8c\u516b\u5341\u516d\u8fdb\u5236\u6574\u6570"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_7","text":"\u4e3a\u4e86\u5c06bytes\u89e3\u6790\u4e3a\u6574\u6570\uff0c\u4f7f\u7528 int.from_bytes() \u65b9\u6cd5\uff0c\u5e76\u50cf\u4e0b\u9762\u8fd9\u6837\u6307\u5b9a\u5b57\u8282\u987a\u5e8f\uff1a >>> len(data) 16 >>> int.from_bytes(data, 'little') 69120565665751139577663547927094891008 >>> int.from_bytes(data, 'big') 94522842520747284487117727783387188 >>> \u4e3a\u4e86\u5c06\u4e00\u4e2a\u5927\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5b57\u8282\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 int.to_bytes() \u65b9\u6cd5\uff0c\u5e76\u50cf\u4e0b\u9762\u8fd9\u6837\u6307\u5b9a\u5b57\u8282\u6570\u548c\u5b57\u8282\u987a\u5e8f\uff1a >>> x = 94522842520747284487117727783387188 >>> x.to_bytes(16, 'big') b'\\x00\\x124V\\x00x\\x90\\xab\\x00\\xcd\\xef\\x01\\x00#\\x004' >>> x.to_bytes(16, 'little') b'4\\x00#\\x00\\x01\\xef\\xcd\\x00\\xab\\x90x\\x00V4\\x12\\x00' >>> \u5927\u6574\u6570\u548c\u5b57\u8282\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u8f6c\u6362\u64cd\u4f5c\u5e76\u4e0d\u5e38\u89c1\u3002 \u7136\u800c\uff0c\u5728\u4e00\u4e9b\u5e94\u7528\u9886\u57df\u6709\u65f6\u5019\u4e5f\u4f1a\u51fa\u73b0\uff0c\u6bd4\u5982\u5bc6\u7801\u5b66\u6216\u8005\u7f51\u7edc\u3002 \u4f8b\u5982\uff0cIPv6\u7f51\u7edc\u5730\u5740\u4f7f\u7528\u4e00\u4e2a128\u4f4d\u7684\u6574\u6570\u8868\u793a\u3002 \u4f5c\u4e3a\u4e00\u79cd\u66ff\u4ee3\u65b9\u6848\uff0c\u5185\u7f6e\u7684 struct \u6a21\u5757\u53ef\u4ee5\u7528\u6765\u89e3\u538b\u5b57\u8282\u3002\u89c1\u5185\u7f6e\u5e93\u3002","title":"\u5927\u6574\u6570"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_8","text":"","title":"\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_9","text":"\u5982\u679c\u60f3\u5339\u914d\u7684\u662f\u5b57\u9762\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u901a\u5e38\u53ea\u9700\u8981\u8c03\u7528\u57fa\u672c\u5b57\u7b26\u4e32\u65b9\u6cd5\u5c31\u884c\uff0c \u6bd4\u5982 str.find() , str.endswith() , str.startswith() >>> text = 'yeah, but no, but yeah, but no, but yeah' >>> # Search for the location of the first occurrence >>> text.find('no') 10 >>>","title":"\u7b80\u5355\u67e5\u627e"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_10","text":"\u68c0\u67e5\u5b57\u7b26\u4e32\u5f00\u5934\u6216\u7ed3\u5c3e\u7684\u4e00\u4e2a\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u7528 str.startswith() \u6216\u8005\u662f str.endswith() \u65b9\u6cd5\u3002 \u63a5\u6536\u7684\u53c2\u6570\u5fc5\u987b\u662f\u5143\u7ec4\u3002 >>> filename = 'spam.txt' >>> filename.endswith('.txt') True >>> filename.startswith('file:') False >>> url = 'http://www.python.org' >>> url.startswith('http:') True >>> >>> import os >>> filenames = os.listdir('.') >>> filenames [ 'Makefile', 'foo.c', 'bar.py', 'spam.c', 'spam.h' ] >>> [name for name in filenames if name.endswith(('.c', '.h')) ] ['foo.c', 'spam.c', 'spam.h' >>> any(name.endswith('.py') for name in filenames) True if any(name.endswith(('.c', '.h')) for name in listdir(dirname)): ...","title":"\u68c0\u67e5\u5f00\u5934\u6216\u7ed3\u5c3e"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_11","text":"fnmatch() \u51fd\u6570\u5339\u914d\u80fd\u529b\u4ecb\u4e8e\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u65b9\u6cd5\u548c\u5f3a\u5927\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u4e4b\u95f4\u3002\u5982\u679c\u5728\u6570\u636e\u5904\u7406\u64cd\u4f5c\u4e2d\u53ea\u9700\u8981\u7b80\u5355\u7684\u901a\u914d\u7b26\u5c31\u80fd\u5b8c\u6210\u7684\u65f6\u5019\uff0c\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u6bd4\u8f83\u5408\u7406\u7684\u65b9\u6848\u3002 \u5982\u679c\u4ee3\u7801\u9700\u8981\u505a\u6587\u4ef6\u540d\u7684\u5339\u914d\uff0c\u6700\u597d\u4f7f\u7528 glob \u6a21\u5757\u3002 >>> from fnmatch import fnmatch, fnmatchcase >>> fnmatch('foo.txt', '*.txt') True >>> fnmatch('foo.txt', '?oo.txt') True >>> fnmatch('Dat45.csv', 'Dat[0-9]*') True >>> names = ['Dat1.csv', 'Dat2.csv', 'config.ini', 'foo.py'] >>> [name for name in names if fnmatch(name, 'Dat*.csv')] ['Dat1.csv', 'Dat2.csv'] >>> import glob pyfiles = glob.glob('*.py') print(pyfiles) # \u8f93\u51fa\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u7684 Python \u6587\u4ef6","title":"\u590d\u6742\u67e5\u627e"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_12","text":"\u89c1 re \u4f7f\u7528\u65b9\u6cd5\u3002","title":"\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u627e"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_13","text":"string \u5bf9\u8c61\u7684 split() \u65b9\u6cd5\u53ea\u9002\u5e94\u4e8e\u975e\u5e38\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u5206\u5272\u60c5\u5f62\uff0c \u5b83\u5e76\u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\u5206\u9694\u7b26\u6216\u8005\u662f\u5206\u9694\u7b26\u5468\u56f4\u4e0d\u786e\u5b9a\u7684\u7a7a\u683c\u3002 \u5f53\u4f60\u9700\u8981\u66f4\u52a0\u7075\u6d3b\u7684\u5207\u5272\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u6700\u597d\u4f7f\u7528 re.split() \u65b9\u6cd5\uff1a >>> line = 'asdf fjdk; afed, fjek,asdf, foo' >>> import re >>> re.split(r'[;,\\s]\\s*', line) ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo'] >>> fields = re.split(r'(;|,|\\s)\\s*', line) >>> fields ['asdf', ' ', 'fjdk', ';', 'afed', ',', 'fjek', ',', 'asdf', ',', 'foo'] >>> >>> values = fields[::2] >>> delimiters = fields[1::2] + [''] >>> values ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo'] >>> delimiters [' ', ';', ',', ',', ',', ''] >>> # Reform the line using the same delimiters >>> ''.join(v+d for v,d in zip(values, delimiters)) 'asdf fjdk;afed,fjek,asdf,foo' >>> re.split(r'(?:,|;|\\s)\\s*', line) ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']","title":"\u5206\u5272"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_14","text":"\u5bf9\u4e8e\u7b80\u5355\u7684\u5b57\u9762\u6a21\u5f0f\uff0c\u76f4\u63a5\u4f7f\u7528 str.replace() \u65b9\u6cd5\u5373\u53ef\uff0c\u5bf9\u4e8e\u590d\u6742\u7684\u6a21\u5f0f\uff0c\u4f7f\u7528 re \u6a21\u5757\u4e2d\u7684 sub() \u51fd\u6570\u3002","title":"\u66ff\u6362"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_15","text":"strip() \u65b9\u6cd5\u80fd\u7528\u4e8e\u5220\u9664\u5f00\u59cb\u6216\u7ed3\u5c3e\u7684\u5b57\u7b26\u3002 lstrip() \u548c rstrip() \u5206\u522b\u4ece\u5de6\u548c\u4ece\u53f3\u6267\u884c\u5220\u9664\u64cd\u4f5c\u3002","title":"\u5220\u9664"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_16","text":"\u5728\u975e\u5e38\u7b80\u5355\u7684\u60c5\u5f62\u4e0b\uff0c\u53ef\u80fd\u4f1a\u9009\u62e9\u4f7f\u7528\u5b57\u7b26\u4e32\u51fd\u6570(\u6bd4\u5982 str.upper() \u548c str.lower() )\u5c06\u6587\u672c\u8f6c\u4e3a\u6807\u51c6\u683c\u5f0f\u3002 \u4f7f\u7528 str.replace() \u6216\u8005 re.sub() \u7684\u7b80\u5355\u66ff\u6362\u64cd\u4f5c\u80fd\u5220\u9664\u6216\u8005\u6539\u53d8\u6307\u5b9a\u7684\u5b57\u7b26\u5e8f\u5217\uff0c\u540c\u6837\u8fd8\u53ef\u4ee5\u4f7f\u7528 unicodedata.normalize() \u51fd\u6570\u5c06 unicode \u6587\u672c\u6807\u51c6\u5316\u3002 \u4f7f\u7528 str.translate() \u6279\u91cf\u5904\u7406\u3002 \u6e05\u7406\u4e00\u4e2a\u6700\u4e3b\u8981\u7684\u95ee\u9898\u5e94\u8be5\u662f\u8fd0\u884c\u7684\u6027\u80fd\u3002\u4e00\u822c\u6765\u8bb2\uff0c\u4ee3\u7801\u8d8a\u7b80\u5355\u8fd0\u884c\u8d8a\u5feb\u3002 \u5bf9\u4e8e\u7b80\u5355\u7684\u66ff\u6362\u64cd\u4f5c\uff0c str.replace() \u65b9\u6cd5\u901a\u5e38\u662f\u6700\u5feb\u7684\uff0c\u751a\u81f3\u9700\u8981\u591a\u6b21\u8c03\u7528\u7684\u65f6\u5019\u3002\u5982\u679c\u8981\u6267\u884c\u4efb\u4f55\u590d\u6742\u5b57\u7b26\u5bf9\u5b57\u7b26\u7684\u91cd\u65b0\u6620\u5c04\u6216\u8005\u5220\u9664\u64cd\u4f5c\u7684\u8bdd\uff0c translate() \u65b9\u6cd5\u4f1a\u975e\u5e38\u7684\u5feb\u3002 >>> s = 'p\u00fdt\u0125\u00f6\u00f1\\fis\\tawesome\\r\\n' >>> remap = { ... ord('\\t') : ' ', ... ord('\\f') : ' ', ... ord('\\r') : None # Deleted ... } >>> a = s.translate(remap) >>> a 'p\u00fdt\u0125\u00f6\u00f1 is awesome\\n' >>> >>> import unicodedata >>> import sys >>> cmb_chrs = dict.fromkeys(c for c in range(sys.maxunicode) ... if unicodedata.combining(chr(c))) ... >>> b = unicodedata.normalize('NFD', a) >>> b 'p\u00fdt\u0125\u00f6\u00f1 is awesome\\n' >>> b.translate(cmb_chrs) 'python is awesome\\n' >>>","title":"\u6e05\u7406"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_17","text":"\u51fd\u6570 format() \u53ef\u4ee5\u7528\u6765\u5f88\u5bb9\u6613\u7684\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u4f7f\u7528 < , > \u6216\u8005 ^ \u5b57\u7b26\u540e\u9762\u7d27\u8ddf\u4e00\u4e2a\u6307\u5b9a\u7684\u5bbd\u5ea6\u3002 >>> format(text, '>20') ' Hello World' >>> format(text, '<20') 'Hello World ' >>> format(text, '^20') ' Hello World ' >>> >>> format(text, '=>20s') '=========Hello World' >>> format(text, '*^20s') '****Hello World*****' >>> \u5176\u4ed6\u5bf9\u9f50\u65b9\u5f0f\uff1a \u7b26\u53f7 \u5bf9\u9f50\u65b9\u5f0f \u793a\u4f8b < \u5de6\u5bf9\u9f50 'Hello ' \uff08\u586b\u5145\u53f3\u8fb9\uff09 > \u53f3\u5bf9\u9f50 ' Hello' \uff08\u586b\u5145\u5de6\u8fb9\uff09 ^ \u5c45\u4e2d\u5bf9\u9f50 ' Hello ' \uff08\u586b\u5145\u4e24\u8fb9\uff09 = \u586b\u5145\u7b26\u53f7 + \u5bf9\u9f50 '====Hello' \uff08\u9700\u914d\u5408 > \uff09","title":"\u683c\u5f0f\u5316"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_18","text":"\u5982\u679c\u8981\u5408\u5e76\u7684\u5b57\u7b26\u4e32\u662f\u5728\u4e00\u4e2a\u5e8f\u5217\u6216\u8005 iterable \u4e2d\uff0c\u90a3\u4e48\u6700\u5feb\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528 join() \u65b9\u6cd5\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u52a0\u53f7(+)\u64cd\u4f5c\u7b26\u53bb\u8fde\u63a5\u5927\u91cf\u7684\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u662f\u975e\u5e38\u4f4e\u6548\u7387\u7684\uff0c \u56e0\u4e3a\u52a0\u53f7\u8fde\u63a5\u4f1a\u5f15\u8d77\u5185\u5b58\u590d\u5236\u4ee5\u53ca\u5783\u573e\u56de\u6536\u64cd\u4f5c\u3002 \u7279\u522b\u7684\uff0c\u4f60\u6c38\u8fdc\u90fd\u4e0d\u5e94\u50cf\u4e0b\u9762\u8fd9\u6837\u5199\u5b57\u7b26\u4e32\u8fde\u63a5\u4ee3\u7801\uff1a s = '' for p in parts: s += p \u540c\u6837\u8fd8\u5f97\u6ce8\u610f\u4e0d\u5fc5\u8981\u7684\u5b57\u7b26\u4e32\u8fde\u63a5\u64cd\u4f5c\u3002\u6709\u65f6\u5019\u7a0b\u5e8f\u5458\u5728\u6ca1\u6709\u5fc5\u8981\u505a\u8fde\u63a5\u64cd\u4f5c\u7684\u65f6\u5019\u4ecd\u7136\u591a\u6b64\u4e00\u4e3e\u3002\u6bd4\u5982\u5728\u6253\u5370\u7684\u65f6\u5019\uff1a print(a + ':' + b + ':' + c) # Ugly print(':'.join([a, b, c])) # Still ugly print(a, b, c, sep=':') # Better \u5f53\u6df7\u5408\u4f7f\u7528I/O\u64cd\u4f5c\u548c\u5b57\u7b26\u4e32\u8fde\u63a5\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6709\u65f6\u5019\u9700\u8981\u4ed4\u7ec6\u7814\u7a76\u3002 \u6bd4\u5982\uff0c\u8003\u8651\u4e0b\u9762\u7684\u4e24\u7aef\u4ee3\u7801\u7247\u6bb5\uff1a # Version 1 (string concatenation) f.write(chunk1 + chunk2) # Version 2 (separate I/O operations) f.write(chunk1) f.write(chunk2) \u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f88\u5c0f\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u7248\u672c\u6027\u80fd\u4f1a\u66f4\u597d\u4e9b\uff0c\u56e0\u4e3aI/O\u7cfb\u7edf\u8c03\u7528\u5929\u751f\u5c31\u6162\u3002 \u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f88\u5927\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u7248\u672c\u53ef\u80fd\u4f1a\u66f4\u52a0\u9ad8\u6548\uff0c \u56e0\u4e3a\u5b83\u907f\u514d\u4e86\u521b\u5efa\u4e00\u4e2a\u5f88\u5927\u7684\u4e34\u65f6\u7ed3\u679c\u5e76\u4e14\u8981\u590d\u5236\u5927\u91cf\u7684\u5185\u5b58\u5757\u6570\u636e\u3002","title":"\u62fc\u63a5"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_19","text":"Python\u5e76\u6ca1\u6709\u5bf9\u5728\u5b57\u7b26\u4e32\u4e2d\u7b80\u5355\u66ff\u6362\u53d8\u91cf\u503c\u63d0\u4f9b\u76f4\u63a5\u7684\u652f\u6301\u3002 \u4f46\u662f\u901a\u8fc7\u4f7f\u7528\u5b57\u7b26\u4e32\u7684 format() \u65b9\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6bd4\u5982\uff1a >>> s = '{name} has {n} messages.' >>> s.format(name='Guido', n=37) 'Guido has 37 messages.' >>> \u6216\u8005\uff0c\u5982\u679c\u8981\u88ab\u66ff\u6362\u7684\u53d8\u91cf\u80fd\u5728\u53d8\u91cf\u57df\u4e2d\u627e\u5230\uff0c \u90a3\u4e48\u4f60\u53ef\u4ee5\u7ed3\u5408\u4f7f\u7528 format_map() \u548c vars() \u3002\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a >>> name = 'Guido' >>> n = 37 >>> s.format_map(vars()) 'Guido has 37 messages.' >>> format() \u548c format_map() \u7684\u4e00\u4e2a\u7f3a\u9677\u5c31\u662f\u5b83\u4eec\u5e76\u4e0d\u80fd\u5f88\u597d\u7684\u5904\u7406\u53d8\u91cf\u7f3a\u5931\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\uff1a >>> s.format(name='Guido') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> KeyError: 'n' >>> class safesub(dict): \"\"\"\u9632\u6b62key\u627e\u4e0d\u5230\"\"\" def __missing__(self, key): return '{' + key + '}' >>> del n # Make sure n is undefined >>> s.format_map(safesub(vars())) 'Guido has {n} messages.' >>>","title":"\u63d2\u5165"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_20","text":"\u5982\u679c\u7a0b\u5e8f\u5305\u542b\u4e86\u5927\u91cf\u65e0\u6cd5\u76f4\u89c6\u7684\u786c\u7f16\u7801\u5207\u7247\uff0c\u53ef\u4ee5\u8fd9\u6837\u8fd9\u6837\u547d\u540d\u5207\u7247\uff1a ###### 0123456789012345678901234567890123456789012345678901234567890' record = '....................100 .......513.25 ..........' cost = int(record[20:23]) * float(record[31:37]) # \u547d\u540d\u5207\u7247 SHARES = slice(20, 23) PRICE = slice(31, 37) cost = int(record[SHARES]) * float(record[PRICE]) >>> a = slice(5, 50, 2) >>> a.start 5 >>> a.stop 50 >>> a.step 2 >>>","title":"\u547d\u540d\u5207\u7247"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_21","text":"# \u521b\u5efa\u5217\u8868 lst = [1, 2, 3, 4, 5] print(f\"\u521d\u59cb\u5217\u8868: {lst}\") # \u8f93\u51fa: \u521d\u59cb\u5217\u8868: [1, 2, 3, 4, 5] # \u8bbf\u95ee\u5143\u7d20 print(f\"\u7b2c\u4e00\u4e2a\u5143\u7d20: {lst[0]}\") # \u8f93\u51fa: \u7b2c\u4e00\u4e2a\u5143\u7d20: 1 print(f\"\u6700\u540e\u4e00\u4e2a\u5143\u7d20: {lst[-1]}\") # \u8f93\u51fa: \u6700\u540e\u4e00\u4e2a\u5143\u7d20: 5 print(f\"\u5207\u7247(1-3): {lst[1:3]}\") # \u8f93\u51fa: \u5207\u7247(1-3): [2, 3] # \u4fee\u6539\u5217\u8868 lst[0] = 10 print(f\"\u4fee\u6539\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e: {lst}\") # \u8f93\u51fa: \u4fee\u6539\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e: [10, 2, 3, 4, 5] # \u6dfb\u52a0\u5143\u7d20 lst.append(6) print(f\"\u8ffd\u52a0\u5143\u7d20\u540e: {lst}\") # \u8f93\u51fa: \u8ffd\u52a0\u5143\u7d20\u540e: [10, 2, 3, 4, 5, 6] lst.insert(1, 1.5) print(f\"\u63d2\u5165\u5143\u7d20\u540e: {lst}\") # \u8f93\u51fa: \u63d2\u5165\u5143\u7d20\u540e: [10, 1.5, 2, 3, 4, 5, 6] # \u5220\u9664\u5143\u7d20 del lst[0] print(f\"\u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e: {lst}\") # \u8f93\u51fa: \u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e: [1.5, 2, 3, 4, 5, 6] popped = lst.pop() print(f\"\u5f39\u51fa\u6700\u540e\u4e00\u4e2a\u5143\u7d20: {popped}, \u5269\u4f59\u5217\u8868: {lst}\") # \u8f93\u51fa: \u5f39\u51fa\u6700\u540e\u4e00\u4e2a\u5143\u7d20: 6, \u5269\u4f59\u5217\u8868: [1.5, 2, 3, 4, 5] lst.remove(3) print(f\"\u79fb\u9664\u5143\u7d203\u540e: {lst}\") # \u8f93\u51fa: \u79fb\u9664\u5143\u7d203\u540e: [1.5, 2, 4, 5] # \u5217\u8868\u64cd\u4f5c lst.extend([6, 7]) print(f\"\u6269\u5c55\u5217\u8868\u540e: {lst}\") # \u8f93\u51fa: \u6269\u5c55\u5217\u8868\u540e: [1.5, 2, 4, 5, 6, 7] lst.reverse() print(f\"\u53cd\u8f6c\u5217\u8868\u540e: {lst}\") # \u8f93\u51fa: \u53cd\u8f6c\u5217\u8868\u540e: [7, 6, 5, 4, 2, 1.5] lst.sort() print(f\"\u6392\u5e8f\u540e\u5217\u8868: {lst}\") # \u8f93\u51fa: \u6392\u5e8f\u540e\u5217\u8868: [1.5, 2, 4, 5, 6, 7] # \u5217\u8868\u63a8\u5bfc\u5f0f squares = [x**2 for x in lst] print(f\"\u5217\u8868\u63a8\u5bfc\u5f0f(\u5e73\u65b9): {squares}\") # \u8f93\u51fa: \u5217\u8868\u63a8\u5bfc\u5f0f(\u5e73\u65b9): [2.25, 4, 16, 25, 36, 49] # \u5176\u4ed6\u5e38\u7528\u65b9\u6cd5 print(f\"\u5217\u8868\u957f\u5ea6: {len(lst)}\") # \u8f93\u51fa: \u5217\u8868\u957f\u5ea6: 6 print(f\"\u5143\u7d205\u7684\u7d22\u5f15: {lst.index(5)}\") # \u8f93\u51fa: \u5143\u7d205\u7684\u7d22\u5f15: 3 print(f\"\u5143\u7d202\u51fa\u73b0\u6b21\u6570: {lst.count(2)}\") # \u8f93\u51fa: \u5143\u7d202\u51fa\u73b0\u6b21\u6570: 1","title":"\u5217\u8868\u7684\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_22","text":"# \u521b\u5efa\u5143\u7ec4 tup = (1, 2, 3, 4, 5) print(f\"\u521d\u59cb\u5143\u7ec4: {tup}\") # \u8f93\u51fa: \u521d\u59cb\u5143\u7ec4: (1, 2, 3, 4, 5) # \u8bbf\u95ee\u5143\u7d20 print(f\"\u7b2c\u4e00\u4e2a\u5143\u7d20: {tup[0]}\") # \u8f93\u51fa: \u7b2c\u4e00\u4e2a\u5143\u7d20: 1 print(f\"\u6700\u540e\u4e00\u4e2a\u5143\u7d20: {tup[-1]}\") # \u8f93\u51fa: \u6700\u540e\u4e00\u4e2a\u5143\u7d20: 5 print(f\"\u5207\u7247(1-3): {tup[1:3]}\") # \u8f93\u51fa: \u5207\u7247(1-3): (2, 3) # \u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4ee5\u4e0b\u64cd\u4f5c\u4f1a\u62a5\u9519 # tup[0] = 10 # TypeError: 'tuple' object does not support item assignment # \u5143\u7ec4\u64cd\u4f5c print(f\"\u5143\u7ec4\u957f\u5ea6: {len(tup)}\") # \u8f93\u51fa: \u5143\u7ec4\u957f\u5ea6: 5 print(f\"\u5143\u7d203\u7684\u7d22\u5f15: {tup.index(3)}\") # \u8f93\u51fa: \u5143\u7d203\u7684\u7d22\u5f15: 2 print(f\"\u5143\u7d202\u51fa\u73b0\u6b21\u6570: {tup.count(2)}\") # \u8f93\u51fa: \u5143\u7d202\u51fa\u73b0\u6b21\u6570: 1 # \u5143\u7ec4\u89e3\u5305 a, b, c, d, e = tup print(f\"\u89e3\u5305\u7ed3\u679c: a={a}, b={b}, c={c}\") # \u8f93\u51fa: \u89e3\u5305\u7ed3\u679c: a=1, b=2, c=3 # \u5143\u7ec4\u8fde\u63a5 new_tup = tup + (6, 7) print(f\"\u8fde\u63a5\u540e\u7684\u65b0\u5143\u7ec4: {new_tup}\") # \u8f93\u51fa: \u8fde\u63a5\u540e\u7684\u65b0\u5143\u7ec4: (1, 2, 3, 4, 5, 6, 7) # \u5143\u7ec4\u4e0e\u5217\u8868\u8f6c\u6362 lst_from_tup = list(tup) print(f\"\u5143\u7ec4\u8f6c\u5217\u8868: {lst_from_tup}\") # \u8f93\u51fa: \u5143\u7ec4\u8f6c\u5217\u8868: [1, 2, 3, 4, 5] tup_from_lst = tuple(lst) print(f\"\u5217\u8868\u8f6c\u5143\u7ec4: {tup_from_lst}\") # \u8f93\u51fa: \u5217\u8868\u8f6c\u5143\u7ec4: (1.5, 2, 4, 5, 6, 7)","title":"\u5143\u7ec4\u7684\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_23","text":"\u5217\u8868\u662f\u53ef\u53d8\u7684(mutable)\uff0c\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684(immutable) \u5217\u8868\u4f7f\u7528\u65b9\u62ec\u53f7[]\uff0c\u5143\u7ec4\u4f7f\u7528\u5706\u62ec\u53f7() \u5217\u8868\u6709\u66f4\u591a\u5185\u7f6e\u65b9\u6cd5(\u5982append, remove\u7b49) \u5143\u7ec4\u901a\u5e38\u7528\u4e8e\u5f02\u6784\u6570\u636e\uff0c\u5217\u8868\u7528\u4e8e\u540c\u6784\u6570\u636e \u5143\u7ec4\u53ef\u4ee5\u4f5c\u4e3a\u5b57\u5178\u7684\u952e\uff0c\u5217\u8868\u4e0d\u80fd","title":"\u5217\u8868\u548c\u5143\u7ec4\u7684\u533a\u522b"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_24","text":"\u4efb\u4f55\u7684\u5e8f\u5217\uff08\u6216\u8005\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u8d4b\u503c\u64cd\u4f5c\u6765\u5206\u89e3\u4e3a\u5355\u72ec\u7684\u53d8\u91cf\u3002 \u552f\u4e00\u7684\u8981\u6c42\u5c31\u662f\u53d8\u91cf\u7684\u603b\u6570\u548c\u7ed3\u6784\u5fc5\u987b\u4e0e\u5e8f\u5217\u76f8\u543b\u5408\u3002 >>> p = (4, 5) >>> x, y = p >>> x 4 >>> y 5 >>> >>> data = [ 'ACME', 50, 91.1, (2012, 12, 21) ] >>> name, shares, price, date = data >>> name 'ACME' >>> date (2012, 12, 21) >>> name, shares, price, (year, mon, day) = data >>> name 'ACME' >>> year 2012 >>> mon 12 >>> day 21 >>> >>> record = ('Dave', 'dave@example.com', '773-555-1212', '847-555-1212') >>> name, email, *phone_numbers = record >>> name 'Dave' >>> email 'dave@example.com' >>> phone_numbers ['773-555-1212', '847-555-1212'] >>>","title":"\u5c06\u5e8f\u5217\u5206\u89e3\u4e3a\u5355\u72ec\u7684\u53d8\u91cf"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_25","text":"\u5982\u679c\u5e8f\u5217\u4e0a\u7684\u503c\u90fd\u662f hashable \u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u5229\u7528\u96c6\u5408\u6216\u8005\u751f\u6210\u5668\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6bd4\u5982\uff1a def my_dedupe(items): seen = set() for item in items: if item not in seen: yield item seen.add(item) \u4f7f\u7528\u65b9\u6cd5\uff1a >>> a = [1, 5, 2, 1, 9, 1, 5, 10] >>> list(dedupe(a)) [1, 5, 2, 9, 10] >>> \u8fd9\u4e2a\u65b9\u6cd5\u4ec5\u4ec5\u5728\u5e8f\u5217\u4e2d\u5143\u7d20\u4e3a hashable \u7684\u65f6\u5019\u624d\u7ba1\u7528\u3002 \u5982\u679c\u4f60\u60f3\u6d88\u9664\u5143\u7d20\u4e0d\u53ef\u54c8\u5e0c\uff08\u6bd4\u5982 dict \u7c7b\u578b\uff09\u7684\u5e8f\u5217\u4e2d\u91cd\u590d\u5143\u7d20\u7684\u8bdd\uff0c\u9700\u8981\u5c06\u4e0a\u8ff0\u4ee3\u7801\u7a0d\u5fae\u6539\u53d8\u4e00\u4e0b\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a def my_dedupe(items, key=None): seen = set() for item in items: val = item if key is None else key(item) if val not in seen: yield item seen.add(val) \u4f7f\u7528\u65b9\u6cd5\uff1a >>> a = [ {'x':1, 'y':2}, {'x':1, 'y':3}, {'x':1, 'y':2}, {'x':2, 'y':4}] >>> list(dedupe(a, key=lambda d: (d['x'],d['y']))) [{'x': 1, 'y': 2}, {'x': 1, 'y': 3}, {'x': 2, 'y': 4}] >>> list(dedupe(a, key=lambda d: d['x'])) [{'x': 1, 'y': 2}, {'x': 2, 'y': 4}] >>>","title":"\u5220\u9664\u5e8f\u5217\u76f8\u540c\u5143\u7d20\u5e76\u4fdd\u6301\u987a\u5e8f"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_26","text":"\u6709\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u60f3\u5229\u7528\u4e00\u4e9b\u89c4\u5219\u4ece\u4e2d\u63d0\u53d6\u51fa\u9700\u8981\u7684\u503c\u6216\u8005\u662f\u7f29\u77ed\u5e8f\u5217 \u6700\u7b80\u5355\u7684\u8fc7\u6ee4\u5e8f\u5217\u5143\u7d20\u7684\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u3002\u6bd4\u5982\uff1a >>> mylist = [1, 4, -5, 10, -7, 2, 3, -1] >>> [n for n in mylist if n > 0] [1, 4, 10, 2, 3] >>> [n for n in mylist if n < 0] [-5, -7, -1] >>> \u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u7684\u4e00\u4e2a\u6f5c\u5728\u7f3a\u9677\u5c31\u662f\u5982\u679c\u8f93\u5165\u975e\u5e38\u5927\u7684\u65f6\u5019\u4f1a\u4ea7\u751f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u7ed3\u679c\u96c6\uff0c\u5360\u7528\u5927\u91cf\u5185\u5b58\u3002 \u5982\u679c\u4f60\u5bf9\u5185\u5b58\u6bd4\u8f83\u654f\u611f\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u8fed\u4ee3\u4ea7\u751f\u8fc7\u6ee4\u7684\u5143\u7d20\u3002\u6bd4\u5982\uff1a >>> pos = (n for n in mylist if n > 0) >>> pos <generator object <genexpr> at 0x1006a0eb0> >>> for x in pos: ... print(x) ... 1 4 10 2 3 >>> \u6709\u65f6\u5019\uff0c\u8fc7\u6ee4\u89c4\u5219\u6bd4\u8f83\u590d\u6742\uff0c\u4e0d\u80fd\u7b80\u5355\u7684\u5728\u5217\u8868\u63a8\u5bfc\u6216\u8005\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d\u8868\u8fbe\u51fa\u6765\u3002 \u6bd4\u5982\uff0c\u5047\u8bbe\u8fc7\u6ee4\u7684\u65f6\u5019\u9700\u8981\u5904\u7406\u4e00\u4e9b\u5f02\u5e38\u6216\u8005\u5176\u4ed6\u590d\u6742\u60c5\u51b5\u3002\u8fd9\u65f6\u5019\u4f60\u53ef\u4ee5\u5c06\u8fc7\u6ee4\u4ee3\u7801\u653e\u5230\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c \u7136\u540e\u4f7f\u7528\u5185\u5efa\u7684 filter() \u51fd\u6570\u3002\u793a\u4f8b\u5982\u4e0b\uff1a values = ['1', '2', '-3', '-', '4', 'N/A', '5'] def is_int(val): try: x = int(val) return True except ValueError: return False ivals = list(filter(is_int, values)) print(ivals) # Outputs ['1', '2', '-3', '4', '5'] itertools.compress() \u89c1\u5185\u7f6e\u6a21\u5757","title":"\u8fc7\u6ee4\u5e8f\u5217\u5143\u7d20"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_27","text":"\u5728\u6570\u636e\u5e8f\u5217\u4e0a\u6267\u884c\u805a\u96c6\u51fd\u6570\uff08\u6bd4\u5982 sum() , min() , max() \uff09\uff0c \u4f46\u662f\u9996\u5148\u9700\u8981\u5148\u8f6c\u6362\u6216\u8005\u8fc7\u6ee4\u6570\u636e\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e00\u4e2a\u975e\u5e38\u4f18\u96c5\u7684\u65b9\u5f0f\u53bb\u7ed3\u5408\u6570\u636e\u8ba1\u7b97\u4e0e\u8f6c\u6362\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53c2\u6570\u3002 nums = [1, 2, 3, 4, 5] s = sum(x * x for x in nums) \u6bd4 sum((x * x for x in nums)) \u4f18\u96c5\u3002","title":"\u8f6c\u6362\u5e76\u540c\u65f6\u8ba1\u7b97\u6570\u636e"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_28","text":"\u5982\u679c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u4e2a\u6570\u8d85\u8fc7\u53d8\u91cf\u4e2a\u6570\u65f6\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a ValueError \u3002Python \u7684\u661f\u53f7\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 >>> record = ('Dave', 'dave@example.com', '773-555-1212', '847-555-1212') >>> name, email, *phone_numbers = record >>> name 'Dave' >>> email 'dave@example.com' >>> phone_numbers ['773-555-1212', '847-555-1212'] >>> \u661f\u53f7\u8868\u8fbe\u5f0f\u5728\u8fed\u4ee3\u5143\u7d20\u4e3a\u53ef\u53d8\u957f\u5143\u7ec4\u7684\u5e8f\u5217\u65f6\u662f\u5f88\u6709\u7528\u7684\u3002 records = [ ('foo', 1, 2), ('bar', 'hello'), ('foo', 3, 4), ] def do_foo(x, y): print('foo', x, y) def do_bar(s): print('bar', s) for tag, *args in records: if tag == 'foo': do_foo(*args) elif tag == 'bar': do_bar(*args)","title":"\u89e3\u538b\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8d4b\u503c\u7ed9\u591a\u4e2a\u53d8\u91cf"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_29","text":"","title":"\u96c6\u5408\u7684\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_30","text":"# \u521b\u5efa\u96c6\u5408 s1 = {1, 2, 3, 4, 5} s2 = {4, 5, 6, 7, 8} print(f\"\u96c6\u5408s1: {s1}\") # \u8f93\u51fa: \u96c6\u5408s1: {1, 2, 3, 4, 5} print(f\"\u96c6\u5408s2: {s2}\") # \u8f93\u51fa: \u96c6\u5408s2: {4, 5, 6, 7, 8} # \u6dfb\u52a0\u5143\u7d20 s1.add(6) print(f\"\u6dfb\u52a0\u5143\u7d206\u540es1: {s1}\") # \u8f93\u51fa: \u6dfb\u52a0\u5143\u7d206\u540es1: {1, 2, 3, 4, 5, 6} # \u5220\u9664\u5143\u7d20 s1.remove(6) # \u5982\u679c\u5143\u7d20\u4e0d\u5b58\u5728\u4f1a\u62a5KeyError print(f\"\u5220\u9664\u5143\u7d206\u540es1: {s1}\") # \u8f93\u51fa: \u5220\u9664\u5143\u7d206\u540es1: {1, 2, 3, 4, 5} s1.discard(10) # \u5b89\u5168\u5220\u9664\uff0c\u5143\u7d20\u4e0d\u5b58\u5728\u4e0d\u4f1a\u62a5\u9519 print(f\"\u5c1d\u8bd5\u5220\u9664\u4e0d\u5b58\u5728\u7684\u5143\u7d2010\u540es1: {s1}\") # \u8f93\u51fa: \u5c1d\u8bd5\u5220\u9664\u4e0d\u5b58\u5728\u7684\u5143\u7d2010\u540es1: {1, 2, 3, 4, 5} popped = s1.pop() # \u968f\u673a\u5220\u9664\u5e76\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20 print(f\"\u5f39\u51fa\u5143\u7d20: {popped}, \u5269\u4f59\u96c6\u5408: {s1}\") # \u8f93\u51fa\u793a\u4f8b: \u5f39\u51fa\u5143\u7d20: 1, \u5269\u4f59\u96c6\u5408: {2, 3, 4, 5} # \u6e05\u7a7a\u96c6\u5408 s1.clear() print(f\"\u6e05\u7a7a\u540e\u7684s1: {s1}\") # \u8f93\u51fa: \u6e05\u7a7a\u540e\u7684s1: set()","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_31","text":"s1 = {1, 2, 3, 4, 5} s2 = {4, 5, 6, 7, 8} # \u5e76\u96c6 print(f\"\u5e76\u96c6(s1 | s2): {s1 | s2}\") # \u8f93\u51fa: \u5e76\u96c6(s1 | s2): {1, 2, 3, 4, 5, 6, 7, 8} print(f\"\u5e76\u96c6(s1.union(s2)): {s1.union(s2)}\") # \u540c\u4e0a # \u4ea4\u96c6 print(f\"\u4ea4\u96c6(s1 & s2): {s1 & s2}\") # \u8f93\u51fa: \u4ea4\u96c6(s1 & s2): {4, 5} print(f\"\u4ea4\u96c6(s1.intersection(s2)): {s1.intersection(s2)}\") # \u540c\u4e0a # \u5dee\u96c6 print(f\"\u5dee\u96c6(s1 - s2): {s1 - s2}\") # \u8f93\u51fa: \u5dee\u96c6(s1 - s2): {1, 2, 3} print(f\"\u5dee\u96c6(s1.difference(s2)): {s1.difference(s2)}\") # \u540c\u4e0a # \u5bf9\u79f0\u5dee\u96c6(\u4ec5\u5728\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\u4e2d\u5b58\u5728\u7684\u5143\u7d20) print(f\"\u5bf9\u79f0\u5dee\u96c6(s1 ^ s2): {s1 ^ s2}\") # \u8f93\u51fa: \u5bf9\u79f0\u5dee\u96c6(s1 ^ s2): {1, 2, 3, 6, 7, 8} print(f\"\u5bf9\u79f0\u5dee\u96c6(s1.symmetric_difference(s2)): {s1.symmetric_difference(s2)}\") # \u540c\u4e0a","title":"\u8fd0\u7b97\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_32","text":"a = {1, 2, 3} b = {1, 2, 3, 4, 5} # \u5b50\u96c6\u5224\u65ad print(f\"a\u662f\u5426\u662fb\u7684\u5b50\u96c6: {a.issubset(b)}\") # \u8f93\u51fa: a\u662f\u5426\u662fb\u7684\u5b50\u96c6: True print(f\"a <= b: {a <= b}\") # \u8f93\u51fa: a <= b: True # \u771f\u5b50\u96c6\u5224\u65ad print(f\"a\u662f\u5426\u662fb\u7684\u771f\u5b50\u96c6: {a < b}\") # \u8f93\u51fa: a\u662f\u5426\u662fb\u7684\u771f\u5b50\u96c6: True # \u8d85\u96c6\u5224\u65ad print(f\"b\u662f\u5426\u662fa\u7684\u8d85\u96c6: {b.issuperset(a)}\") # \u8f93\u51fa: b\u662f\u5426\u662fa\u7684\u8d85\u96c6: True print(f\"b >= a: {b >= a}\") # \u8f93\u51fa: b >= a: True # \u771f\u8d85\u96c6\u5224\u65ad print(f\"b\u662f\u5426\u662fa\u7684\u771f\u8d85\u96c6: {b > a}\") # \u8f93\u51fa: b\u662f\u5426\u662fa\u7684\u771f\u8d85\u96c6: True # \u4e0d\u76f8\u4ea4\u5224\u65ad print(f\"a\u548c{6,7,8}\u662f\u5426\u4e0d\u76f8\u4ea4: {a.isdisjoint({6,7,8})}\") # \u8f93\u51fa: a\u548c{6,7,8}\u662f\u5426\u4e0d\u76f8\u4ea4: True","title":"\u5173\u7cfb\u5224\u65ad"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_33","text":"# \u96c6\u5408\u957f\u5ea6 print(f\"s1\u7684\u957f\u5ea6: {len(s1)}\") # \u8f93\u51fa: s1\u7684\u957f\u5ea6: 5 # \u68c0\u67e5\u5143\u7d20\u662f\u5426\u5b58\u5728 print(f\"3\u662f\u5426\u5728s1\u4e2d: {3 in s1}\") # \u8f93\u51fa: 3\u662f\u5426\u5728s1\u4e2d: True # \u96c6\u5408\u63a8\u5bfc\u5f0f squared = {x**2 for x in s1} print(f\"\u96c6\u5408\u63a8\u5bfc\u5f0f(\u5e73\u65b9): {squared}\") # \u8f93\u51fa\u793a\u4f8b: \u96c6\u5408\u63a8\u5bfc\u5f0f(\u5e73\u65b9): {16, 1, 4, 9, 25} # \u51bb\u7ed3\u96c6\u5408(\u4e0d\u53ef\u53d8\u96c6\u5408) fs = frozenset([1, 2, 3]) print(f\"\u51bb\u7ed3\u96c6\u5408: {fs}\") # \u8f93\u51fa: \u51bb\u7ed3\u96c6\u5408: frozenset({1, 2, 3}) # fs.add(4) # \u62a5\u9519: AttributeError: 'frozenset' object has no attribute 'add'","title":"\u5176\u4ed6\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_34","text":"# \u5217\u8868/\u5143\u7ec4\u8f6c\u96c6\u5408(\u81ea\u52a8\u53bb\u91cd) lst = [1, 2, 2, 3, 3, 3] s = set(lst) print(f\"\u5217\u8868\u8f6c\u96c6\u5408(\u81ea\u52a8\u53bb\u91cd): {s}\") # \u8f93\u51fa: \u5217\u8868\u8f6c\u96c6\u5408(\u81ea\u52a8\u53bb\u91cd): {1, 2, 3} # \u96c6\u5408\u8f6c\u5217\u8868/\u5143\u7ec4 lst_from_set = list(s) tup_from_set = tuple(s) print(f\"\u96c6\u5408\u8f6c\u5217\u8868: {lst_from_set}\") # \u8f93\u51fa\u793a\u4f8b: \u96c6\u5408\u8f6c\u5217\u8868: [1, 2, 3] print(f\"\u96c6\u5408\u8f6c\u5143\u7ec4: {tup_from_set}\") # \u8f93\u51fa\u793a\u4f8b: \u96c6\u5408\u8f6c\u5143\u7ec4: (1, 2, 3)","title":"\u96c6\u5408\u4e0e\u5217\u8868/\u5143\u7ec4\u8f6c\u6362"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_35","text":"","title":"\u5b57\u5178\u7684\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_36","text":"# \u521b\u5efa\u5b57\u5178 d1 = {'name': 'Alice', 'age': 25, 'city': 'New York'} d2 = dict(name='Bob', age=30, city='London') print(f\"\u5b57\u5178d1: {d1}\") # \u8f93\u51fa: \u5b57\u5178d1: {'name': 'Alice', 'age': 25, 'city': 'New York'} print(f\"\u5b57\u5178d2: {d2}\") # \u8f93\u51fa: \u5b57\u5178d2: {'name': 'Bob', 'age': 30, 'city': 'London'} # \u8bbf\u95ee\u5143\u7d20 print(f\"\u83b7\u53d6name: {d1['name']}\") # \u8f93\u51fa: \u83b7\u53d6name: Alice print(f\"get\u65b9\u6cd5\u83b7\u53d6age: {d1.get('age')}\") # \u8f93\u51fa: get\u65b9\u6cd5\u83b7\u53d6age: 25 print(f\"\u83b7\u53d6\u4e0d\u5b58\u5728\u7684key: {d1.get('country', 'USA')}\") # \u8f93\u51fa: \u83b7\u53d6\u4e0d\u5b58\u5728\u7684key: USA # \u4fee\u6539\u5143\u7d20 d1['age'] = 26 print(f\"\u4fee\u6539age\u540e: {d1}\") # \u8f93\u51fa: \u4fee\u6539age\u540e: {'name': 'Alice', 'age': 26, 'city': 'New York'} # \u6dfb\u52a0\u5143\u7d20 d1['gender'] = 'Female' print(f\"\u6dfb\u52a0gender\u540e: {d1}\") # \u8f93\u51fa: \u6dfb\u52a0gender\u540e: {'name': 'Alice', 'age': 26, 'city': 'New York', 'gender': 'Female'} # \u5220\u9664\u5143\u7d20 del d1['gender'] print(f\"\u5220\u9664gender\u540e: {d1}\") # \u8f93\u51fa: \u5220\u9664gender\u540e: {'name': 'Alice', 'age': 26, 'city': 'New York'} popped = d1.pop('age') print(f\"\u5f39\u51faage: {popped}, \u5269\u4f59\u5b57\u5178: {d1}\") # \u8f93\u51fa: \u5f39\u51faage: 26, \u5269\u4f59\u5b57\u5178: {'name': 'Alice', 'city': 'New York'} # \u6e05\u7a7a\u5b57\u5178 d1.clear() print(f\"\u6e05\u7a7a\u540e\u7684d1: {d1}\") # \u8f93\u51fa: \u6e05\u7a7a\u540e\u7684d1: {}","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_37","text":"d3 = {'name': 'Charlie', 'age': 35, 'city': 'Paris'} # \u904d\u5386\u952e for key in d3.keys(): print(key, end=\" \") # \u8f93\u51fa: name age city print() # \u904d\u5386\u503c for value in d3.values(): print(value, end=\" \") # \u8f93\u51fa: Charlie 35 Paris print() # \u904d\u5386\u952e\u503c\u5bf9 for key, value in d3.items(): print(f\"{key}:{value}\", end=\" \") # \u8f93\u51fa: name:Charlie age:35 city:Paris print()","title":"\u904d\u5386\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_38","text":"numbers = [1, 2, 3, 4, 5] squared_dict = {x: x**2 for x in numbers} print(f\"\u5b57\u5178\u63a8\u5bfc\u5f0f(\u5e73\u65b9): {squared_dict}\") # \u8f93\u51fa: \u5b57\u5178\u63a8\u5bfc\u5f0f(\u5e73\u65b9): {1: 1, 2: 4, 3: 9, 4: 16, 5: 25} # \u6761\u4ef6\u5b57\u5178\u63a8\u5bfc\u5f0f even_squared = {x: x**2 for x in numbers if x % 2 == 0} print(f\"\u5076\u6570\u5e73\u65b9\u5b57\u5178: {even_squared}\") # \u8f93\u51fa: \u5076\u6570\u5e73\u65b9\u5b57\u5178: {2: 4, 4: 16} \u6784\u9020\u4e00\u4e2a\u5b57\u5178\uff0c\u5b83\u662f\u53e6\u5916\u4e00\u4e2a\u5b57\u5178\u7684\u5b50\u96c6\u3002 prices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75 } # Make a dictionary of all prices over 200 p1 = {key: value for key, value in prices.items() if value > 200} # Make a dictionary of tech stocks tech_names = {'AAPL', 'IBM', 'HPQ', 'MSFT'} p2 = {key: value for key, value in prices.items() if key in tech_names} \u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5b57\u5178\u63a8\u5bfc\u80fd\u505a\u5230\u7684\uff0c\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u5143\u7ec4\u5e8f\u5217\u7136\u540e\u628a\u5b83\u4f20\u7ed9 dict() \u51fd\u6570\u4e5f\u80fd\u5b9e\u73b0\u3002\u6bd4\u5982\uff1a p1 = dict((key, value) for key, value in prices.items() if value > 200) \u4f46\u662f\uff0c\u5b57\u5178\u63a8\u5bfc\u65b9\u5f0f\u8868\u610f\u66f4\u6e05\u6670\uff0c\u5e76\u4e14\u5b9e\u9645\u4e0a\u4e5f\u4f1a\u8fd0\u884c\u7684\u66f4\u5feb\u4e9b \uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b9e\u9645\u6d4b\u8bd5\u51e0\u4e4e\u6bd4 dict() \u51fd\u6570\u65b9\u5f0f\u5feb\u6574\u6574\u4e00\u500d\uff09\u3002","title":"\u63a8\u5bfc\u5f0f"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_39","text":"d4 = {'a': 1, 'b': 2} d5 = {'b': 3, 'c': 4} # \u5408\u5e76\u5b57\u5178(Python 3.9+) merged = d4 | d5 print(f\"\u5408\u5e76\u540e\u7684\u5b57\u5178: {merged}\") # \u8f93\u51fa: \u5408\u5e76\u540e\u7684\u5b57\u5178: {'a': 1, 'b': 3, 'c': 4} # \u66f4\u65b0\u5b57\u5178 d4.update(d5) print(f\"\u66f4\u65b0\u540e\u7684d4: {d4}\") # \u8f93\u51fa: \u66f4\u65b0\u540e\u7684d4: {'a': 1, 'b': 3, 'c': 4} collections \u4e2d\u7684 ChainMap \u7c7b\u4e5f\u80fd\u5408\u5e76\u5b57\u5178\uff0c\u89c1\u5185\u7f6e\u5e93\u3002","title":"\u5408\u5e76\u4e0e\u66f4\u65b0"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_40","text":"d6 = {'apple': 3, 'banana': 5, 'orange': 2} # \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728 print(f\"'apple'\u662f\u5426\u5728\u5b57\u5178\u4e2d: {'apple' in d6}\") # \u8f93\u51fa: 'apple'\u662f\u5426\u5728\u5b57\u5178\u4e2d: True # \u5b57\u5178\u957f\u5ea6 print(f\"\u5b57\u5178\u957f\u5ea6: {len(d6)}\") # \u8f93\u51fa: \u5b57\u5178\u957f\u5ea6: 3 # \u8bbe\u7f6e\u9ed8\u8ba4\u503c count = d6.setdefault('pear', 0) print(f\"pear\u7684\u8ba1\u6570: {count}, \u5b57\u5178: {d6}\") # \u8f93\u51fa: pear\u7684\u8ba1\u6570: 0, \u5b57\u5178: {'apple': 3, 'banana': 5, 'orange': 2, 'pear': 0} # \u83b7\u53d6\u6240\u6709\u952e/\u503c/\u952e\u503c\u5bf9 print(f\"\u6240\u6709\u952e: {d6.keys()}\") # \u8f93\u51fa: \u6240\u6709\u952e: dict_keys(['apple', 'banana', 'orange', 'pear']) print(f\"\u6240\u6709\u503c: {d6.values()}\") # \u8f93\u51fa: \u6240\u6709\u503c: dict_values([3, 5, 2, 0]) print(f\"\u6240\u6709\u952e\u503c\u5bf9: {d6.items()}\") # \u8f93\u51fa: \u6240\u6709\u952e\u503c\u5bf9: dict_items([('apple', 3), ('banana', 5), ('orange', 2), ('pear', 0)])","title":"\u5176\u4ed6\u64cd\u4f5c"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_41","text":"# \u5b57\u5178\u8f6c\u5217\u8868(\u952e/\u503c/\u952e\u503c\u5bf9) keys_list = list(d6.keys()) values_list = list(d6.values()) items_list = list(d6.items()) print(f\"\u952e\u5217\u8868: {keys_list}\") # \u8f93\u51fa: \u952e\u5217\u8868: ['apple', 'banana', 'orange', 'pear'] print(f\"\u503c\u5217\u8868: {values_list}\") # \u8f93\u51fa: \u503c\u5217\u8868: [3, 5, 2, 0] print(f\"\u952e\u503c\u5bf9\u5217\u8868: {items_list}\") # \u8f93\u51fa: \u952e\u503c\u5bf9\u5217\u8868: [('apple', 3), ('banana', 5), ('orange', 2), ('pear', 0)] # \u5217\u8868\u8f6c\u5b57\u5178(\u9700\u8981\u7279\u5b9a\u683c\u5f0f) pairs = [('a', 1), ('b', 2), ('c', 3)] dict_from_list = dict(pairs) print(f\"\u5217\u8868\u8f6c\u5b57\u5178: {dict_from_list}\") # \u8f93\u51fa: \u5217\u8868\u8f6c\u5b57\u5178: {'a': 1, 'b': 2, 'c': 3}","title":"\u5b57\u5178\u4e0e\u5217\u8868\u8f6c\u6362"},{"location":"03_python/01_python%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/#_42","text":"scores = {'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95} # \u6309\u952e\u6392\u5e8f sorted_by_key = dict(sorted(scores.items())) print(f\"\u6309\u952e\u6392\u5e8f: {sorted_by_key}\") # \u8f93\u51fa: \u6309\u952e\u6392\u5e8f: {'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95} # \u6309\u503c\u6392\u5e8f(\u964d\u5e8f) sorted_by_value = dict(sorted(scores.items(), key=lambda item: item[1], reverse=True)) print(f\"\u6309\u503c\u6392\u5e8f(\u964d\u5e8f): {sorted_by_value}\") # \u8f93\u51fa: \u6309\u503c\u6392\u5e8f(\u964d\u5e8f): {'David': 95, 'Bob': 92, 'Alice': 85, 'Charlie': 78} # \u6700\u5c0f\u503c/\u6700\u5927\u503c min_price = min(zip(scores.values(), scores.keys())) # \u8f93\u51fa: (78, 'Charlie') max_price = max(zip(scores.values(), scores.keys())) # \u8f93\u51fa: (95, 'David') \u9700\u8981\u6ce8\u610f\u7684\u662f zip() \u51fd\u6570\u521b\u5efa\u7684\u662f\u4e00\u4e2a\u53ea\u80fd\u8bbf\u95ee\u4e00\u6b21\u7684\u8fed\u4ee3\u5668\u3002 scores_and_names = zip(scores.values(), scores.keys()) print(min(scores_and_names)) # OK print(max(scores_and_names)) # ValueError: max() arg is an empty sequence","title":"\u5b57\u5178\u6392\u5e8f"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/","text":"\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u3001\u8fed\u4ee3\u5668\u3001\u751f\u6210\u5668 \u6982\u5ff5\u548c\u5173\u7cfb \u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08Iterable\uff09 \u5b9a\u4e49 \uff1a\u5b9e\u73b0\u4e86 __iter__() \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u53ef\u4ee5\u88ab iter() \u51fd\u6570\u4f5c\u7528\u7684\u5bf9\u8c61\u3002 \u7279\u70b9 \uff1a \u53ef\u4ee5\u7528 for x in obj: \u6765\u904d\u5386\u3002 \u8c03\u7528 iter(obj) \u4f1a\u8fd4\u56de\u4e00\u4e2a \u8fed\u4ee3\u5668\uff08iterator\uff09 \u3002 \u5e38\u89c1\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61 \uff1a list, tuple, str, dict, set, range, file, \u7b49\u7b49 \u793a\u4f8b \uff1a lst = [1, 2, 3] it = iter(lst) # \u5f97\u5230\u4e00\u4e2a\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\uff08Iterator\uff09 \u5b9a\u4e49 \uff1a\u5b9e\u73b0\u4e86 __iter__() \u548c __next__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 \u7279\u70b9 \uff1a __iter__() \u8fd4\u56de\u81ea\u8eab\uff08 return self \uff09\u3002 __next__() \u6bcf\u6b21\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u629b\u51fa StopIteration \u5f02\u5e38\u3002 \u53ea\u80fd\u5f80\u524d\u8d70\uff0c\u4e0d\u80fd\u56de\u5934\uff08\u4e00\u6b21\u6027\u6d88\u8d39\uff09\u3002 \u793a\u4f8b \uff1a lst = [1, 2, 3] it = iter(lst) # it \u662f\u4e00\u4e2a\u8fed\u4ee3\u5668 print(next(it)) # \u8f93\u51fa 1 print(next(it)) # \u8f93\u51fa 2 \u751f\u6210\u5668\uff08Generator\uff09 \u751f\u6210\u5668\u662f \u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u5668 \uff0c\u6709\u4e24\u79cd\u521b\u5efa\u65b9\u5f0f\uff1a \u751f\u6210\u5668\u51fd\u6570\uff08\u4f7f\u7528 yield \uff09 def my_gen(): yield 1 yield 2 yield 3 g = my_gen() # g \u662f\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u4e5f\u5c31\u662f\u8fed\u4ee3\u5668 \u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff08generator expression\uff09 g = (x * x for x in range(3)) # g \u662f\u4e00\u4e2a\u751f\u6210\u5668 \u7279\u70b9 \uff1a \u7701\u5185\u5b58\uff0c\u61d2\u52a0\u8f7d\u3002 \u9047\u5230 yield \u6682\u505c\u6267\u884c\uff0c\u4e0b\u4e00\u6b21 next() \u4ece\u6682\u505c\u70b9\u7ee7\u7eed\u3002 \u56fe\u89e3 +-----------------------+ | Iterable | \u2190 \u53ef\u4ee5\u7528 for \u5faa\u73af\u904d\u5386\u5b83 | (__iter__ method) | +-----------------------+ | | iter() \u2193 +-----------------------+ | Iterator | \u2190 \u53ef\u4ee5\u624b\u52a8\u8c03\u7528 next() | (__iter__, __next__) | +-----------------------+ ^ | +---------------------------+ | Generator | \u2190 \u7279\u6b8a\u7684 Iterator\uff08\u81ea\u52a8\u5b9e\u73b0\u4e86\uff09 | (\u4f7f\u7528 yield \u521b\u5efa\u7684) | +---------------------------+ \u4f7f\u7528\u751f\u6210\u5668\u521b\u5efa\u65b0\u7684\u8fed\u4ee3\u6a21\u5f0f def frange(start, stop, increment): x = start while x < stop: yield x x += increment \u4e3a\u4e86\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c \u53ef\u4ee5\u7528for\u5faa\u73af\u8fed\u4ee3\u5b83\u6216\u8005\u4f7f\u7528\u5176\u4ed6\u63a5\u53d7\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u51fd\u6570(\u6bd4\u5982 sum() , list() \u7b49)\u3002\u793a\u4f8b\u5982\u4e0b\uff1a >>> for n in frange(0, 4, 0.5): ... print(n) ... 0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 >>> list(frange(0, 1, 0.125)) [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875] >>> \u4e00\u4e2a\u51fd\u6570\u4e2d\u9700\u8981\u6709\u4e00\u4e2a yield \u8bed\u53e5\u5373\u53ef\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u751f\u6210\u5668\u3002 \u8ddf\u666e\u901a\u51fd\u6570\u4e0d\u540c\u7684\u662f\uff0c\u751f\u6210\u5668\u53ea\u80fd\u7528\u4e8e\u8fed\u4ee3\u64cd\u4f5c\u3002 \u5728\u5bf9\u8c61\u4e0a\u5b9e\u73b0\u8fed\u4ee3 \u5728\u4e00\u4e2a\u5bf9\u8c61\u4e0a\u5b9e\u73b0\u8fed\u4ee3\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\u3002 class Node: def __init__(self, value): self._value = value self._children = [] def __repr__(self): return 'Node({!r})'.format(self._value) def add_child(self, node): self._children.append(node) def __iter__(self): return iter(self._children) def depth_first(self): yield self for c in self: yield from c.depth_first() # Example if __name__ == '__main__': root = Node(0) child1 = Node(1) child2 = Node(2) root.add_child(child1) root.add_child(child2) child1.add_child(Node(3)) child1.add_child(Node(4)) child2.add_child(Node(5)) for ch in root.depth_first(): print(ch) # Outputs Node(0), Node(1), Node(3), Node(4), Node(2), Node(5) \u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c __iter__() \u65b9\u6cd5\u53ea\u662f\u7b80\u5355\u7684\u5c06\u8fed\u4ee3\u8bf7\u6c42\u4f20\u9012\u7ed9\u5185\u90e8\u7684 _children \u5c5e\u6027\u3002 Python\u7684\u8fed\u4ee3\u5668\u534f\u8bae\u9700\u8981 __iter__() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b9e\u73b0\u4e86 __next__() \u65b9\u6cd5\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 \u8fd9\u91cc\u7684 iter() \u51fd\u6570\u7684\u4f7f\u7528\u7b80\u5316\u4e86\u4ee3\u7801\uff0c iter(s) \u53ea\u662f\u7b80\u5355\u7684\u901a\u8fc7\u8c03\u7528 s.__iter__() \u65b9\u6cd5\u6765\u8fd4\u56de\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c \u5c31\u8ddf len(s) \u4f1a\u8c03\u7528 s.__len__() \u539f\u7406\u662f\u4e00\u6837\u7684\u3002 depth_first() \u65b9\u6cd5\u7b80\u5355\u76f4\u89c2\u3002 \u5b83\u9996\u5148\u8fd4\u56de\u81ea\u5df1\u672c\u8eab\u5e76\u8fed\u4ee3\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u5e76 \u901a\u8fc7\u8c03\u7528\u5b50\u8282\u70b9\u7684 depth_first() \u65b9\u6cd5(\u4f7f\u7528 yield from \u8bed\u53e5)\u8fd4\u56de\u5bf9\u5e94\u5143\u7d20\u3002 \u53cd\u5411\u8fed\u4ee3 \u901a\u8fc7\u5728\u81ea\u5b9a\u4e49\u7c7b\u4e0a\u5b9e\u73b0 __reversed__() \u65b9\u6cd5\u6765\u5b9e\u73b0\u53cd\u5411\u8fed\u4ee3\u3002\u6bd4\u5982\uff1a class Countdown: def __init__(self, start): self.start = start # Forward iterator def __iter__(self): n = self.start while n > 0: yield n n -= 1 # Reverse iterator def __reversed__(self): n = 1 while n <= self.start: yield n n += 1 for rr in reversed(Countdown(30)): print(rr) for rr in Countdown(30): print(rr) \u5e26\u6709\u5916\u90e8\u72b6\u6001\u7684\u751f\u6210\u5668\u51fd\u6570 \u5982\u679c\u8981\u751f\u6210\u5668\u66b4\u9732\u5916\u90e8\u72b6\u6001\u7ed9\u7528\u6237\uff0c \u53ef\u4ee5\u7b80\u5355\u7684\u5c06\u5b83\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u7c7b\uff0c\u7136\u540e\u628a\u751f\u6210\u5668\u51fd\u6570\u653e\u5230 __iter__() \u65b9\u6cd5\u4e2d\u8fc7\u53bb\u3002\u6bd4\u5982\uff1a from collections import deque class linehistory: def __init__(self, lines, histlen=3): self.lines = lines self.history = deque(maxlen=histlen) def __iter__(self): for lineno, line in enumerate(self.lines, 1): self.history.append((lineno, line)) yield line def clear(self): self.history.clear() with open('somefile.txt') as f: lines = linehistory(f) for line in lines: if 'python' in line: for lineno, hline in lines.history: print('{}:{}'.format(lineno, hline), end='') \u5728 __iter__() \u65b9\u6cd5\u4e2d\u5b9a\u4e49\u751f\u6210\u5668\u4e0d\u4f1a\u6539\u53d8\u4efb\u4f55\u7684\u7b97\u6cd5\u903b\u8f91\u3002 \u7531\u4e8e\u5b83\u662f\u7c7b\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u5141\u8bb8\u5b9a\u4e49\u5404\u79cd\u5c5e\u6027\u548c\u65b9\u6cd5\u6765\u4f9b\u7528\u6237\u4f7f\u7528\u3002 \u8fed\u4ee3\u5668\u5207\u7247 \u51fd\u6570 itertools.islice() \u6b63\u597d\u9002\u7528\u4e8e\u5728\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668\u4e0a\u505a\u5207\u7247\u64cd\u4f5c\u3002\u6bd4\u5982\uff1a >>> def count(n): ... while True: ... yield n ... n += 1 ... >>> c = count(0) >>> c[10:20] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'generator' object is not subscriptable >>> # Now using islice() >>> import itertools >>> for x in itertools.islice(c, 10, 20): ... print(x) ... 10 11 12 13 14 15 16 17 18 19 >>> \u8981\u7740\u91cd\u5f3a\u8c03\u7684\u4e00\u70b9\u662f islice() \u4f1a\u6d88\u8017\u6389\u4f20\u5165\u7684\u8fed\u4ee3\u5668\u4e2d\u7684\u6570\u636e\uff0c\u5fc5\u987b\u8003\u8651\u5230\u8fed\u4ee3\u5668\u662f\u4e0d\u53ef\u9006\u7684\u8fd9\u4e2a\u4e8b\u5b9e\uff0c\u6240\u4ee5\u5982\u679c\u9700\u8981\u4e4b\u540e\u518d\u6b21\u8bbf\u95ee\u8fd9\u4e2a\u8fed\u4ee3\u5668\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u5f97\u5148\u5c06\u5b83\u91cc\u9762\u7684\u6570\u636e\u653e\u5165\u4e00\u4e2a\u5217\u8868\u4e2d\u3002 \u8df3\u8fc7\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5f00\u59cb\u90e8\u5206 itertools.dropwhile() \u51fd\u6570\u4f7f\u7528\u65f6\uff0c\u4f20\u9012\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u548c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u4e22\u5f03\u539f\u6709\u5e8f\u5217\u4e2d\u76f4\u5230\u51fd\u6570\u8fd4\u56deFlase\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\uff0c\u7136\u540e\u8fd4\u56de\u540e\u9762\u6240\u6709\u5143\u7d20\u3002 >>> with open('/etc/passwd') as f: ... for line in f: ... print(line, end='') ... ## # User Database # # Note that this file is consulted directly only when the system is running # in single-user mode. At other times, this information is provided by # Open Directory. ... ## nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false root:*:0:0:System Administrator:/var/root:/bin/sh ... >>> >>> from itertools import dropwhile >>> with open('/etc/passwd') as f: ... for line in dropwhile(lambda line: not line.startswith('#'), f): ... print(line, end='') ... nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false root:*:0:0:System Administrator:/var/root:/bin/sh ... >>> \u5982\u679c\u5df2\u7ecf\u660e\u786e\u77e5\u9053\u4e86\u8981\u8df3\u8fc7\u7684\u5143\u7d20\u7684\u5e8f\u53f7\u7684\u8bdd\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 itertools.islice() \u6765\u4ee3\u66ff\u3002\u6bd4\u5982\uff1a >>> from itertools import islice >>> items = ['a', 'b', 'c', 1, 4, 10, 15] >>> for x in islice(items, 3, None): ... print(x) ... 4 10 15 >>> \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3 itertools \u6a21\u5757\u63d0\u4f9b\u4e86\u4e09\u4e2a\u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u3002 \u5176\u4e2d\u4e00\u4e2a\u662f itertools.permutations() \uff0c \u5b83\u63a5\u53d7\u4e00\u4e2a\u96c6\u5408\u5e76\u4ea7\u751f\u4e00\u4e2a\u5143\u7ec4\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5143\u7ec4\u7531\u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20\u7684\u4e00\u4e2a\u53ef\u80fd\u6392\u5217\u7ec4\u6210\u3002 \u4e5f\u5c31\u662f\u8bf4\u901a\u8fc7\u6253\u4e71\u96c6\u5408\u4e2d\u5143\u7d20\u6392\u5217\u987a\u5e8f\u751f\u6210\u4e00\u4e2a\u5143\u7ec4\uff0c\u6bd4\u5982\uff1a >>> items = ['a', 'b', 'c'] >>> from itertools import permutations >>> for p in permutations(items): ... print(p) ... ('a', 'b', 'c') ('a', 'c', 'b') ('b', 'a', 'c') ('b', 'c', 'a') ('c', 'a', 'b') ('c', 'b', 'a') >>> \u5982\u679c\u60f3\u5f97\u5230\u6307\u5b9a\u957f\u5ea6\u7684\u6240\u6709\u6392\u5217\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u53ef\u9009\u7684\u957f\u5ea6\u53c2\u6570\u3002\u5c31\u50cf\u8fd9\u6837\uff1a >>> for p in permutations(items, 2): ... print(p) ... ('a', 'b') ('a', 'c') ('b', 'a') ('b', 'c') ('c', 'a') ('c', 'b') >>> \u4f7f\u7528 itertools.combinations() \u53ef\u5f97\u5230\u8f93\u5165\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6240\u6709\u7684\u7ec4\u5408\u3002\u6bd4\u5982\uff1a >>> from itertools import combinations >>> for c in combinations(items, 3): ... print(c) ... ('a', 'b', 'c') >>> for c in combinations(items, 2): ... print(c) ... ('a', 'b') ('a', 'c') ('b', 'c') >>> for c in combinations(items, 1): ... print(c) ... ('a',) ('b',) ('c',) >>> \u5bf9\u4e8e combinations() \u6765\u8bb2\uff0c\u5143\u7d20\u7684\u987a\u5e8f\u5df2\u7ecf\u4e0d\u91cd\u8981\u4e86\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u7ec4\u5408 ('a', 'b') \u8ddf ('b', 'a') \u5176\u5b9e\u662f\u4e00\u6837\u7684(\u6700\u7ec8\u53ea\u4f1a\u8f93\u51fa\u5176\u4e2d\u4e00\u4e2a)\u3002 \u5728\u8ba1\u7b97\u7ec4\u5408\u7684\u65f6\u5019\uff0c\u4e00\u65e6\u5143\u7d20\u88ab\u9009\u53d6\u5c31\u4f1a\u4ece\u5019\u9009\u4e2d\u5254\u9664\u6389(\u6bd4\u5982\u5982\u679c\u5143\u7d20\u2019a\u2019\u5df2\u7ecf\u88ab\u9009\u53d6\u4e86\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u4e0d\u4f1a\u518d\u8003\u8651\u5b83\u4e86)\u3002 \u800c\u51fd\u6570 itertools.combinations_with_replacement() \u5141\u8bb8\u540c\u4e00\u4e2a\u5143\u7d20\u88ab\u9009\u62e9\u591a\u6b21\uff0c\u6bd4\u5982\uff1a >>> for c in combinations_with_replacement(items, 3): ... print(c) ... ('a', 'a', 'a') ('a', 'a', 'b') ('a', 'a', 'c') ('a', 'b', 'b') ('a', 'b', 'c') ('a', 'c', 'c') ('b', 'b', 'b') ('b', 'b', 'c') ('b', 'c', 'c') ('c', 'c', 'c') >>> enumerate()\u8fed\u4ee3\u5668 enumerate() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a enumerate \u5bf9\u8c61\u5b9e\u4f8b\uff0c \u5b83\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fd4\u56de\u8fde\u7eed\u7684\u5305\u542b\u4e00\u4e2a\u8ba1\u6570\u548c\u4e00\u4e2a\u503c\u7684\u5143\u7ec4\uff0c \u5143\u7ec4\u4e2d\u7684\u503c\u901a\u8fc7\u5728\u4f20\u5165\u5e8f\u5217\u4e0a\u8c03\u7528 next() \u8fd4\u56de\u3002 \u5c06\u4e00\u4e2a\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u6620\u5c04\u5230\u5b83\u51fa\u73b0\u7684\u884c\u53f7\u4e0a\u53bb\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5229\u7528 enumerate() \u6765\u5b8c\u6210\uff1a word_summary = defaultdict(list) with open('myfile.txt', 'r') as f: lines = f.readlines() for idx, line in enumerate(lines): # Create a list of words in current line words = [w.strip().lower() for w in line.split()] for word in words: word_summary[word].append(idx) \u5904\u7406\u5b8c\u6587\u4ef6\u540e\u6253\u5370 word_summary \uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u8bcd\u6709\u4e00\u4e2a key \uff0c\u6bcf\u4e2a key \u5bf9\u5e94\u7684\u503c\u662f\u4e00\u4e2a\u7531\u8fd9\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u884c\u53f7\u7ec4\u6210\u7684\u5217\u8868\u3002 \u5982\u679c\u67d0\u4e2a\u5355\u8bcd\u5728\u4e00\u884c\u4e2d\u51fa\u73b0\u8fc7\u4e24\u6b21\uff0c\u90a3\u4e48\u8fd9\u4e2a\u884c\u53f7\u4e5f\u4f1a\u51fa\u73b0\u4e24\u6b21\uff0c \u540c\u65f6\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6587\u672c\u7684\u4e00\u4e2a\u7b80\u5355\u7edf\u8ba1\u3002 zip()\u8fed\u4ee3\u5668 zip(a, b) \u4f1a\u751f\u6210\u4e00\u4e2a\u53ef\u8fd4\u56de\u5143\u7ec4 (x, y) \u7684\u8fed\u4ee3\u5668\uff0c\u5176\u4e2dx\u6765\u81eaa\uff0cy\u6765\u81eab\u3002 \u4e00\u65e6\u5176\u4e2d\u67d0\u4e2a\u5e8f\u5217\u5230\u5e95\u7ed3\u5c3e\uff0c\u8fed\u4ee3\u5ba3\u544a\u7ed3\u675f\u3002 \u56e0\u6b64\u8fed\u4ee3\u957f\u5ea6\u8ddf\u53c2\u6570\u4e2d\u6700\u77ed\u5e8f\u5217\u957f\u5ea6\u4e00\u81f4\u3002 >>> a = [1, 2, 3] >>> b = ['w', 'x', 'y', 'z'] >>> for i in zip(a,b): ... print(i) ... (1, 'w') (2, 'x') (3, 'y') >>> \u82e5\u8981\u5bf9\u9f50\u957f\u5ea6\uff0c\u5219\u53ef\u4f7f\u7528 itertools.zip_longest() \u51fd\u6570\u6765\u4ee3\u66ff\u3002\u6bd4\u5982\uff1a >>> from itertools import zip_longest >>> for i in zip_longest(a,b): ... print(i) ... (1, 'w') (2, 'x') (3, 'y') (None, 'z') >>> for i in zip_longest(a, b, fillvalue=0): ... print(i) ... (1, 'w') (2, 'x') (3, 'y') (0, 'z') >>> \u4e0d\u540c\u96c6\u5408\u4e0a\u5143\u7d20\u7684\u8fed\u4ee3 itertools.chain() \u65b9\u6cd5\u53ef\u4ee5\u7528\u6765\u7b80\u5316\u8fd9\u4e2a\u4efb\u52a1\u3002 \u5b83\u63a5\u53d7\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5217\u8868\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6709\u6548\u7684\u5c4f\u853d\u6389\u5728\u591a\u4e2a\u5bb9\u5668\u4e2d\u8fed\u4ee3\u7ec6\u8282\u3002 >>> from itertools import chain >>> a = [1, 2, 3, 4] >>> b = ['x', 'y', 'z'] >>> for x in chain(a, b): ... print(x) ... 1 2 3 4 x y z >>> itertools.chain() \u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002 \u7136\u540e\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f9d\u6b21\u8fde\u7eed\u7684\u8fd4\u56de\u6bcf\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u3002 \u8fd9\u79cd\u65b9\u5f0f\u8981\u6bd4\u5148\u5c06\u5e8f\u5217\u5408\u5e76\u518d\u8fed\u4ee3\u8981\u9ad8\u6548\u7684\u591a\u3002 \u521b\u5efa\u6570\u636e\u5904\u7406\u7ba1\u9053 foo/ access-log-012007.gz access-log-022007.gz access-log-032007.gz ... access-log-012008 bar/ access-log-092007.bz2 ... access-log-022008 124.115.6.12 - - [10/Jul/2012:00:18:50 -0500] \"GET /robots.txt ...\" 200 71 210.212.209.67 - - [10/Jul/2012:00:18:51 -0500] \"GET /ply/ ...\" 200 11875 210.212.209.67 - - [10/Jul/2012:00:18:51 -0500] \"GET /favicon.ico ...\" 404 369 61.135.216.105 - - [10/Jul/2012:00:20:04 -0500] \"GET /blog/atom.xml ...\" 304 - ... \u4e3a\u4e86\u5904\u7406\u8fd9\u4e9b\u6587\u4ef6\uff0c\u5b9a\u4e49\u4e00\u4e2a\u7531\u591a\u4e2a\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u72ec\u7acb\u4efb\u52a1\u7684\u7b80\u5355\u751f\u6210\u5668\u51fd\u6570\u7ec4\u6210\u7684\u5bb9\u5668\u3002 import os import fnmatch import gzip import bz2 import re def gen_find(filepat, top): ''' Find all filenames in a directory tree that match a shell wildcard pattern ''' for path, dirlist, filelist in os.walk(top): for name in fnmatch.filter(filelist, filepat): yield os.path.join(path,name) def gen_opener(filenames): ''' Open a sequence of filenames one at a time producing a file object. The file is closed immediately when proceeding to the next iteration. ''' for filename in filenames: if filename.endswith('.gz'): f = gzip.open(filename, 'rt') elif filename.endswith('.bz2'): f = bz2.open(filename, 'rt') else: f = open(filename, 'rt') yield f f.close() def gen_concatenate(iterators): ''' Chain a sequence of iterators together into a single sequence. ''' for it in iterators: yield from it def gen_grep(pattern, lines): ''' Look for a regex pattern in a sequence of lines ''' pat = re.compile(pattern) for line in lines: if pat.search(line): yield line \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5c06\u8fd9\u4e9b\u51fd\u6570\u8fde\u8d77\u6765\u521b\u5efa\u4e00\u4e2a\u5904\u7406\u7ba1\u9053\u3002 \u6bd4\u5982\uff0c\u4e3a\u4e86\u67e5\u627e\u5305\u542b\u5355\u8bcdpython\u7684\u6240\u6709\u65e5\u5fd7\u884c\u3002 lognames = gen_find('access-log*', 'www') files = gen_opener(lognames) lines = gen_concatenate(files) pylines = gen_grep('(?i)python', lines) for line in pylines: print(line) \u751a\u81f3\u53ef\u4ee5\u5728\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d\u5305\u88c5\u6570\u636e\u3002 \u6bd4\u5982\uff0c\u4e0b\u9762\u8fd9\u4e2a\u7248\u672c\u8ba1\u7b97\u51fa\u4f20\u8f93\u7684\u5b57\u8282\u6570\u5e76\u8ba1\u7b97\u5176\u603b\u548c\u3002 lognames = gen_find('access-log*', 'www') files = gen_opener(lognames) lines = gen_concatenate(files) pylines = gen_grep('(?i)python', lines) bytecolumn = (line.rsplit(None,1)[1] for line in pylines) bytes = (int(x) for x in bytecolumn if x != '-') print('Total', sum(bytes)) \u5c55\u5f00\u5d4c\u5957\u7684\u5e8f\u5217 \u53ef\u4ee5\u5199\u4e00\u4e2a\u5305\u542b yield from \u8bed\u53e5\u7684\u9012\u5f52\u751f\u6210\u5668\u6765\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6bd4\u5982\uff1a from collections import Iterable def flatten(items, ignore_types=(str, bytes)): for x in items: if isinstance(x, Iterable) and not isinstance(x, ignore_types): yield from flatten(x) else: yield x items = [1, 2, [3, 4, [5, 6], 7], 8] # Produces 1 2 3 4 5 6 7 8 for x in flatten(items): print(x) \u8bed\u53e5 yield from \u5728\u60f3\u5728\u751f\u6210\u5668\u4e2d\u8c03\u7528\u5176\u4ed6\u751f\u6210\u5668\u4f5c\u4e3a\u5b50\u4f8b\u7a0b\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\u3002 \u6700\u540e\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c yield from \u5728\u6d89\u53ca\u5230\u57fa\u4e8e\u534f\u7a0b\u548c\u751f\u6210\u5668\u7684\u5e76\u53d1\u7f16\u7a0b\u4e2d\u626e\u6f14\u7740\u66f4\u52a0\u91cd\u8981\u7684\u89d2\u8272\u3002 \u8fed\u4ee3\u5668\u4ee3\u66ffwhile\u65e0\u9650\u5faa\u73af \u4e00\u4e2a\u5e38\u89c1\u7684IO\u64cd\u4f5c\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u60f3\u4e0b\u9762\u8fd9\u6837\uff1a CHUNKSIZE = 8192 def reader(s): while True: data = s.recv(CHUNKSIZE) if data == b'': break process_data(data) \u8fd9\u79cd\u4ee3\u7801\u901a\u5e38\u53ef\u4ee5\u4f7f\u7528 iter() \u6765\u4ee3\u66ff\uff0c\u5982\u4e0b\u6240\u793a\uff1a def reader2(s): for chunk in iter(lambda: s.recv(CHUNKSIZE), b''): pass # process_data(data) iter \u51fd\u6570\u4e00\u4e2a\u9c9c\u4e3a\u4eba\u77e5\u7684\u7279\u6027\u662f\u5b83\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684 callable \u5bf9\u8c61\u548c\u4e00\u4e2a\u6807\u8bb0(\u7ed3\u5c3e)\u503c\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002 \u5f53\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c \u8fd9\u4e2a\u8fed\u4ee3\u5668\u4f1a\u4e0d\u65ad\u8c03\u7528 callable \u5bf9\u8c61\u76f4\u5230\u8fd4\u56de\u503c\u548c\u6807\u8bb0\u503c\u76f8\u7b49\u4e3a\u6b62\u3002 \u8fd9\u79cd\u7279\u6b8a\u7684\u65b9\u6cd5\u5bf9\u4e8e\u4e00\u4e9b\u7279\u5b9a\u7684\u4f1a\u88ab\u91cd\u590d\u8c03\u7528\u7684\u51fd\u6570\u5f88\u6709\u6548\u679c\uff0c\u6bd4\u5982\u6d89\u53ca\u5230I/O\u8c03\u7528\u7684\u51fd\u6570\u3002 \u4e3e\u4f8b\u6765\u8bb2\uff0c\u5982\u679c\u4f60\u60f3\u4ece\u5957\u63a5\u5b57\u6216\u6587\u4ef6\u4e2d\u4ee5\u6570\u636e\u5757\u7684\u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\uff0c\u901a\u5e38\u4f60\u5f97\u8981\u4e0d\u65ad\u91cd\u590d\u7684\u6267\u884c read() \u6216 recv() \uff0c \u5e76\u5728\u540e\u9762\u7d27\u8ddf\u4e00\u4e2a\u6587\u4ef6\u7ed3\u5c3e\u6d4b\u8bd5\u6765\u51b3\u5b9a\u662f\u5426\u7ec8\u6b62\u3002\u8fd9\u8282\u4e2d\u7684\u65b9\u6848\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 iter() \u8c03\u7528\u5c31\u53ef\u4ee5\u5c06\u4e24\u8005\u7ed3\u5408\u8d77\u6765\u4e86\u3002 \u5176\u4e2d lambda \u51fd\u6570\u53c2\u6570\u662f\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u65e0\u53c2\u7684 callable \u5bf9\u8c61\uff0c\u5e76\u4e3a recv \u6216 read() \u65b9\u6cd5\u63d0\u4f9b\u4e86 size \u53c2\u6570\u3002 \u5355\u4f8b\u6a21\u5f0f \u5de5\u5382\u6a21\u5f0f","title":"Python \u7f16\u7a0b\u6a21\u5f0f"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_1","text":"","title":""},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_2","text":"\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3001\u8fed\u4ee3\u5668\u3001\u751f\u6210\u5668","title":"\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_3","text":"","title":"\u6982\u5ff5\u548c\u5173\u7cfb"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#iterable","text":"\u5b9a\u4e49 \uff1a\u5b9e\u73b0\u4e86 __iter__() \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u53ef\u4ee5\u88ab iter() \u51fd\u6570\u4f5c\u7528\u7684\u5bf9\u8c61\u3002 \u7279\u70b9 \uff1a \u53ef\u4ee5\u7528 for x in obj: \u6765\u904d\u5386\u3002 \u8c03\u7528 iter(obj) \u4f1a\u8fd4\u56de\u4e00\u4e2a \u8fed\u4ee3\u5668\uff08iterator\uff09 \u3002 \u5e38\u89c1\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61 \uff1a list, tuple, str, dict, set, range, file, \u7b49\u7b49 \u793a\u4f8b \uff1a lst = [1, 2, 3] it = iter(lst) # \u5f97\u5230\u4e00\u4e2a\u8fed\u4ee3\u5668","title":"\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08Iterable\uff09"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#iterator","text":"\u5b9a\u4e49 \uff1a\u5b9e\u73b0\u4e86 __iter__() \u548c __next__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 \u7279\u70b9 \uff1a __iter__() \u8fd4\u56de\u81ea\u8eab\uff08 return self \uff09\u3002 __next__() \u6bcf\u6b21\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u629b\u51fa StopIteration \u5f02\u5e38\u3002 \u53ea\u80fd\u5f80\u524d\u8d70\uff0c\u4e0d\u80fd\u56de\u5934\uff08\u4e00\u6b21\u6027\u6d88\u8d39\uff09\u3002 \u793a\u4f8b \uff1a lst = [1, 2, 3] it = iter(lst) # it \u662f\u4e00\u4e2a\u8fed\u4ee3\u5668 print(next(it)) # \u8f93\u51fa 1 print(next(it)) # \u8f93\u51fa 2","title":"\u8fed\u4ee3\u5668\uff08Iterator\uff09"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#generator","text":"\u751f\u6210\u5668\u662f \u4e00\u79cd\u7279\u6b8a\u7684\u8fed\u4ee3\u5668 \uff0c\u6709\u4e24\u79cd\u521b\u5efa\u65b9\u5f0f\uff1a \u751f\u6210\u5668\u51fd\u6570\uff08\u4f7f\u7528 yield \uff09 def my_gen(): yield 1 yield 2 yield 3 g = my_gen() # g \u662f\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u4e5f\u5c31\u662f\u8fed\u4ee3\u5668 \u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff08generator expression\uff09 g = (x * x for x in range(3)) # g \u662f\u4e00\u4e2a\u751f\u6210\u5668 \u7279\u70b9 \uff1a \u7701\u5185\u5b58\uff0c\u61d2\u52a0\u8f7d\u3002 \u9047\u5230 yield \u6682\u505c\u6267\u884c\uff0c\u4e0b\u4e00\u6b21 next() \u4ece\u6682\u505c\u70b9\u7ee7\u7eed\u3002","title":"\u751f\u6210\u5668\uff08Generator\uff09"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_4","text":"+-----------------------+ | Iterable | \u2190 \u53ef\u4ee5\u7528 for \u5faa\u73af\u904d\u5386\u5b83 | (__iter__ method) | +-----------------------+ | | iter() \u2193 +-----------------------+ | Iterator | \u2190 \u53ef\u4ee5\u624b\u52a8\u8c03\u7528 next() | (__iter__, __next__) | +-----------------------+ ^ | +---------------------------+ | Generator | \u2190 \u7279\u6b8a\u7684 Iterator\uff08\u81ea\u52a8\u5b9e\u73b0\u4e86\uff09 | (\u4f7f\u7528 yield \u521b\u5efa\u7684) | +---------------------------+","title":"\u56fe\u89e3"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_5","text":"def frange(start, stop, increment): x = start while x < stop: yield x x += increment \u4e3a\u4e86\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c \u53ef\u4ee5\u7528for\u5faa\u73af\u8fed\u4ee3\u5b83\u6216\u8005\u4f7f\u7528\u5176\u4ed6\u63a5\u53d7\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u51fd\u6570(\u6bd4\u5982 sum() , list() \u7b49)\u3002\u793a\u4f8b\u5982\u4e0b\uff1a >>> for n in frange(0, 4, 0.5): ... print(n) ... 0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 >>> list(frange(0, 1, 0.125)) [0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875] >>> \u4e00\u4e2a\u51fd\u6570\u4e2d\u9700\u8981\u6709\u4e00\u4e2a yield \u8bed\u53e5\u5373\u53ef\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u751f\u6210\u5668\u3002 \u8ddf\u666e\u901a\u51fd\u6570\u4e0d\u540c\u7684\u662f\uff0c\u751f\u6210\u5668\u53ea\u80fd\u7528\u4e8e\u8fed\u4ee3\u64cd\u4f5c\u3002","title":"\u4f7f\u7528\u751f\u6210\u5668\u521b\u5efa\u65b0\u7684\u8fed\u4ee3\u6a21\u5f0f"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_6","text":"\u5728\u4e00\u4e2a\u5bf9\u8c61\u4e0a\u5b9e\u73b0\u8fed\u4ee3\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\u3002 class Node: def __init__(self, value): self._value = value self._children = [] def __repr__(self): return 'Node({!r})'.format(self._value) def add_child(self, node): self._children.append(node) def __iter__(self): return iter(self._children) def depth_first(self): yield self for c in self: yield from c.depth_first() # Example if __name__ == '__main__': root = Node(0) child1 = Node(1) child2 = Node(2) root.add_child(child1) root.add_child(child2) child1.add_child(Node(3)) child1.add_child(Node(4)) child2.add_child(Node(5)) for ch in root.depth_first(): print(ch) # Outputs Node(0), Node(1), Node(3), Node(4), Node(2), Node(5) \u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c __iter__() \u65b9\u6cd5\u53ea\u662f\u7b80\u5355\u7684\u5c06\u8fed\u4ee3\u8bf7\u6c42\u4f20\u9012\u7ed9\u5185\u90e8\u7684 _children \u5c5e\u6027\u3002 Python\u7684\u8fed\u4ee3\u5668\u534f\u8bae\u9700\u8981 __iter__() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b9e\u73b0\u4e86 __next__() \u65b9\u6cd5\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 \u8fd9\u91cc\u7684 iter() \u51fd\u6570\u7684\u4f7f\u7528\u7b80\u5316\u4e86\u4ee3\u7801\uff0c iter(s) \u53ea\u662f\u7b80\u5355\u7684\u901a\u8fc7\u8c03\u7528 s.__iter__() \u65b9\u6cd5\u6765\u8fd4\u56de\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c \u5c31\u8ddf len(s) \u4f1a\u8c03\u7528 s.__len__() \u539f\u7406\u662f\u4e00\u6837\u7684\u3002 depth_first() \u65b9\u6cd5\u7b80\u5355\u76f4\u89c2\u3002 \u5b83\u9996\u5148\u8fd4\u56de\u81ea\u5df1\u672c\u8eab\u5e76\u8fed\u4ee3\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u5e76 \u901a\u8fc7\u8c03\u7528\u5b50\u8282\u70b9\u7684 depth_first() \u65b9\u6cd5(\u4f7f\u7528 yield from \u8bed\u53e5)\u8fd4\u56de\u5bf9\u5e94\u5143\u7d20\u3002","title":"\u5728\u5bf9\u8c61\u4e0a\u5b9e\u73b0\u8fed\u4ee3"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_7","text":"\u901a\u8fc7\u5728\u81ea\u5b9a\u4e49\u7c7b\u4e0a\u5b9e\u73b0 __reversed__() \u65b9\u6cd5\u6765\u5b9e\u73b0\u53cd\u5411\u8fed\u4ee3\u3002\u6bd4\u5982\uff1a class Countdown: def __init__(self, start): self.start = start # Forward iterator def __iter__(self): n = self.start while n > 0: yield n n -= 1 # Reverse iterator def __reversed__(self): n = 1 while n <= self.start: yield n n += 1 for rr in reversed(Countdown(30)): print(rr) for rr in Countdown(30): print(rr)","title":"\u53cd\u5411\u8fed\u4ee3"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_8","text":"\u5982\u679c\u8981\u751f\u6210\u5668\u66b4\u9732\u5916\u90e8\u72b6\u6001\u7ed9\u7528\u6237\uff0c \u53ef\u4ee5\u7b80\u5355\u7684\u5c06\u5b83\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u7c7b\uff0c\u7136\u540e\u628a\u751f\u6210\u5668\u51fd\u6570\u653e\u5230 __iter__() \u65b9\u6cd5\u4e2d\u8fc7\u53bb\u3002\u6bd4\u5982\uff1a from collections import deque class linehistory: def __init__(self, lines, histlen=3): self.lines = lines self.history = deque(maxlen=histlen) def __iter__(self): for lineno, line in enumerate(self.lines, 1): self.history.append((lineno, line)) yield line def clear(self): self.history.clear() with open('somefile.txt') as f: lines = linehistory(f) for line in lines: if 'python' in line: for lineno, hline in lines.history: print('{}:{}'.format(lineno, hline), end='') \u5728 __iter__() \u65b9\u6cd5\u4e2d\u5b9a\u4e49\u751f\u6210\u5668\u4e0d\u4f1a\u6539\u53d8\u4efb\u4f55\u7684\u7b97\u6cd5\u903b\u8f91\u3002 \u7531\u4e8e\u5b83\u662f\u7c7b\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u5141\u8bb8\u5b9a\u4e49\u5404\u79cd\u5c5e\u6027\u548c\u65b9\u6cd5\u6765\u4f9b\u7528\u6237\u4f7f\u7528\u3002","title":"\u5e26\u6709\u5916\u90e8\u72b6\u6001\u7684\u751f\u6210\u5668\u51fd\u6570"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_9","text":"\u51fd\u6570 itertools.islice() \u6b63\u597d\u9002\u7528\u4e8e\u5728\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668\u4e0a\u505a\u5207\u7247\u64cd\u4f5c\u3002\u6bd4\u5982\uff1a >>> def count(n): ... while True: ... yield n ... n += 1 ... >>> c = count(0) >>> c[10:20] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'generator' object is not subscriptable >>> # Now using islice() >>> import itertools >>> for x in itertools.islice(c, 10, 20): ... print(x) ... 10 11 12 13 14 15 16 17 18 19 >>> \u8981\u7740\u91cd\u5f3a\u8c03\u7684\u4e00\u70b9\u662f islice() \u4f1a\u6d88\u8017\u6389\u4f20\u5165\u7684\u8fed\u4ee3\u5668\u4e2d\u7684\u6570\u636e\uff0c\u5fc5\u987b\u8003\u8651\u5230\u8fed\u4ee3\u5668\u662f\u4e0d\u53ef\u9006\u7684\u8fd9\u4e2a\u4e8b\u5b9e\uff0c\u6240\u4ee5\u5982\u679c\u9700\u8981\u4e4b\u540e\u518d\u6b21\u8bbf\u95ee\u8fd9\u4e2a\u8fed\u4ee3\u5668\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u5f97\u5148\u5c06\u5b83\u91cc\u9762\u7684\u6570\u636e\u653e\u5165\u4e00\u4e2a\u5217\u8868\u4e2d\u3002","title":"\u8fed\u4ee3\u5668\u5207\u7247"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_10","text":"itertools.dropwhile() \u51fd\u6570\u4f7f\u7528\u65f6\uff0c\u4f20\u9012\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u548c\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u4e22\u5f03\u539f\u6709\u5e8f\u5217\u4e2d\u76f4\u5230\u51fd\u6570\u8fd4\u56deFlase\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20\uff0c\u7136\u540e\u8fd4\u56de\u540e\u9762\u6240\u6709\u5143\u7d20\u3002 >>> with open('/etc/passwd') as f: ... for line in f: ... print(line, end='') ... ## # User Database # # Note that this file is consulted directly only when the system is running # in single-user mode. At other times, this information is provided by # Open Directory. ... ## nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false root:*:0:0:System Administrator:/var/root:/bin/sh ... >>> >>> from itertools import dropwhile >>> with open('/etc/passwd') as f: ... for line in dropwhile(lambda line: not line.startswith('#'), f): ... print(line, end='') ... nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false root:*:0:0:System Administrator:/var/root:/bin/sh ... >>> \u5982\u679c\u5df2\u7ecf\u660e\u786e\u77e5\u9053\u4e86\u8981\u8df3\u8fc7\u7684\u5143\u7d20\u7684\u5e8f\u53f7\u7684\u8bdd\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 itertools.islice() \u6765\u4ee3\u66ff\u3002\u6bd4\u5982\uff1a >>> from itertools import islice >>> items = ['a', 'b', 'c', 1, 4, 10, 15] >>> for x in islice(items, 3, None): ... print(x) ... 4 10 15 >>>","title":"\u8df3\u8fc7\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5f00\u59cb\u90e8\u5206"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_11","text":"itertools \u6a21\u5757\u63d0\u4f9b\u4e86\u4e09\u4e2a\u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u3002 \u5176\u4e2d\u4e00\u4e2a\u662f itertools.permutations() \uff0c \u5b83\u63a5\u53d7\u4e00\u4e2a\u96c6\u5408\u5e76\u4ea7\u751f\u4e00\u4e2a\u5143\u7ec4\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5143\u7ec4\u7531\u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20\u7684\u4e00\u4e2a\u53ef\u80fd\u6392\u5217\u7ec4\u6210\u3002 \u4e5f\u5c31\u662f\u8bf4\u901a\u8fc7\u6253\u4e71\u96c6\u5408\u4e2d\u5143\u7d20\u6392\u5217\u987a\u5e8f\u751f\u6210\u4e00\u4e2a\u5143\u7ec4\uff0c\u6bd4\u5982\uff1a >>> items = ['a', 'b', 'c'] >>> from itertools import permutations >>> for p in permutations(items): ... print(p) ... ('a', 'b', 'c') ('a', 'c', 'b') ('b', 'a', 'c') ('b', 'c', 'a') ('c', 'a', 'b') ('c', 'b', 'a') >>> \u5982\u679c\u60f3\u5f97\u5230\u6307\u5b9a\u957f\u5ea6\u7684\u6240\u6709\u6392\u5217\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u53ef\u9009\u7684\u957f\u5ea6\u53c2\u6570\u3002\u5c31\u50cf\u8fd9\u6837\uff1a >>> for p in permutations(items, 2): ... print(p) ... ('a', 'b') ('a', 'c') ('b', 'a') ('b', 'c') ('c', 'a') ('c', 'b') >>> \u4f7f\u7528 itertools.combinations() \u53ef\u5f97\u5230\u8f93\u5165\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6240\u6709\u7684\u7ec4\u5408\u3002\u6bd4\u5982\uff1a >>> from itertools import combinations >>> for c in combinations(items, 3): ... print(c) ... ('a', 'b', 'c') >>> for c in combinations(items, 2): ... print(c) ... ('a', 'b') ('a', 'c') ('b', 'c') >>> for c in combinations(items, 1): ... print(c) ... ('a',) ('b',) ('c',) >>> \u5bf9\u4e8e combinations() \u6765\u8bb2\uff0c\u5143\u7d20\u7684\u987a\u5e8f\u5df2\u7ecf\u4e0d\u91cd\u8981\u4e86\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u7ec4\u5408 ('a', 'b') \u8ddf ('b', 'a') \u5176\u5b9e\u662f\u4e00\u6837\u7684(\u6700\u7ec8\u53ea\u4f1a\u8f93\u51fa\u5176\u4e2d\u4e00\u4e2a)\u3002 \u5728\u8ba1\u7b97\u7ec4\u5408\u7684\u65f6\u5019\uff0c\u4e00\u65e6\u5143\u7d20\u88ab\u9009\u53d6\u5c31\u4f1a\u4ece\u5019\u9009\u4e2d\u5254\u9664\u6389(\u6bd4\u5982\u5982\u679c\u5143\u7d20\u2019a\u2019\u5df2\u7ecf\u88ab\u9009\u53d6\u4e86\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u4e0d\u4f1a\u518d\u8003\u8651\u5b83\u4e86)\u3002 \u800c\u51fd\u6570 itertools.combinations_with_replacement() \u5141\u8bb8\u540c\u4e00\u4e2a\u5143\u7d20\u88ab\u9009\u62e9\u591a\u6b21\uff0c\u6bd4\u5982\uff1a >>> for c in combinations_with_replacement(items, 3): ... print(c) ... ('a', 'a', 'a') ('a', 'a', 'b') ('a', 'a', 'c') ('a', 'b', 'b') ('a', 'b', 'c') ('a', 'c', 'c') ('b', 'b', 'b') ('b', 'b', 'c') ('b', 'c', 'c') ('c', 'c', 'c') >>>","title":"\u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#enumerate","text":"enumerate() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a enumerate \u5bf9\u8c61\u5b9e\u4f8b\uff0c \u5b83\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fd4\u56de\u8fde\u7eed\u7684\u5305\u542b\u4e00\u4e2a\u8ba1\u6570\u548c\u4e00\u4e2a\u503c\u7684\u5143\u7ec4\uff0c \u5143\u7ec4\u4e2d\u7684\u503c\u901a\u8fc7\u5728\u4f20\u5165\u5e8f\u5217\u4e0a\u8c03\u7528 next() \u8fd4\u56de\u3002 \u5c06\u4e00\u4e2a\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u6620\u5c04\u5230\u5b83\u51fa\u73b0\u7684\u884c\u53f7\u4e0a\u53bb\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5229\u7528 enumerate() \u6765\u5b8c\u6210\uff1a word_summary = defaultdict(list) with open('myfile.txt', 'r') as f: lines = f.readlines() for idx, line in enumerate(lines): # Create a list of words in current line words = [w.strip().lower() for w in line.split()] for word in words: word_summary[word].append(idx) \u5904\u7406\u5b8c\u6587\u4ef6\u540e\u6253\u5370 word_summary \uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u8bcd\u6709\u4e00\u4e2a key \uff0c\u6bcf\u4e2a key \u5bf9\u5e94\u7684\u503c\u662f\u4e00\u4e2a\u7531\u8fd9\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u884c\u53f7\u7ec4\u6210\u7684\u5217\u8868\u3002 \u5982\u679c\u67d0\u4e2a\u5355\u8bcd\u5728\u4e00\u884c\u4e2d\u51fa\u73b0\u8fc7\u4e24\u6b21\uff0c\u90a3\u4e48\u8fd9\u4e2a\u884c\u53f7\u4e5f\u4f1a\u51fa\u73b0\u4e24\u6b21\uff0c \u540c\u65f6\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6587\u672c\u7684\u4e00\u4e2a\u7b80\u5355\u7edf\u8ba1\u3002","title":"enumerate()\u8fed\u4ee3\u5668"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#zip","text":"zip(a, b) \u4f1a\u751f\u6210\u4e00\u4e2a\u53ef\u8fd4\u56de\u5143\u7ec4 (x, y) \u7684\u8fed\u4ee3\u5668\uff0c\u5176\u4e2dx\u6765\u81eaa\uff0cy\u6765\u81eab\u3002 \u4e00\u65e6\u5176\u4e2d\u67d0\u4e2a\u5e8f\u5217\u5230\u5e95\u7ed3\u5c3e\uff0c\u8fed\u4ee3\u5ba3\u544a\u7ed3\u675f\u3002 \u56e0\u6b64\u8fed\u4ee3\u957f\u5ea6\u8ddf\u53c2\u6570\u4e2d\u6700\u77ed\u5e8f\u5217\u957f\u5ea6\u4e00\u81f4\u3002 >>> a = [1, 2, 3] >>> b = ['w', 'x', 'y', 'z'] >>> for i in zip(a,b): ... print(i) ... (1, 'w') (2, 'x') (3, 'y') >>> \u82e5\u8981\u5bf9\u9f50\u957f\u5ea6\uff0c\u5219\u53ef\u4f7f\u7528 itertools.zip_longest() \u51fd\u6570\u6765\u4ee3\u66ff\u3002\u6bd4\u5982\uff1a >>> from itertools import zip_longest >>> for i in zip_longest(a,b): ... print(i) ... (1, 'w') (2, 'x') (3, 'y') (None, 'z') >>> for i in zip_longest(a, b, fillvalue=0): ... print(i) ... (1, 'w') (2, 'x') (3, 'y') (0, 'z') >>>","title":"zip()\u8fed\u4ee3\u5668"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_12","text":"itertools.chain() \u65b9\u6cd5\u53ef\u4ee5\u7528\u6765\u7b80\u5316\u8fd9\u4e2a\u4efb\u52a1\u3002 \u5b83\u63a5\u53d7\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5217\u8868\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6709\u6548\u7684\u5c4f\u853d\u6389\u5728\u591a\u4e2a\u5bb9\u5668\u4e2d\u8fed\u4ee3\u7ec6\u8282\u3002 >>> from itertools import chain >>> a = [1, 2, 3, 4] >>> b = ['x', 'y', 'z'] >>> for x in chain(a, b): ... print(x) ... 1 2 3 4 x y z >>> itertools.chain() \u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002 \u7136\u540e\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f9d\u6b21\u8fde\u7eed\u7684\u8fd4\u56de\u6bcf\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20\u3002 \u8fd9\u79cd\u65b9\u5f0f\u8981\u6bd4\u5148\u5c06\u5e8f\u5217\u5408\u5e76\u518d\u8fed\u4ee3\u8981\u9ad8\u6548\u7684\u591a\u3002","title":"\u4e0d\u540c\u96c6\u5408\u4e0a\u5143\u7d20\u7684\u8fed\u4ee3"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_13","text":"foo/ access-log-012007.gz access-log-022007.gz access-log-032007.gz ... access-log-012008 bar/ access-log-092007.bz2 ... access-log-022008 124.115.6.12 - - [10/Jul/2012:00:18:50 -0500] \"GET /robots.txt ...\" 200 71 210.212.209.67 - - [10/Jul/2012:00:18:51 -0500] \"GET /ply/ ...\" 200 11875 210.212.209.67 - - [10/Jul/2012:00:18:51 -0500] \"GET /favicon.ico ...\" 404 369 61.135.216.105 - - [10/Jul/2012:00:20:04 -0500] \"GET /blog/atom.xml ...\" 304 - ... \u4e3a\u4e86\u5904\u7406\u8fd9\u4e9b\u6587\u4ef6\uff0c\u5b9a\u4e49\u4e00\u4e2a\u7531\u591a\u4e2a\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u72ec\u7acb\u4efb\u52a1\u7684\u7b80\u5355\u751f\u6210\u5668\u51fd\u6570\u7ec4\u6210\u7684\u5bb9\u5668\u3002 import os import fnmatch import gzip import bz2 import re def gen_find(filepat, top): ''' Find all filenames in a directory tree that match a shell wildcard pattern ''' for path, dirlist, filelist in os.walk(top): for name in fnmatch.filter(filelist, filepat): yield os.path.join(path,name) def gen_opener(filenames): ''' Open a sequence of filenames one at a time producing a file object. The file is closed immediately when proceeding to the next iteration. ''' for filename in filenames: if filename.endswith('.gz'): f = gzip.open(filename, 'rt') elif filename.endswith('.bz2'): f = bz2.open(filename, 'rt') else: f = open(filename, 'rt') yield f f.close() def gen_concatenate(iterators): ''' Chain a sequence of iterators together into a single sequence. ''' for it in iterators: yield from it def gen_grep(pattern, lines): ''' Look for a regex pattern in a sequence of lines ''' pat = re.compile(pattern) for line in lines: if pat.search(line): yield line \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5c06\u8fd9\u4e9b\u51fd\u6570\u8fde\u8d77\u6765\u521b\u5efa\u4e00\u4e2a\u5904\u7406\u7ba1\u9053\u3002 \u6bd4\u5982\uff0c\u4e3a\u4e86\u67e5\u627e\u5305\u542b\u5355\u8bcdpython\u7684\u6240\u6709\u65e5\u5fd7\u884c\u3002 lognames = gen_find('access-log*', 'www') files = gen_opener(lognames) lines = gen_concatenate(files) pylines = gen_grep('(?i)python', lines) for line in pylines: print(line) \u751a\u81f3\u53ef\u4ee5\u5728\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d\u5305\u88c5\u6570\u636e\u3002 \u6bd4\u5982\uff0c\u4e0b\u9762\u8fd9\u4e2a\u7248\u672c\u8ba1\u7b97\u51fa\u4f20\u8f93\u7684\u5b57\u8282\u6570\u5e76\u8ba1\u7b97\u5176\u603b\u548c\u3002 lognames = gen_find('access-log*', 'www') files = gen_opener(lognames) lines = gen_concatenate(files) pylines = gen_grep('(?i)python', lines) bytecolumn = (line.rsplit(None,1)[1] for line in pylines) bytes = (int(x) for x in bytecolumn if x != '-') print('Total', sum(bytes))","title":"\u521b\u5efa\u6570\u636e\u5904\u7406\u7ba1\u9053"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_14","text":"\u53ef\u4ee5\u5199\u4e00\u4e2a\u5305\u542b yield from \u8bed\u53e5\u7684\u9012\u5f52\u751f\u6210\u5668\u6765\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6bd4\u5982\uff1a from collections import Iterable def flatten(items, ignore_types=(str, bytes)): for x in items: if isinstance(x, Iterable) and not isinstance(x, ignore_types): yield from flatten(x) else: yield x items = [1, 2, [3, 4, [5, 6], 7], 8] # Produces 1 2 3 4 5 6 7 8 for x in flatten(items): print(x) \u8bed\u53e5 yield from \u5728\u60f3\u5728\u751f\u6210\u5668\u4e2d\u8c03\u7528\u5176\u4ed6\u751f\u6210\u5668\u4f5c\u4e3a\u5b50\u4f8b\u7a0b\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\u3002 \u6700\u540e\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c yield from \u5728\u6d89\u53ca\u5230\u57fa\u4e8e\u534f\u7a0b\u548c\u751f\u6210\u5668\u7684\u5e76\u53d1\u7f16\u7a0b\u4e2d\u626e\u6f14\u7740\u66f4\u52a0\u91cd\u8981\u7684\u89d2\u8272\u3002","title":"\u5c55\u5f00\u5d4c\u5957\u7684\u5e8f\u5217"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#while","text":"\u4e00\u4e2a\u5e38\u89c1\u7684IO\u64cd\u4f5c\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u60f3\u4e0b\u9762\u8fd9\u6837\uff1a CHUNKSIZE = 8192 def reader(s): while True: data = s.recv(CHUNKSIZE) if data == b'': break process_data(data) \u8fd9\u79cd\u4ee3\u7801\u901a\u5e38\u53ef\u4ee5\u4f7f\u7528 iter() \u6765\u4ee3\u66ff\uff0c\u5982\u4e0b\u6240\u793a\uff1a def reader2(s): for chunk in iter(lambda: s.recv(CHUNKSIZE), b''): pass # process_data(data) iter \u51fd\u6570\u4e00\u4e2a\u9c9c\u4e3a\u4eba\u77e5\u7684\u7279\u6027\u662f\u5b83\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684 callable \u5bf9\u8c61\u548c\u4e00\u4e2a\u6807\u8bb0(\u7ed3\u5c3e)\u503c\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002 \u5f53\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c \u8fd9\u4e2a\u8fed\u4ee3\u5668\u4f1a\u4e0d\u65ad\u8c03\u7528 callable \u5bf9\u8c61\u76f4\u5230\u8fd4\u56de\u503c\u548c\u6807\u8bb0\u503c\u76f8\u7b49\u4e3a\u6b62\u3002 \u8fd9\u79cd\u7279\u6b8a\u7684\u65b9\u6cd5\u5bf9\u4e8e\u4e00\u4e9b\u7279\u5b9a\u7684\u4f1a\u88ab\u91cd\u590d\u8c03\u7528\u7684\u51fd\u6570\u5f88\u6709\u6548\u679c\uff0c\u6bd4\u5982\u6d89\u53ca\u5230I/O\u8c03\u7528\u7684\u51fd\u6570\u3002 \u4e3e\u4f8b\u6765\u8bb2\uff0c\u5982\u679c\u4f60\u60f3\u4ece\u5957\u63a5\u5b57\u6216\u6587\u4ef6\u4e2d\u4ee5\u6570\u636e\u5757\u7684\u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\uff0c\u901a\u5e38\u4f60\u5f97\u8981\u4e0d\u65ad\u91cd\u590d\u7684\u6267\u884c read() \u6216 recv() \uff0c \u5e76\u5728\u540e\u9762\u7d27\u8ddf\u4e00\u4e2a\u6587\u4ef6\u7ed3\u5c3e\u6d4b\u8bd5\u6765\u51b3\u5b9a\u662f\u5426\u7ec8\u6b62\u3002\u8fd9\u8282\u4e2d\u7684\u65b9\u6848\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 iter() \u8c03\u7528\u5c31\u53ef\u4ee5\u5c06\u4e24\u8005\u7ed3\u5408\u8d77\u6765\u4e86\u3002 \u5176\u4e2d lambda \u51fd\u6570\u53c2\u6570\u662f\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u65e0\u53c2\u7684 callable \u5bf9\u8c61\uff0c\u5e76\u4e3a recv \u6216 read() \u65b9\u6cd5\u63d0\u4f9b\u4e86 size \u53c2\u6570\u3002","title":"\u8fed\u4ee3\u5668\u4ee3\u66ffwhile\u65e0\u9650\u5faa\u73af"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_15","text":"","title":"\u5355\u4f8b\u6a21\u5f0f"},{"location":"03_python/02_python%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/#_16","text":"","title":"\u5de5\u5382\u6a21\u5f0f"},{"location":"03_python/03_python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","text":"\u4f18\u5148\u7ea7\u961f\u5217 \u5b9e\u73b0\u4e00\u4e2a\u6309\u4f18\u5148\u7ea7\u6392\u5e8f\u7684\u961f\u5217\uff0c\u5e76\u4e14\u5728\u8fd9\u4e2a\u961f\u5217\u4e0a\u9762\u6bcf\u6b21 pop \u64cd\u4f5c\u603b\u662f\u8fd4\u56de\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u90a3\u4e2a\u5143\u7d20 \u5229\u7528 heapq \u6a21\u5757\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4f18\u5148\u7ea7\u961f\u5217 import heapq class PriorityQueue: def __init__(self): self._queue = [] self._index = 0 def push(self, item, priority): heapq.heappush(self._queue, (-priority, self._index, item)) self._index += 1 def pop(self): return heapq.heappop(self._queue)[-1] \u4f7f\u7528\u65b9\u5f0f\uff1a >>> class Item: ... def __init__(self, name): ... self.name = name ... def __repr__(self): ... return 'Item({!r})'.format(self.name) ... >>> q = PriorityQueue() >>> q.push(Item('foo'), 1) >>> q.push(Item('bar'), 5) >>> q.push(Item('spam'), 4) >>> q.push(Item('grok'), 1) >>> q.pop() Item('bar') >>> q.pop() Item('spam') >>> q.pop() Item('foo') >>> q.pop() Item('grok') >>> heappop() \u51fd\u6570\u603b\u662f\u8fd4\u56de\u201d\u6700\u5c0f\u7684\u201d\u7684\u5143\u7d20\uff0c\u8fd9\u5c31\u662f\u4fdd\u8bc1\u961f\u5217pop\u64cd\u4f5c\u8fd4\u56de\u6b63\u786e\u5143\u7d20\u7684\u5173\u952e\u3002 \u53e6\u5916\uff0c\u7531\u4e8e push \u548c pop \u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log N)\uff0c\u5176\u4e2d N \u662f\u5806\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u5c31\u7b97\u662f N \u5f88\u5927\u7684\u65f6\u5019\u5b83\u4eec\u8fd0\u884c\u901f\u5ea6\u4e5f\u4f9d\u65e7\u5f88\u5feb\u3002 \u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u961f\u5217\u5305\u542b\u4e86\u4e00\u4e2a (-priority, index, item) \u7684\u5143\u7ec4\u3002 \u4f18\u5148\u7ea7\u4e3a\u8d1f\u6570\u7684\u76ee\u7684\u662f\u4f7f\u5f97\u5143\u7d20\u6309\u7167\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002 \u8fd9\u4e2a\u8ddf\u666e\u901a\u7684\u6309\u4f18\u5148\u7ea7\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\u7684\u5806\u6392\u5e8f\u6070\u5de7\u76f8\u53cd\u3002 index \u53d8\u91cf\u7684\u4f5c\u7528\u662f\u4fdd\u8bc1\u540c\u7b49\u4f18\u5148\u7ea7\u5143\u7d20\u7684\u6b63\u786e\u6392\u5e8f\u3002 \u901a\u8fc7\u4fdd\u5b58\u4e00\u4e2a\u4e0d\u65ad\u589e\u52a0\u7684 index \u4e0b\u6807\u53d8\u91cf\uff0c\u53ef\u4ee5\u786e\u4fdd\u5143\u7d20\u6309\u7167\u5b83\u4eec\u63d2\u5165\u7684\u987a\u5e8f\u6392\u5e8f\u3002 \u800c\u4e14\uff0c index \u53d8\u91cf\u4e5f\u5728\u76f8\u540c\u4f18\u5148\u7ea7\u5143\u7d20\u6bd4\u8f83\u7684\u65f6\u5019\u8d77\u5230\u91cd\u8981\u4f5c\u7528\u3002","title":"Python \u6570\u636e\u7ed3\u6784"},{"location":"03_python/03_python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","text":"","title":""},{"location":"03_python/03_python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","text":"\u5b9e\u73b0\u4e00\u4e2a\u6309\u4f18\u5148\u7ea7\u6392\u5e8f\u7684\u961f\u5217\uff0c\u5e76\u4e14\u5728\u8fd9\u4e2a\u961f\u5217\u4e0a\u9762\u6bcf\u6b21 pop \u64cd\u4f5c\u603b\u662f\u8fd4\u56de\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u90a3\u4e2a\u5143\u7d20 \u5229\u7528 heapq \u6a21\u5757\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4f18\u5148\u7ea7\u961f\u5217 import heapq class PriorityQueue: def __init__(self): self._queue = [] self._index = 0 def push(self, item, priority): heapq.heappush(self._queue, (-priority, self._index, item)) self._index += 1 def pop(self): return heapq.heappop(self._queue)[-1] \u4f7f\u7528\u65b9\u5f0f\uff1a >>> class Item: ... def __init__(self, name): ... self.name = name ... def __repr__(self): ... return 'Item({!r})'.format(self.name) ... >>> q = PriorityQueue() >>> q.push(Item('foo'), 1) >>> q.push(Item('bar'), 5) >>> q.push(Item('spam'), 4) >>> q.push(Item('grok'), 1) >>> q.pop() Item('bar') >>> q.pop() Item('spam') >>> q.pop() Item('foo') >>> q.pop() Item('grok') >>> heappop() \u51fd\u6570\u603b\u662f\u8fd4\u56de\u201d\u6700\u5c0f\u7684\u201d\u7684\u5143\u7d20\uff0c\u8fd9\u5c31\u662f\u4fdd\u8bc1\u961f\u5217pop\u64cd\u4f5c\u8fd4\u56de\u6b63\u786e\u5143\u7d20\u7684\u5173\u952e\u3002 \u53e6\u5916\uff0c\u7531\u4e8e push \u548c pop \u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log N)\uff0c\u5176\u4e2d N \u662f\u5806\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u5c31\u7b97\u662f N \u5f88\u5927\u7684\u65f6\u5019\u5b83\u4eec\u8fd0\u884c\u901f\u5ea6\u4e5f\u4f9d\u65e7\u5f88\u5feb\u3002 \u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0c\u961f\u5217\u5305\u542b\u4e86\u4e00\u4e2a (-priority, index, item) \u7684\u5143\u7ec4\u3002 \u4f18\u5148\u7ea7\u4e3a\u8d1f\u6570\u7684\u76ee\u7684\u662f\u4f7f\u5f97\u5143\u7d20\u6309\u7167\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002 \u8fd9\u4e2a\u8ddf\u666e\u901a\u7684\u6309\u4f18\u5148\u7ea7\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\u7684\u5806\u6392\u5e8f\u6070\u5de7\u76f8\u53cd\u3002 index \u53d8\u91cf\u7684\u4f5c\u7528\u662f\u4fdd\u8bc1\u540c\u7b49\u4f18\u5148\u7ea7\u5143\u7d20\u7684\u6b63\u786e\u6392\u5e8f\u3002 \u901a\u8fc7\u4fdd\u5b58\u4e00\u4e2a\u4e0d\u65ad\u589e\u52a0\u7684 index \u4e0b\u6807\u53d8\u91cf\uff0c\u53ef\u4ee5\u786e\u4fdd\u5143\u7d20\u6309\u7167\u5b83\u4eec\u63d2\u5165\u7684\u987a\u5e8f\u6392\u5e8f\u3002 \u800c\u4e14\uff0c index \u53d8\u91cf\u4e5f\u5728\u76f8\u540c\u4f18\u5148\u7ea7\u5143\u7d20\u6bd4\u8f83\u7684\u65f6\u5019\u8d77\u5230\u91cd\u8981\u4f5c\u7528\u3002","title":"\u4f18\u5148\u7ea7\u961f\u5217"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/","text":"Python \u4f5c\u4e3a\u4e00\u95e8\u901a\u7528\u7f16\u7a0b\u8bed\u8a00\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5404\u79cd\u7b97\u6cd5\u3002 \u6392\u5e8f\u7b97\u6cd5 (Sorting Algorithms) # \u5192\u6ce1\u6392\u5e8f def bubble_sort(arr): n = len(arr) for i in range(n-1): for j in range(n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr # \u5feb\u901f\u6392\u5e8f def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr)//2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) # \u5f52\u5e76\u6392\u5e8f def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result \u641c\u7d22\u7b97\u6cd5 (Searching Algorithms) # \u4e8c\u5206\u67e5\u627e def binary_search(arr, target): low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1 # \u7ebf\u6027\u67e5\u627e def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 \u56fe\u7b97\u6cd5 (Graph Algorithms) # \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 (BFS) from collections import deque def bfs(graph, start): visited = set() queue = deque([start]) visited.add(start) while queue: vertex = queue.popleft() print(vertex, end=\" \") for neighbor in graph[vertex]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 (DFS) def dfs(graph, start, visited=None): if visited is None: visited = set() visited.add(start) print(start, end=\" \") for neighbor in graph[start]: if neighbor not in visited: dfs(graph, neighbor, visited) # Dijkstra \u6700\u77ed\u8def\u5f84\u7b97\u6cd5 import heapq def dijkstra(graph, start): distances = {vertex: float('infinity') for vertex in graph} distances[start] = 0 heap = [(0, start)] while heap: current_distance, current_vertex = heapq.heappop(heap) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances \u52a8\u6001\u89c4\u5212 (Dynamic Programming) # \u6590\u6ce2\u90a3\u5951\u6570\u5217 (\u5e26\u8bb0\u5fc6\u5316) def fibonacci(n, memo={}): if n in memo: return memo[n] if n <= 2: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] # 0-1\u80cc\u5305\u95ee\u9898 def knapsack(values, weights, capacity): n = len(values) dp = [[0] * (capacity + 1) for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i-1] <= w: dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] return dp[n][capacity] \u8d2a\u5fc3\u7b97\u6cd5 (Greedy Algorithms) # \u6d3b\u52a8\u9009\u62e9\u95ee\u9898 def activity_selection(activities): activities.sort(key=lambda x: x[1]) # \u6309\u7ed3\u675f\u65f6\u95f4\u6392\u5e8f selected = [activities[0]] for activity in activities[1:]: if activity[0] >= selected[-1][1]: # \u5f00\u59cb\u65f6\u95f4 >= \u4e0a\u4e00\u4e2a\u6d3b\u52a8\u7684\u7ed3\u675f\u65f6\u95f4 selected.append(activity) return selected # \u970d\u592b\u66fc\u7f16\u7801 import heapq def huffman_coding(freq): heap = [[weight, [symbol, \"\"]] for symbol, weight in freq.items()] heapq.heapify(heap) while len(heap) > 1: lo = heapq.heappop(heap) hi = heapq.heappop(heap) for pair in lo[1:]: pair[1] = '0' + pair[1] for pair in hi[1:]: pair[1] = '1' + pair[1] heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:]) return sorted(heapq.heappop(heap)[1:], key=lambda p: (len(p[-1]), p)) \u5206\u6cbb\u7b97\u6cd5 (Divide and Conquer) # \u6700\u5927\u5b50\u6570\u7ec4\u95ee\u9898 def max_subarray(arr): def max_crossing_sum(arr, low, mid, high): left_sum = float('-inf') total = 0 for i in range(mid, low-1, -1): total += arr[i] if total > left_sum: left_sum = total right_sum = float('-inf') total = 0 for i in range(mid+1, high+1): total += arr[i] if total > right_sum: right_sum = total return left_sum + right_sum def max_subarray_helper(arr, low, high): if low == high: return arr[low] mid = (low + high) // 2 return max(max_subarray_helper(arr, low, mid), max_subarray_helper(arr, mid+1, high), max_crossing_sum(arr, low, mid, high)) return max_subarray_helper(arr, 0, len(arr)-1) \u5b57\u7b26\u4e32\u7b97\u6cd5 (String Algorithms) # KMP \u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 def kmp_search(text, pattern): def compute_lps(pattern): lps = [0] * len(pattern) length = 0 i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length-1] else: lps[i] = 0 i += 1 return lps lps = compute_lps(pattern) i = j = 0 while i < len(text): if text[i] == pattern[j]: i += 1 j += 1 if j == len(pattern): return i - j else: if j != 0: j = lps[j-1] else: i += 1 return -1 # Rabin-Karp \u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 def rabin_karp(text, pattern): d = 256 # \u5b57\u7b26\u96c6\u5927\u5c0f q = 101 # \u8d28\u6570 m = len(pattern) n = len(text) p = t = 0 h = 1 for i in range(m-1): h = (h * d) % q for i in range(m): p = (d * p + ord(pattern[i])) % q t = (d * t + ord(text[i])) % q for i in range(n - m + 1): if p == t: if text[i:i+m] == pattern: return i if i < n - m: t = (d * (t - ord(text[i]) * h) + ord(text[i + m]) % q if t < 0: t += q return -1 \u6570\u5b66\u7b97\u6cd5 (Mathematical Algorithms) # \u7d20\u6570\u7b5b\u6cd5 (\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5) def sieve_of_eratosthenes(n): primes = [True] * (n+1) primes[0] = primes[1] = False for i in range(2, int(n**0.5)+1): if primes[i]: for j in range(i*i, n+1, i): primes[j] = False return [i for i, is_prime in enumerate(primes) if is_prime] # \u6700\u5927\u516c\u7ea6\u6570 (\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5) def gcd(a, b): while b: a, b = b, a % b return a # \u5feb\u901f\u5e42\u7b97\u6cd5 def fast_power(a, b): result = 1 while b > 0: if b % 2 == 1: result *= a a *= a b //= 2 return result \u673a\u5668\u5b66\u4e60\u7b97\u6cd5 (Machine Learning Algorithms) # K-\u5747\u503c\u805a\u7c7b import numpy as np def k_means(data, k, max_iterations=100): # \u968f\u673a\u521d\u59cb\u5316\u4e2d\u5fc3\u70b9 centroids = data[np.random.choice(range(len(data)), k, replace=False)] for _ in range(max_iterations): # \u5206\u914d\u70b9\u5230\u6700\u8fd1\u7684\u805a\u7c7b\u4e2d\u5fc3 distances = np.sqrt(((data - centroids[:, np.newaxis])**2).sum(axis=2)) clusters = np.argmin(distances, axis=0) # \u66f4\u65b0\u805a\u7c7b\u4e2d\u5fc3 new_centroids = np.array([data[clusters == i].mean(axis=0) for i in range(k)]) # \u68c0\u67e5\u662f\u5426\u6536\u655b if np.all(centroids == new_centroids): break centroids = new_centroids return clusters, centroids # \u7ebf\u6027\u56de\u5f52 def linear_regression(X, y, learning_rate=0.01, iterations=1000): m = len(y) theta = np.zeros(X.shape[1]) for _ in range(iterations): predictions = X.dot(theta) errors = predictions - y gradient = X.T.dot(errors) / m theta -= learning_rate * gradient return theta \u5176\u4ed6\u5b9e\u7528\u7b97\u6cd5 # LRU\u7f13\u5b58 (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) from collections import OrderedDict class LRUCache: def __init__(self, capacity): self.cache = OrderedDict() self.capacity = capacity def get(self, key): if key not in self.cache: return -1 self.cache.move_to_end(key) return self.cache[key] def put(self, key, value): if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) # \u5e03\u9686\u8fc7\u6ee4\u5668 import mmh3 from bitarray import bitarray class BloomFilter: def __init__(self, size, hash_num): self.size = size self.hash_num = hash_num self.bit_array = bitarray(size) self.bit_array.setall(0) def add(self, item): for i in range(self.hash_num): index = mmh3.hash(item, i) % self.size self.bit_array[index] = 1 def contains(self, item): for i in range(self.hash_num): index = mmh3.hash(item, i) % self.size if not self.bit_array[index]: return False return True","title":"python \u7b97\u6cd5"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#_1","text":"Python \u4f5c\u4e3a\u4e00\u95e8\u901a\u7528\u7f16\u7a0b\u8bed\u8a00\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5404\u79cd\u7b97\u6cd5\u3002","title":""},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#sorting-algorithms","text":"# \u5192\u6ce1\u6392\u5e8f def bubble_sort(arr): n = len(arr) for i in range(n-1): for j in range(n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr # \u5feb\u901f\u6392\u5e8f def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr)//2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) # \u5f52\u5e76\u6392\u5e8f def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result","title":"\u6392\u5e8f\u7b97\u6cd5 (Sorting Algorithms)"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#searching-algorithms","text":"# \u4e8c\u5206\u67e5\u627e def binary_search(arr, target): low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1 # \u7ebf\u6027\u67e5\u627e def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1","title":"\u641c\u7d22\u7b97\u6cd5 (Searching Algorithms)"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#graph-algorithms","text":"# \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 (BFS) from collections import deque def bfs(graph, start): visited = set() queue = deque([start]) visited.add(start) while queue: vertex = queue.popleft() print(vertex, end=\" \") for neighbor in graph[vertex]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 (DFS) def dfs(graph, start, visited=None): if visited is None: visited = set() visited.add(start) print(start, end=\" \") for neighbor in graph[start]: if neighbor not in visited: dfs(graph, neighbor, visited) # Dijkstra \u6700\u77ed\u8def\u5f84\u7b97\u6cd5 import heapq def dijkstra(graph, start): distances = {vertex: float('infinity') for vertex in graph} distances[start] = 0 heap = [(0, start)] while heap: current_distance, current_vertex = heapq.heappop(heap) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances","title":"\u56fe\u7b97\u6cd5 (Graph Algorithms)"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#dynamic-programming","text":"# \u6590\u6ce2\u90a3\u5951\u6570\u5217 (\u5e26\u8bb0\u5fc6\u5316) def fibonacci(n, memo={}): if n in memo: return memo[n] if n <= 2: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] # 0-1\u80cc\u5305\u95ee\u9898 def knapsack(values, weights, capacity): n = len(values) dp = [[0] * (capacity + 1) for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i-1] <= w: dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] return dp[n][capacity]","title":"\u52a8\u6001\u89c4\u5212 (Dynamic Programming)"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#greedy-algorithms","text":"# \u6d3b\u52a8\u9009\u62e9\u95ee\u9898 def activity_selection(activities): activities.sort(key=lambda x: x[1]) # \u6309\u7ed3\u675f\u65f6\u95f4\u6392\u5e8f selected = [activities[0]] for activity in activities[1:]: if activity[0] >= selected[-1][1]: # \u5f00\u59cb\u65f6\u95f4 >= \u4e0a\u4e00\u4e2a\u6d3b\u52a8\u7684\u7ed3\u675f\u65f6\u95f4 selected.append(activity) return selected # \u970d\u592b\u66fc\u7f16\u7801 import heapq def huffman_coding(freq): heap = [[weight, [symbol, \"\"]] for symbol, weight in freq.items()] heapq.heapify(heap) while len(heap) > 1: lo = heapq.heappop(heap) hi = heapq.heappop(heap) for pair in lo[1:]: pair[1] = '0' + pair[1] for pair in hi[1:]: pair[1] = '1' + pair[1] heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:]) return sorted(heapq.heappop(heap)[1:], key=lambda p: (len(p[-1]), p))","title":"\u8d2a\u5fc3\u7b97\u6cd5 (Greedy Algorithms)"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#divide-and-conquer","text":"# \u6700\u5927\u5b50\u6570\u7ec4\u95ee\u9898 def max_subarray(arr): def max_crossing_sum(arr, low, mid, high): left_sum = float('-inf') total = 0 for i in range(mid, low-1, -1): total += arr[i] if total > left_sum: left_sum = total right_sum = float('-inf') total = 0 for i in range(mid+1, high+1): total += arr[i] if total > right_sum: right_sum = total return left_sum + right_sum def max_subarray_helper(arr, low, high): if low == high: return arr[low] mid = (low + high) // 2 return max(max_subarray_helper(arr, low, mid), max_subarray_helper(arr, mid+1, high), max_crossing_sum(arr, low, mid, high)) return max_subarray_helper(arr, 0, len(arr)-1)","title":"\u5206\u6cbb\u7b97\u6cd5 (Divide and Conquer)"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#string-algorithms","text":"# KMP \u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 def kmp_search(text, pattern): def compute_lps(pattern): lps = [0] * len(pattern) length = 0 i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length-1] else: lps[i] = 0 i += 1 return lps lps = compute_lps(pattern) i = j = 0 while i < len(text): if text[i] == pattern[j]: i += 1 j += 1 if j == len(pattern): return i - j else: if j != 0: j = lps[j-1] else: i += 1 return -1 # Rabin-Karp \u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 def rabin_karp(text, pattern): d = 256 # \u5b57\u7b26\u96c6\u5927\u5c0f q = 101 # \u8d28\u6570 m = len(pattern) n = len(text) p = t = 0 h = 1 for i in range(m-1): h = (h * d) % q for i in range(m): p = (d * p + ord(pattern[i])) % q t = (d * t + ord(text[i])) % q for i in range(n - m + 1): if p == t: if text[i:i+m] == pattern: return i if i < n - m: t = (d * (t - ord(text[i]) * h) + ord(text[i + m]) % q if t < 0: t += q return -1","title":"\u5b57\u7b26\u4e32\u7b97\u6cd5 (String Algorithms)"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#mathematical-algorithms","text":"# \u7d20\u6570\u7b5b\u6cd5 (\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5) def sieve_of_eratosthenes(n): primes = [True] * (n+1) primes[0] = primes[1] = False for i in range(2, int(n**0.5)+1): if primes[i]: for j in range(i*i, n+1, i): primes[j] = False return [i for i, is_prime in enumerate(primes) if is_prime] # \u6700\u5927\u516c\u7ea6\u6570 (\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5) def gcd(a, b): while b: a, b = b, a % b return a # \u5feb\u901f\u5e42\u7b97\u6cd5 def fast_power(a, b): result = 1 while b > 0: if b % 2 == 1: result *= a a *= a b //= 2 return result","title":"\u6570\u5b66\u7b97\u6cd5 (Mathematical Algorithms)"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#machine-learning-algorithms","text":"# K-\u5747\u503c\u805a\u7c7b import numpy as np def k_means(data, k, max_iterations=100): # \u968f\u673a\u521d\u59cb\u5316\u4e2d\u5fc3\u70b9 centroids = data[np.random.choice(range(len(data)), k, replace=False)] for _ in range(max_iterations): # \u5206\u914d\u70b9\u5230\u6700\u8fd1\u7684\u805a\u7c7b\u4e2d\u5fc3 distances = np.sqrt(((data - centroids[:, np.newaxis])**2).sum(axis=2)) clusters = np.argmin(distances, axis=0) # \u66f4\u65b0\u805a\u7c7b\u4e2d\u5fc3 new_centroids = np.array([data[clusters == i].mean(axis=0) for i in range(k)]) # \u68c0\u67e5\u662f\u5426\u6536\u655b if np.all(centroids == new_centroids): break centroids = new_centroids return clusters, centroids # \u7ebf\u6027\u56de\u5f52 def linear_regression(X, y, learning_rate=0.01, iterations=1000): m = len(y) theta = np.zeros(X.shape[1]) for _ in range(iterations): predictions = X.dot(theta) errors = predictions - y gradient = X.T.dot(errors) / m theta -= learning_rate * gradient return theta","title":"\u673a\u5668\u5b66\u4e60\u7b97\u6cd5 (Machine Learning Algorithms)"},{"location":"03_python/04_python%E7%AE%97%E6%B3%95/#_2","text":"# LRU\u7f13\u5b58 (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) from collections import OrderedDict class LRUCache: def __init__(self, capacity): self.cache = OrderedDict() self.capacity = capacity def get(self, key): if key not in self.cache: return -1 self.cache.move_to_end(key) return self.cache[key] def put(self, key, value): if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) # \u5e03\u9686\u8fc7\u6ee4\u5668 import mmh3 from bitarray import bitarray class BloomFilter: def __init__(self, size, hash_num): self.size = size self.hash_num = hash_num self.bit_array = bitarray(size) self.bit_array.setall(0) def add(self, item): for i in range(self.hash_num): index = mmh3.hash(item, i) % self.size self.bit_array[index] = 1 def contains(self, item): for i in range(self.hash_num): index = mmh3.hash(item, i) % self.size if not self.bit_array[index]: return False return True","title":"\u5176\u4ed6\u5b9e\u7528\u7b97\u6cd5"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/","text":"re \u6a21\u5757 \u6b63\u5219 \u6700\u77ed\u5339\u914d\u6a21\u5f0f\uff08\u975e\u8d2a\u5a6a\uff09 \u591a\u884c\u5339\u914d\uff08 re.compile(r'/\\*(.*?)\\*/', re.DOTALL) \u6216\u8005 (?:.|\\n) \u6307\u5b9a\u4e00\u4e2a\u975e\u6355\u83b7\u7ec4\uff09 \u67e5\u627e \u5982\u679c\u60f3\u5339\u914d\u7684\u662f\u5b57\u9762\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u901a\u5e38\u53ea\u9700\u8981\u8c03\u7528\u57fa\u672c\u5b57\u7b26\u4e32\u65b9\u6cd5\u5c31\u884c\uff0c \u6bd4\u5982 str.find() , str.endswith() , str.startswith() \u3002 \u590d\u6742\u7684\u5339\u914d\u9700\u8981\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u548c re \u6a21\u5757\u3002 >>> text1 = '11/27/2012' >>> text2 = 'Nov 27, 2012' >>> >>> import re >>> # Simple matching: \\d+ means match one or more digits >>> if re.match(r'\\d+/\\d+/\\d+', text1): ... print('yes') ... else: ... print('no') ... \u5982\u679c\u60f3\u4f7f\u7528\u540c\u4e00\u4e2a\u6a21\u5f0f\u53bb\u505a\u591a\u6b21\u5339\u914d\uff0c\u4f60\u5e94\u8be5\u5148\u5c06\u6a21\u5f0f\u5b57\u7b26\u4e32\u9884\u7f16\u8bd1\u4e3a\u6a21\u5f0f\u5bf9\u8c61\u3002\u6bd4\u5982\uff1a >>> datepat = re.compile(r'\\d+/\\d+/\\d+') >>> if datepat.match(text1): ... print('yes') ... else: ... print('no') ... match() \u603b\u662f\u4ece\u5b57\u7b26\u4e32\u5f00\u59cb\u53bb\u5339\u914d\uff0c\u5982\u679c\u4f60\u60f3\u67e5\u627e\u5b57\u7b26\u4e32\u4efb\u610f\u90e8\u5206\u7684\u6a21\u5f0f\u51fa\u73b0\u4f4d\u7f6e\uff0c \u4f7f\u7528 findall() \u65b9\u6cd5\u53bb\u4ee3\u66ff\u3002 \u5728\u5b9a\u4e49\u6b63\u5219\u5f0f\u7684\u65f6\u5019\uff0c\u901a\u5e38\u4f1a\u5229\u7528\u62ec\u53f7\u53bb\u6355\u83b7\u5206\u7ec4\u3002 >>> datepat = re.compile(r'(\\d+)/(\\d+)/(\\d+)') >>> text 'Today is 11/27/2012. PyCon starts 3/13/2013.' >>> datepat.findall(text) [('11', '27', '2012'), ('3', '13', '2013')] >>> for month, day, year in datepat.findall(text): ... print('{}-{}-{}'.format(year, month, day)) ... 2012-11-27 2013-3-13 >>> findall() \u65b9\u6cd5\u4f1a\u641c\u7d22\u6587\u672c\u5e76\u4ee5\u5217\u8868\u5f62\u5f0f\u8fd4\u56de\u6240\u6709\u7684\u5339\u914d\u3002 \u5982\u679c\u60f3\u4ee5\u8fed\u4ee3\u65b9\u5f0f\u8fd4\u56de\u5339\u914d\uff0c\u53ef\u4ee5\u4f7f\u7528 finditer() \u65b9\u6cd5\u6765\u4ee3\u66ff\uff0c\u6bd4\u5982\uff1a >>> for m in datepat.finditer(text): ... print(m.groups()) ... ('11', '27', '2012') ('3', '13', '2013') >>> \u66ff\u6362 \u5bf9\u4e8e\u7b80\u5355\u7684\u5b57\u9762\u6a21\u5f0f\uff0c\u76f4\u63a5\u4f7f\u7528 str.replace() \u65b9\u6cd5\u5373\u53ef\uff0c\u5bf9\u4e8e\u590d\u6742\u7684\u6a21\u5f0f\uff0c\u4f7f\u7528 re \u6a21\u5757\u4e2d\u7684 sub() \u51fd\u6570\u3002 >>> text = 'UPPER PYTHON, lower python, Mixed Python' >>> re.findall('python', text, flags=re.IGNORECASE) ['PYTHON', 'python', 'Python'] >>> re.sub('python', 'snake', text, flags=re.IGNORECASE) 'UPPER snake, lower snake, Mixed snake' >>> \u4e0a\u9762\u4f8b\u5b50\u6709\u4e2a\u7f3a\u9677\uff0c\u66ff\u6362\u5b57\u7b26\u4e32\u5e76\u4e0d\u4f1a\u81ea\u52a8\u8ddf\u88ab\u5339\u914d\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\u5199\u4fdd\u6301\u4e00\u81f4\u3002 def matchcase(word): def replace(m): text = m.group() if text.isupper(): return word.upper() elif text.islower(): return word.lower() elif text[0].isupper(): return word.capitalize() else: return word return replace >>> re.sub('python', matchcase('snake'), text, flags=re.IGNORECASE) 'UPPER SNAKE, lower snake, Mixed Snake' >>> matchcase('snake') \u8fd4\u56de\u4e86\u4e00\u4e2a\u56de\u8c03\u51fd\u6570(\u53c2\u6570\u5fc5\u987b\u662f match \u5bf9\u8c61)\uff0c\u524d\u9762\u4e00\u8282\u63d0\u5230\u8fc7\uff0c sub() \u51fd\u6570\u9664\u4e86\u63a5\u53d7\u66ff\u6362\u5b57\u7b26\u4e32\u5916\uff0c\u8fd8\u80fd\u63a5\u53d7\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u3002 \u5bf9\u4e8e\u4e00\u822c\u7684\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u5339\u914d\u64cd\u4f5c\uff0c\u7b80\u5355\u7684\u4f20\u9012\u4e00\u4e2a re.IGNORECASE \u6807\u5fd7\u53c2\u6570\u5c31\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u5bf9\u4e8e\u67d0\u4e9b\u9700\u8981\u5927\u5c0f\u5199\u8f6c\u6362\u7684 Unicode \u5339\u914d\u53ef\u80fd\u8fd8\u4e0d\u591f\u3002 \u5728\u6b63\u5219\u5f0f\u4e2d\u4f7f\u7528 Unicode \u9ed8\u8ba4\u60c5\u51b5\u4e0b re \u6a21\u5757\u5df2\u7ecf\u5bf9\u4e00\u4e9b Unicode \u5b57\u7b26\u7c7b\u6709\u4e86\u57fa\u672c\u7684\u652f\u6301\u3002 \u6bd4\u5982\uff0c \\\\d \u5df2\u7ecf\u5339\u914d\u4efb\u610f\u7684 unicode \u6570\u5b57\u5b57\u7b26\u4e86\u3002 >>> import re >>> num = re.compile('\\d+') >>> # ASCII digits >>> num.match('123') <_sre.SRE_Match object at 0x1007d9ed0> >>> # Arabic digits >>> num.match('\\u0661\\u0662\\u0663') <_sre.SRE_Match object at 0x101234030> >>> \u6df7\u5408\u4f7f\u7528Unicode\u548c\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6700\u597d\u8fd8\u662f\u4f7f\u7528\u589e\u5f3a\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u6bd4\u5982\uff1a regex \u5b57\u7b26\u4e32\u4ee4\u724c\u89e3\u6790 \u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u60f3\u4ece\u5de6\u81f3\u53f3\u5c06\u5176\u89e3\u6790\u4e3a\u4e00\u4e2a\u4ee4\u724c\u6d41\u3002 \u5bf9\u4e8e\u590d\u6742\u7684\u8bed\u6cd5\uff0c\u6700\u597d\u662f\u9009\u62e9\u67d0\u4e2a\u89e3\u6790\u5de5\u5177\u6bd4\u5982 PyParsing \u6216\u8005\u662f PLY\u3002 unicodedata \u6a21\u5757 \u6807\u51c6\u5316\u5bf9\u4e8e\u4efb\u4f55\u9700\u8981\u4ee5\u4e00\u81f4\u7684\u65b9\u5f0f\u5904\u7406Unicode\u6587\u672c\u7684\u7a0b\u5e8f\u90fd\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5f53\u5904\u7406\u6765\u81ea\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u800c\u4f60\u5f88\u96be\u53bb\u63a7\u5236\u7f16\u7801\u7684\u65f6\u5019\u5c24\u5176\u5982\u6b64\u3002 >>> s1 = 'Spicy Jalape\\u00f1o' >>> s2 = 'Spicy Jalapen\\u0303o' >>> s1 'Spicy Jalape\u00f1o' >>> s2 'Spicy Jalape\u00f1o' >>> s1 == s2 False >>> len(s1) 14 >>> len(s2) 15 >>> >>> import unicodedata >>> t1 = unicodedata.normalize('NFC', s1) >>> t2 = unicodedata.normalize('NFC', s2) >>> t1 == t2 True >>> print(ascii(t1)) 'Spicy Jalape\\xf1o' >>> t3 = unicodedata.normalize('NFD', s1) >>> t4 = unicodedata.normalize('NFD', s2) >>> t3 == t4 True >>> print(ascii(t3)) 'Spicy Jalapen\\u0303o' >>> >>> t1 = unicodedata.normalize('NFD', s1) >>> ''.join(c for c in t1 if not unicodedata.combining(c)) 'Spicy Jalapeno' >>> collections \u6a21\u5757 deque() \u5728\u8fed\u4ee3\u64cd\u4f5c\u6216\u8005\u5176\u4ed6\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u53ea\u4fdd\u7559\u6700\u540e\u6709\u9650\u51e0\u4e2a\u5143\u7d20\u7684\u5386\u53f2\u8bb0\u5f55\u3002 deque(maxlen=N) \u6784\u9020\u51fd\u6570\u4f1a\u65b0\u5efa\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u961f\u5217\u3002\u5f53\u65b0\u7684\u5143\u7d20\u52a0\u5165\u5e76\u4e14\u8fd9\u4e2a\u961f\u5217\u5df2\u6ee1\u7684\u65f6\u5019\uff0c \u6700\u8001\u7684\u5143\u7d20\u4f1a\u81ea\u52a8\u88ab\u79fb\u9664\u6389\u3002 \u5728\u961f\u5217\u4e24\u7aef\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1) \uff0c\u533a\u522b\u4e8e\u5217\u8868\uff0c\u5728\u5217\u8868\u7684\u5f00\u5934\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N) \u3002 \u5728\u5199\u67e5\u8be2\u5143\u7d20\u7684\u4ee3\u7801\u65f6\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u5305\u542b yield \u8868\u8fbe\u5f0f\u7684\u751f\u6210\u5668\u51fd\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u5c06\u641c\u7d22\u8fc7\u7a0b\u4ee3\u7801\u548c\u4f7f\u7528\u641c\u7d22\u7ed3\u679c\u4ee3\u7801\u89e3\u8026\u3002 from collections import deque def my_search(lines, pattern, history=5): previous_lines = deque(maxlen=history) for line in lines: if pattern in line: yield line, previous_lines previous_lines.append(line) # Example use on a file if __name__ == '__main__': with open(r'../../cookbook/somefile.txt') as f: for line, prevlines in my_search(f, 'python', 5): for pline in prevlines: print(pline, end='') print(line, end='') print('-' * 20) defaultdict() \u4e00\u4e2a\u5b57\u5178\u5c31\u662f\u4e00\u4e2a\u952e\u5bf9\u5e94\u4e00\u4e2a\u5355\u503c\u7684\u6620\u5c04\u3002\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u952e\u6620\u5c04\u591a\u4e2a\u503c\uff0c\u5c31\u9700\u8981\u5c06\u8fd9\u591a\u4e2a\u503c\u653e\u5230\u53e6\u5916\u7684\u5bb9\u5668\u4e2d\uff0c\u6bd4\u5982\u5217\u8868\u6216\u8005\u96c6\u5408\u91cc\u9762\u3002 \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4f7f\u7528 collections \u6a21\u5757\u4e2d\u7684 defaultdict \u6765\u6784\u9020\u8fd9\u6837\u7684\u5b57\u5178\u3002 from collections import defaultdict d = defaultdict(list) d['a'].append(1) d['a'].append(2) d['b'].append(4) d = defaultdict(set) d['a'].add(1) d['a'].add(2) d['b'].add(4) \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c defaultdict \u4f1a\u81ea\u52a8\u4e3a\u5c06\u8981\u8bbf\u95ee\u7684\u952e\uff08\u5c31\u7b97\u76ee\u524d\u5b57\u5178\u4e2d\u5e76\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u952e\uff09\u521b\u5efa\u6620\u5c04\u5b9e\u4f53\u3002 OrderedDict() \u521b\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u5e76\u4e14\u5728\u8fed\u4ee3\u6216\u5e8f\u5217\u5316\u8fd9\u4e2a\u5b57\u5178\u7684\u65f6\u5019\u80fd\u591f\u63a7\u5236\u5143\u7d20\u7684\u987a\u5e8f\u3002 \u4e3a\u4e86\u80fd\u63a7\u5236\u4e00\u4e2a\u5b57\u5178\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 collections \u6a21\u5757\u4e2d\u7684 OrderedDict \u7c7b\u3002\u5728\u8fed\u4ee3\u64cd\u4f5c\u7684\u65f6\u5019\u5b83\u4f1a\u4fdd\u6301\u5143\u7d20\u88ab\u63d2\u5165\u65f6\u7684\u987a\u5e8f from collections import OrderedDict d = OrderedDict() d['foo'] = 1 d['bar'] = 2 d['spam'] = 3 d['grok'] = 4 # Outputs \"foo 1\", \"bar 2\", \"spam 3\", \"grok 4\" for key in d: print(key, d[key]) OrderedDict \u5185\u90e8\u7ef4\u62a4\u7740\u4e00\u4e2a\u6839\u636e\u952e\u63d2\u5165\u987a\u5e8f\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u6bcf\u6b21\u5f53\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u63d2\u5165\u8fdb\u6765\u7684\u65f6\u5019\uff0c \u5b83\u4f1a\u88ab\u653e\u5230\u94fe\u8868\u7684\u5c3e\u90e8\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u952e\u7684\u91cd\u590d\u8d4b\u503c\u4e0d\u4f1a\u6539\u53d8\u952e\u7684\u987a\u5e8f\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u4e2a OrderedDict \u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u666e\u901a\u5b57\u5178\u7684\u4e24\u500d\uff0c\u56e0\u4e3a\u5b83\u5185\u90e8\u7ef4\u62a4\u7740\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u3002 \u6240\u4ee5\u5982\u679c\u4f60\u8981\u6784\u5efa\u4e00\u4e2a\u9700\u8981\u5927\u91cf OrderedDict \u5b9e\u4f8b\u7684\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\uff08\u6bd4\u5982\u8bfb\u53d6 100,000 \u884c CSV \u6570\u636e\u5230\u4e00\u4e2a OrderedDict \u5217\u8868\u4e2d\u53bb\uff09\uff0c \u90a3\u4e48\u4f60\u5c31\u5f97\u4ed4\u7ec6\u6743\u8861\u4e00\u4e0b\u662f\u5426\u4f7f\u7528 OrderedDict \u5e26\u6765\u7684\u597d\u5904\u8981\u5927\u8fc7\u989d\u5916\u5185\u5b58\u6d88\u8017\u7684\u5f71\u54cd\u3002 Counter() \u627e\u51fa\u4e00\u4e2a\u5e8f\u5217\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20 words = [ 'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes', 'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the', 'eyes', \"don't\", 'look', 'around', 'the', 'eyes', 'look', 'into', 'my', 'eyes', \"you're\", 'under' ] from collections import Counter word_counts = Counter(words) # \u51fa\u73b0\u9891\u7387\u6700\u9ad8\u76843\u4e2a\u5355\u8bcd top_three = word_counts.most_common(3) print(top_three) # Outputs [('eyes', 8), ('the', 5), ('look', 4)] namedtuple() collections.namedtuple() \u8fd9\u4e2a\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u8fd4\u56de Python \u4e2d\u6807\u51c6\u5143\u7ec4\u7c7b\u578b\u5b50\u7c7b\u7684\u4e00\u4e2a\u5de5\u5382\u65b9\u6cd5\u3002 \u4f20\u9012\u4e00\u4e2a\u7c7b\u578b\u540d\u548c\u4f60\u9700\u8981\u7684\u5b57\u6bb5\u7ed9\u5b83\uff0c\u7136\u540e\u5b83\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\uff0c\u53ef\u4ee5\u521d\u59cb\u5316\u8fd9\u4e2a\u7c7b\uff0c\u4e3a\u5b9a\u4e49\u7684\u5b57\u6bb5\u4f20\u9012\u503c\u7b49\u3002 >>> from collections import namedtuple >>> Subscriber = namedtuple('Subscriber', ['addr', 'joined']) >>> sub = Subscriber('jonesy@example.com', '2012-10-19') >>> sub Subscriber(addr='jonesy@example.com', joined='2012-10-19') >>> sub.addr 'jonesy@example.com' >>> sub.joined '2012-10-19' >>> \u5c3d\u7ba1 namedtuple \u7684\u5b9e\u4f8b\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u666e\u901a\u7684\u7c7b\u5b9e\u4f8b\uff0c\u4f46\u662f\u5b83\u8ddf\u5143\u7ec4\u7c7b\u578b\u662f\u53ef\u4ea4\u6362\u7684\uff0c\u652f\u6301\u6240\u6709\u7684\u666e\u901a\u5143\u7ec4\u64cd\u4f5c\uff0c\u6bd4\u5982\u7d22\u5f15\u548c\u89e3\u538b\u3002 \u6bd4\u5982\uff1a >>> len(sub) 2 >>> addr, joined = sub >>> addr 'jonesy@example.com' >>> joined '2012-10-19' >>> \u547d\u540d\u5143\u7ec4\u7684\u4e00\u4e2a\u4e3b\u8981\u7528\u9014\u662f\u5c06\u4ee3\u7801\u4ece\u4e0b\u6807\u64cd\u4f5c\u4e2d\u89e3\u8131\u51fa\u6765\u3002 \u56e0\u6b64\uff0c\u5728\u6570\u636e\u5e93\u8c03\u7528\u4e2d\u8fd4\u56de\u4e86\u4e00\u4e2a\u5f88\u5927\u7684\u5143\u7ec4\u5217\u8868\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u547d\u540d\u5143\u7ec4\u589e\u5220\u5c31\u4f1a\u5f88\u65b9\u4fbf\u3002 def compute_cost(records): total = 0.0 for rec in records: total += rec[1] * rec[2] return total \u4e0b\u6807\u64cd\u4f5c\u901a\u5e38\u4f1a\u8ba9\u4ee3\u7801\u8868\u610f\u4e0d\u6e05\u6670\uff0c\u5e76\u4e14\u975e\u5e38\u4f9d\u8d56\u8bb0\u5f55\u7684\u7ed3\u6784\u3002 \u4e0b\u9762\u662f\u4f7f\u7528\u547d\u540d\u5143\u7ec4\u7684\u7248\u672c\uff1a from collections import namedtuple Stock = namedtuple('Stock', ['name', 'shares', 'price']) def compute_cost(records): total = 0.0 for rec in records: s = Stock(*rec) total += s.shares * s.price return total \u547d\u540d\u5143\u7ec4\u53e6\u4e00\u4e2a\u7528\u9014\u5c31\u662f\u4f5c\u4e3a\u5b57\u5178\u7684\u66ff\u4ee3\uff0c\u56e0\u4e3a\u5b57\u5178\u5b58\u50a8\u9700\u8981\u66f4\u591a\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u5982\u679c\u9700\u8981\u6784\u5efa\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u5305\u542b\u5b57\u5178\u7684\u6570\u636e\u7ed3\u6784\uff0c\u90a3\u4e48\u4f7f\u7528\u547d\u540d\u5143\u7ec4\u4f1a\u66f4\u52a0\u9ad8\u6548\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u50cf\u5b57\u5178\u90a3\u6837\uff0c\u4e00\u4e2a\u547d\u540d\u5143\u7ec4\u662f\u4e0d\u53ef\u66f4\u6539\u7684\u3002\u6bd4\u5982\uff1a >>> s = Stock('ACME', 100, 123.45) >>> s Stock(name='ACME', shares=100, price=123.45) >>> s.shares = 75 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AttributeError: can't set attribute >>> \u5982\u679c\u771f\u7684\u9700\u8981\u6539\u53d8\u5c5e\u6027\u7684\u503c\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u547d\u540d\u5143\u7ec4\u5b9e\u4f8b\u7684 _replace() \u65b9\u6cd5\uff0c \u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u5168\u65b0\u7684\u547d\u540d\u5143\u7ec4\u5e76\u5c06\u5bf9\u5e94\u7684\u5b57\u6bb5\u7528\u65b0\u7684\u503c\u53d6\u4ee3\u3002\u6bd4\u5982\uff1a >>> s = s._replace(shares=75) >>> s Stock(name='ACME', shares=75, price=123.45) >>> ChainMap \u73b0\u5728\u6709\u591a\u4e2a\u5b57\u5178\u6216\u8005\u6620\u5c04\uff0c\u5c06\u5b83\u4eec\u4ece\u903b\u8f91\u4e0a\u5408\u5e76\u4e3a\u4e00\u4e2a\u5355\u4e00\u7684\u6620\u5c04\u540e\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u6bd4\u5982\u67e5\u627e\u503c\u6216\u8005\u68c0\u67e5\u67d0\u4e9b\u952e\u662f\u5426\u5b58\u5728\u3002 a = {'x': 1, 'z': 3 } b = {'y': 2, 'z': 4 } from collections import ChainMap c = ChainMap(a,b) print(c['x']) # Outputs 1 (from a) print(c['y']) # Outputs 2 (from b) print(c['z']) # Outputs 3 (from a) \u4e00\u4e2a ChainMap \u63a5\u53d7\u591a\u4e2a\u5b57\u5178\u5e76\u5c06\u5b83\u4eec\u5728\u903b\u8f91\u4e0a\u53d8\u4e3a\u4e00\u4e2a\u5b57\u5178\u3002 \u7136\u540e\uff0c\u8fd9\u4e9b\u5b57\u5178\u5e76\u4e0d\u662f\u771f\u7684\u5408\u5e76\u5728\u4e00\u8d77\u4e86\uff0c ChainMap \u7c7b\u53ea\u662f\u5728\u5185\u90e8\u521b\u5efa\u4e86\u4e00\u4e2a\u5bb9\u7eb3\u8fd9\u4e9b\u5b57\u5178\u7684\u5217\u8868 \u5e76\u91cd\u65b0\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u5b57\u5178\u64cd\u4f5c\u6765\u904d\u5386\u8fd9\u4e2a\u5217\u8868\u3002\u5927\u90e8\u5206\u5b57\u5178\u64cd\u4f5c\u90fd\u662f\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u3002 \u4e0e update() \u4e0d\u540c\u7684\u662f\uff1a\u4f7f\u7528 update \u5982\u679c\u539f\u5b57\u5178\u505a\u4e86\u66f4\u65b0\uff0c\u8fd9\u79cd\u6539\u53d8\u4e0d\u4f1a\u53cd\u5e94\u5230\u65b0\u7684\u5408\u5e76\u5b57\u5178\u4e2d\u53bb\u3002 ChainMap \u4f7f\u7528\u539f\u6765\u7684\u5b57\u5178\uff0c\u5b83\u81ea\u5df1\u4e0d\u521b\u5efa\u65b0\u7684\u5b57\u5178\uff0c\u6240\u4ee5\u4f1a\u968f\u4e4b\u6539\u53d8\u3002 heapq \u6a21\u5757 \u4ece\u4e00\u4e2a\u96c6\u5408\u4e2d\u83b7\u5f97\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684 N \u4e2a\u5143\u7d20\u5217\u8868\u3002 heapq \u6a21\u5757\u6709\u4e24\u4e2a\u51fd\u6570\uff1a nlargest() \u548c nsmallest() \u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 import heapq nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2] print(heapq.nlargest(3, nums)) # Prints [42, 37, 23] print(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2] \u5728\u5e95\u5c42\u5b9e\u73b0\u91cc\u9762\uff0c\u9996\u5148\u4f1a\u5148\u5c06\u96c6\u5408\u6570\u636e\u8fdb\u884c\u5806\u6392\u5e8f\u540e\u653e\u5165\u4e00\u4e2a\u5217\u8868\u4e2d\u3002 \u5806\u6570\u636e\u7ed3\u6784\u6700\u91cd\u8981\u7684\u7279\u5f81\u662f heap[0] \u6c38\u8fdc\u662f\u6700\u5c0f\u7684\u5143\u7d20\u3002\u5e76\u4e14\u5269\u4f59\u7684\u5143\u7d20\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u8c03\u7528 heapq.heappop() \u65b9\u6cd5\u5f97\u5230\uff0c \u8be5\u65b9\u6cd5\u4f1a\u5148\u5c06\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f39\u51fa\u6765\uff0c\u7136\u540e\u7528\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u6765\u53d6\u4ee3\u88ab\u5f39\u51fa\u5143\u7d20\uff08\u8fd9\u79cd\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4ec5\u4ec5\u662f O(log N) \uff0c N \u662f\u5806\u5927\u5c0f\uff09\u3002 >>> nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2] >>> import heapq >>> heap = list(nums) >>> heapq.heapify(heap) >>> heap [-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8] >>> \u5f53\u8981\u67e5\u627e\u7684\u5143\u7d20\u4e2a\u6570\u76f8\u5bf9\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c\u51fd\u6570 nlargest() \u548c nsmallest() \u662f\u5f88\u5408\u9002\u7684\u3002 \u5982\u679c\u4f60\u4ec5\u4ec5\u60f3\u67e5\u627e\u552f\u4e00\u7684\u6700\u5c0f\u6216\u6700\u5927\uff08N=1\uff09\u7684\u5143\u7d20\u7684\u8bdd\uff0c\u90a3\u4e48\u4f7f\u7528 min() \u548c max() \u51fd\u6570\u4f1a\u66f4\u5feb\u4e9b\u3002 \u7c7b\u4f3c\u7684\uff0c\u5982\u679c N \u7684\u5927\u5c0f\u548c\u96c6\u5408\u5927\u5c0f\u63a5\u8fd1\u7684\u65f6\u5019\uff0c\u901a\u5e38\u5148\u6392\u5e8f\u8fd9\u4e2a\u96c6\u5408\u7136\u540e\u518d\u4f7f\u7528\u5207\u7247\u64cd\u4f5c\u4f1a\u66f4\u5feb\u70b9 \uff08 sorted(items)[:N] \u6216\u8005\u662f sorted(items)[-N:] \uff09\u3002 \u9700\u8981\u5728\u6b63\u786e\u573a\u5408\u4f7f\u7528\u51fd\u6570 nlargest() \u548c nsmallest() \u624d\u80fd\u53d1\u6325\u5b83\u4eec\u7684\u4f18\u52bf \uff08\u5982\u679c N \u5feb\u63a5\u8fd1\u96c6\u5408\u5927\u5c0f\u4e86\uff0c\u90a3\u4e48\u4f7f\u7528\u6392\u5e8f\u64cd\u4f5c\u4f1a\u66f4\u597d\u4e9b\uff09\u3002 \u987a\u5e8f\u8fed\u4ee3\u5408\u5e76\u540e\u7684\u6392\u5e8f\u8fed\u4ee3\u5bf9\u8c61 \u6709\u4e00\u7cfb\u5217\u6392\u5e8f\u5e8f\u5217\uff0c\u60f3\u5c06\u5b83\u4eec\u5408\u5e76\u540e\u5f97\u5230\u4e00\u4e2a\u6392\u5e8f\u5e8f\u5217\u5e76\u5728\u4e0a\u9762\u8fed\u4ee3\u904d\u5386\u3002 >>> import heapq >>> a = [1, 4, 7, 10] >>> b = [2, 5, 6, 11] >>> for c in heapq.merge(a, b): ... print(c) ... 1 2 4 5 6 7 10 11 heapq.merge() \u9700\u8981\u6240\u6709\u8f93\u5165\u5e8f\u5217\u5fc5\u987b\u662f\u6392\u8fc7\u5e8f\u7684\u3002 \u7279\u522b\u7684\uff0c\u5b83\u5e76\u4e0d\u4f1a\u9884\u5148\u8bfb\u53d6\u6240\u6709\u6570\u636e\u5230\u5806\u6808\u4e2d\u6216\u8005\u9884\u5148\u6392\u5e8f\uff0c\u4e5f\u4e0d\u4f1a\u5bf9\u8f93\u5165\u505a\u4efb\u4f55\u7684\u6392\u5e8f\u68c0\u6d4b\u3002\u5b83\u4ec5\u4ec5\u662f\u68c0\u67e5\u6240\u6709\u5e8f\u5217\u7684\u5f00\u59cb\u90e8\u5206\u5e76\u8fd4\u56de\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e00\u76f4\u4f1a\u6301\u7eed\u76f4\u5230\u6240\u6709\u8f93\u5165\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u90fd\u88ab\u904d\u5386\u5b8c\u3002 operator \u6a21\u5757 itemgetter() \u6839\u636e\u67d0\u4e2a\u6216\u67d0\u51e0\u4e2a\u5b57\u5178\u5b57\u6bb5\u6765\u6392\u5e8f\u8fd9\u4e2a\u5217\u8868\uff0c\u901a\u8fc7\u4f7f\u7528 operator \u6a21\u5757\u7684 itemgetter \u51fd\u6570\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u7684\u6392\u5e8f\u8fd9\u6837\u7684\u6570\u636e\u7ed3\u6784\uff1a rows = [ {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004} ] from operator import itemgetter rows_by_fname = sorted(rows, key=itemgetter('fname')) rows_by_uid = sorted(rows, key=itemgetter('uid')) itemgetter() \u6709\u65f6\u5019\u4e5f\u53ef\u4ee5\u7528 lambda \u8868\u8fbe\u5f0f\u4ee3\u66ff\uff0c\u6bd4\u5982\uff1a rows_by_fname = sorted(rows, key=lambda r: r['fname']) rows_by_lfname = sorted(rows, key=lambda r: (r['lname'],r['fname'])) \u4f7f\u7528 itemgetter() \u65b9\u5f0f\u4f1a\u8fd0\u884c\u7684\u7a0d\u5fae\u5feb\u70b9\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u5bf9\u6027\u80fd\u8981\u6c42\u6bd4\u8f83\u9ad8\u7684\u8bdd\u5c31\u4f7f\u7528 itemgetter() \u65b9\u5f0f\u3002 >>> min(rows, key=itemgetter('uid')) {'fname': 'John', 'lname': 'Cleese', 'uid': 1001} >>> max(rows, key=itemgetter('uid')) {'fname': 'Big', 'lname': 'Jones', 'uid': 1004} >>> attrgetter() \u6392\u5e8f\u7c7b\u578b\u76f8\u540c\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u4ed6\u4eec\u4e0d\u652f\u6301\u539f\u751f\u7684\u6bd4\u8f83\u64cd\u4f5c\u3002 \u5185\u7f6e\u7684 sorted() \u51fd\u6570\u6709\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570 key \uff0c\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a callable \u5bf9\u8c61\u7ed9\u5b83\uff0c \u8fd9\u4e2a callable \u5bf9\u8c61\u5bf9\u6bcf\u4e2a\u4f20\u5165\u7684\u5bf9\u8c61\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u4f1a\u88ab sorted \u7528\u6765\u6392\u5e8f\u8fd9\u4e9b\u5bf9\u8c61\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u4f60\u5728\u5e94\u7528\u7a0b\u5e8f\u91cc\u9762\u6709\u4e00\u4e2a User \u5b9e\u4f8b\u5e8f\u5217\uff0c\u5e76\u4e14\u4f60\u5e0c\u671b\u901a\u8fc7\u4ed6\u4eec\u7684 user_id \u5c5e\u6027\u8fdb\u884c\u6392\u5e8f\uff0c \u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u4ee5 User \u5b9e\u4f8b\u4f5c\u4e3a\u8f93\u5165\u5e76\u8f93\u51fa\u5bf9\u5e94 user_id \u503c\u7684 callable \u5bf9\u8c61\u3002 class User: def __init__(self, user_id): self.user_id = user_id def __repr__(self): return 'User({})'.format(self.user_id) sorted(users, key=lambda u: u.user_id) # [User(3), User(23), User(99)] from operator import attrgetter sorted(users, key=attrgetter('user_id')) # [User(3), User(23), User(99)] itertools \u6a21\u5757 islice() \u7528\u4e8e \u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668 \u4e0a\u7684\u5207\u7247\u64cd\u4f5c\u3002 dropwhile() \u7528\u4e8e\u4e22\u5f03\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u524d\u9762\u7684\u5143\u7d20\u3002 permutations()/combinations()/combinations_with_replacement() \u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\uff08\u8fed\u4ee3\u904d\u5386\u4e00\u4e2a\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6240\u6709\u53ef\u80fd\u7684\u6392\u5217\u6216\u7ec4\u5408\uff09\u3002 zip_longest() \u540c\u65f6\u8fed\u4ee3\u591a\u4e2a\u5e8f\u5217\uff0c\u5e76\u4e14\u5bf9\u5176\u957f\u5ea6\u3002 chain() \u5408\u5e76\u591a\u4e2a\u96c6\u5408\uff0c\u521b\u5efa\u8fed\u4ee3\u5668\u3002 groupby() \u6709\u4e00\u4e2a\u5b57\u5178\u6216\u8005\u5b9e\u4f8b\u7684\u5e8f\u5217\uff0c\u7136\u540e\u4f60\u60f3\u6839\u636e\u67d0\u4e2a\u7279\u5b9a\u7684\u5b57\u6bb5\u6bd4\u5982 date \u6765\u5206\u7ec4\u8fed\u4ee3\u8bbf\u95ee\u3002 itertools.groupby() \u51fd\u6570\u5bf9\u4e8e\u8fd9\u6837\u7684\u6570\u636e\u5206\u7ec4\u64cd\u4f5c\u975e\u5e38\u5b9e\u7528\u3002 rows = [ {'address': '5412 N CLARK', 'date': '07/01/2012'}, {'address': '5148 N CLARK', 'date': '07/04/2012'}, {'address': '5800 E 58TH', 'date': '07/02/2012'}, {'address': '2122 N CLARK', 'date': '07/03/2012'}, {'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'}, {'address': '1060 W ADDISON', 'date': '07/02/2012'}, {'address': '4801 N BROADWAY', 'date': '07/01/2012'}, {'address': '1039 W GRANVILLE', 'date': '07/04/2012'}, ] from operator import itemgetter from itertools import groupby # Sort by the desired field first rows.sort(key=itemgetter('date')) # Iterate in groups for date, items in groupby(rows, key=itemgetter('date')): print(date) for i in items: print(' ', i) \u8fd0\u884c\u7ed3\u679c\uff1a 07/01/2012 {'date': '07/01/2012', 'address': '5412 N CLARK'} {'date': '07/01/2012', 'address': '4801 N BROADWAY'} 07/02/2012 {'date': '07/02/2012', 'address': '5800 E 58TH'} {'date': '07/02/2012', 'address': '5645 N RAVENSWOOD'} {'date': '07/02/2012', 'address': '1060 W ADDISON'} 07/03/2012 {'date': '07/03/2012', 'address': '2122 N CLARK'} 07/04/2012 {'date': '07/04/2012', 'address': '5148 N CLARK'} {'date': '07/04/2012', 'address': '1039 W GRANVILLE'} compress() \u5b83\u4ee5\u4e00\u4e2a iterable \u5bf9\u8c61\u548c\u4e00\u4e2a\u76f8\u5bf9\u5e94\u7684 Boolean \u9009\u62e9\u5668\u5e8f\u5217\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002 \u7136\u540e\u8f93\u51fa iterable \u5bf9\u8c61\u4e2d\u5bf9\u5e94\u9009\u62e9\u5668\u4e3a True \u7684\u5143\u7d20\u3002 \u5f53\u9700\u8981\u7528\u53e6\u5916\u4e00\u4e2a\u76f8\u5173\u8054\u7684\u5e8f\u5217\u6765\u8fc7\u6ee4\u67d0\u4e2a\u5e8f\u5217\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u975e\u5e38\u6709\u7528\u7684\u3002 \u6bd4\u5982\uff1a addresses = [ '5412 N CLARK', '5148 N CLARK', '5800 E 58TH', '2122 N CLARK', '5645 N RAVENSWOOD', '1060 W ADDISON', '4801 N BROADWAY', '1039 W GRANVILLE', ] counts = [ 0, 3, 10, 4, 1, 7, 6, 1] \u5c06\u90a3\u4e9b\u5bf9\u5e94 count \u503c\u5927\u4e8e5\u7684\u5730\u5740\u5168\u90e8\u8f93\u51fa\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a >>> from itertools import compress >>> more5 = [n > 5 for n in counts] >>> more5 [False, False, True, False, False, True, True, False] >>> list(compress(addresses, more5)) ['5800 E 58TH', '1060 W ADDISON', '4801 N BROADWAY'] >>> \u8fd9\u91cc\u7684\u5173\u952e\u70b9\u5728\u4e8e\u5148\u521b\u5efa\u4e00\u4e2a Boolean \u5e8f\u5217\uff0c\u6307\u793a\u54ea\u4e9b\u5143\u7d20\u7b26\u5408\u6761\u4ef6\u3002 \u7136\u540e compress() \u51fd\u6570\u6839\u636e\u8fd9\u4e2a\u5e8f\u5217\u53bb\u9009\u62e9\u8f93\u51fa\u5bf9\u5e94\u4f4d\u7f6e\u4e3a True \u7684\u5143\u7d20\u3002 \u548c filter() \u51fd\u6570\u7c7b\u4f3c\uff0c compress() \u4e5f\u662f\u8fd4\u56de\u7684\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u9700\u8981\u5f97\u5230\u4e00\u4e2a\u5217\u8868\uff0c \u90a3\u4e48\u4f60\u9700\u8981\u4f7f\u7528 list() \u6765\u5c06\u7ed3\u679c\u8f6c\u6362\u4e3a\u5217\u8868\u7c7b\u578b\u3002 logging \u6a21\u5757 time \u6a21\u5757 import time # \u5f53\u524d\u65f6\u95f4\u6233\uff08\u79d2\uff09 ts = time.time() print(\"\u5f53\u524d\u65f6\u95f4\u6233:\", ts, type(ts)) # \u8f93\u51fa\u793a\u4f8b: 1681440000.123456 <class 'float'> # \u65f6\u95f4\u6233 -> \u672c\u5730\u65f6\u95f4\u5143\u7ec4 local = time.localtime(ts) print(\"\u672c\u5730\u65f6\u95f4\u5143\u7ec4:\", local, type(local)) # time.struct_time(tm_year=..., ...) <class 'time.struct_time'> # \u65f6\u95f4\u5143\u7ec4 -> \u5b57\u7b26\u4e32 str_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", local) print(\"\u683c\u5f0f\u5316\u65f6\u95f4\u5b57\u7b26\u4e32:\", str_time, type(str_time)) # '2025-04-10 15:30:45' <class 'str'> # \u5b57\u7b26\u4e32 -> \u65f6\u95f4\u5143\u7ec4 parsed = time.strptime(\"2025-01-01 12:00:00\", \"%Y-%m-%d %H:%M:%S\") print(\"\u89e3\u6790\u540e\u7684\u65f6\u95f4\u5143\u7ec4:\", parsed, type(parsed)) # time.struct_time(tm_year=2025, ...) <class 'time.struct_time'> # \u65f6\u95f4\u5143\u7ec4 -> \u65f6\u95f4\u6233 ts_from_struct = time.mktime(parsed) print(\"\u4ece\u7ed3\u6784\u4f53\u5f97\u5230\u65f6\u95f4\u6233:\", ts_from_struct, type(ts_from_struct)) # 1735723200.0 <class 'float'> datetime \u6a21\u5757 from datetime import datetime, timedelta # \u5f53\u524d\u65f6\u95f4 now = datetime.now() print(\"\u5f53\u524d datetime:\", now, type(now)) # 2025-04-10 15:30:45.123456 <class 'datetime.datetime'> # \u81ea\u5b9a\u4e49\u65f6\u95f4 d = datetime(2024, 12, 31, 23, 59, 59) print(\"\u81ea\u5b9a\u4e49 datetime:\", d, type(d)) # 2024-12-31 23:59:59 <class 'datetime.datetime'> # datetime -> \u5b57\u7b26\u4e32 formatted = d.strftime(\"%Y/%m/%d %H:%M\") print(\"\u683c\u5f0f\u5316:\", formatted, type(formatted)) # '2024/12/31 23:59' <class 'str'> # \u5b57\u7b26\u4e32 -> datetime parsed_dt = datetime.strptime(\"2025-03-15 08:30\", \"%Y-%m-%d %H:%M\") print(\"\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a datetime:\", parsed_dt, type(parsed_dt)) # 2025-03-15 08:30:00 <class 'datetime.datetime'> # \u83b7\u53d6\u65f6\u95f4\u5dee delta = now - parsed_dt print(\"\u65f6\u95f4\u5dee:\", delta, type(delta)) # datetime.timedelta(days=..., seconds=...) <class 'datetime.timedelta'> print(\"\u5dee\u591a\u5c11\u5929:\", delta.days, type(delta.days)) # 26 <class 'int'> print(\"\u5dee\u591a\u5c11\u79d2:\", delta.total_seconds(), type(delta.total_seconds())) # 2276400.0 <class 'float'> # \u52a0\u51cf\u65f6\u95f4 future = now + timedelta(days=7) print(\"7\u5929\u540e:\", future, type(future)) # <class 'datetime.datetime'> past = now - timedelta(hours=3) print(\"3\u5c0f\u65f6\u524d:\", past, type(past)) # <class 'datetime.datetime'> # datetime -> \u65f6\u95f4\u6233 timestamp = now.timestamp() print(\"\u5f53\u524d datetime \u8f6c\u65f6\u95f4\u6233:\", timestamp, type(timestamp)) # 1681440000.0 <class 'float'> # \u65f6\u95f4\u6233 -> datetime from_ts = datetime.fromtimestamp(timestamp) print(\"\u65f6\u95f4\u6233\u8f6c datetime:\", from_ts, type(from_ts)) # <class 'datetime.datetime'> # ISO \u683c\u5f0f\u65f6\u95f4\uff08\u6807\u51c6\u683c\u5f0f\uff09 iso_str = now.isoformat() print(\"ISO \u683c\u5f0f:\", iso_str, type(iso_str)) # '2025-04-10T15:30:45.123456' <class 'str'> # \u83b7\u53d6\u5f53\u524d UTC \u65f6\u95f4 utc_now = datetime.utcnow() print(\"\u5f53\u524d UTC \u65f6\u95f4:\", utc_now, type(utc_now)) # <class 'datetime.datetime'> # \u66ff\u6362 datetime \u4e2d\u7684\u90e8\u5206\u503c new_time = now.replace(hour=0, minute=0) print(\"\u66ff\u6362\u540e\u7684\u65f6\u95f4:\", new_time, type(new_time)) # <class 'datetime.datetime'> \u5185\u5bb9 \u793a\u4f8b\u8f93\u51fa\u7c7b\u578b \u65f6\u95f4\u6233 <class 'float'> \u65f6\u95f4\u5143\u7ec4 <class 'time.struct_time'> \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u65f6\u95f4 <class 'str'> datetime \u5bf9\u8c61 <class 'datetime.datetime'> \u65f6\u95f4\u5dee\u5bf9\u8c61 <class 'datetime.timedelta'> total_seconds() <class 'float'> days \u5c5e\u6027 <class 'int'> time \u548c datetime \u5bf9\u6bd4 \u529f\u80fd time \u6a21\u5757 datetime \u6a21\u5757 \u65f6\u95f4\u6233\u64cd\u4f5c \u2705 time.time() \u2705 datetime.timestamp() \u5b57\u7b26\u4e32\u683c\u5f0f\u5316 \u2705 strftime / strptime \u2705 \u540c\u6837\u652f\u6301 \u65f6\u95f4\u5dee\u8ba1\u7b97 \u274c\uff08\u9700\u624b\u52a8\u8ba1\u7b97\uff09 \u2705 datetime - datetime \u52a0\u51cf\u65f6\u95f4 \u274c\uff08\u9700\u8981\u5c01\u88c5\uff09 \u2705 \u4f7f\u7528 timedelta \u53ef\u8bfb\u6027 & OOP \u8f83\u5e95\u5c42 \u66f4\u76f4\u89c2\u3001\u66f4\u5f3a\u5927 pytz \u6a21\u5757 \u5bf9\u51e0\u4e4e\u6240\u6709\u6d89\u53ca\u5230\u65f6\u533a\u7684\u95ee\u9898\uff0c\u90fd\u5e94\u8be5\u4f7f\u7528 pytz \u6a21\u5757\u3002\u8fd9\u4e2a\u5305\u63d0\u4f9b\u4e86Olson\u65f6\u533a\u6570\u636e\u5e93\uff0c \u5b83\u662f\u65f6\u533a\u4fe1\u606f\u7684\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\uff0c\u5728\u5f88\u591a\u8bed\u8a00\u548c\u64cd\u4f5c\u7cfb\u7edf\u91cc\u9762\u90fd\u53ef\u4ee5\u627e\u5230\u3002 pytz \u6a21\u5757\u4e00\u4e2a\u4e3b\u8981\u7528\u9014\u662f\u5c06 datetime \u5e93\u521b\u5efa\u7684\u7b80\u5355\u65e5\u671f\u5bf9\u8c61\u672c\u5730\u5316\u3002 \u6bd4\u5982\uff0c\u4e0b\u9762\u5982\u4f55\u8868\u793a\u4e00\u4e2a\u829d\u52a0\u54e5\u65f6\u95f4\u7684\u793a\u4f8b\uff1a >>> from datetime import datetime >>> from pytz import timezone >>> d = datetime(2012, 12, 21, 9, 30, 0) >>> print(d) 2012-12-21 09:30:00 >>> >>> # Localize the date for Chicago >>> central = timezone('US/Central') >>> loc_d = central.localize(d) >>> print(loc_d) 2012-12-21 09:30:00-06:00 >>> os \u6a21\u5757 \u516b\u8fdb\u5236 >>> import os >>> os.chmod('script.py', 0755) File \"<stdin>\", line 1 os.chmod('script.py', 0755) ^ SyntaxError: invalid token >>> # \u9700\u786e\u4fdd\u516b\u8fdb\u5236\u6570\u7684\u524d\u7f00\u662f 0o >>> os.chmod('script.py', 0o755) >>> operator \u6a21\u5757 math \u6a21\u5757 \u6570\u5b66\u51fd\u6570 import math print(f\"math.ceil(3.2) = {math.ceil(3.2)}\") # \u8f93\u51fa: math.ceil(3.2) = 4 (\u5411\u4e0a\u53d6\u6574) print(f\"math.floor(3.8) = {math.floor(3.8)}\") # \u8f93\u51fa: math.floor(3.8) = 3 (\u5411\u4e0b\u53d6\u6574) print(f\"math.trunc(-3.7) = {math.trunc(-3.7)}\") # \u8f93\u51fa: math.trunc(-3.7) = -3 (\u622a\u65ad\u5c0f\u6570\u90e8\u5206) decimal \u6a21\u5757 \u7cbe\u786e\u8ba1\u7b97\u6d6e\u70b9\u6570\uff08\u5e76\u80fd\u5bb9\u5fcd\u4e00\u5b9a\u7684\u6027\u80fd\u635f\u8017\uff09\u3002 decimal \u6a21\u5757\u4e3b\u8981\u7528\u5728\u6d89\u53ca\u5230\u91d1\u878d\u7684\u9886\u57df\u3002 \u5728\u8fd9\u7c7b\u7a0b\u5e8f\u4e2d\uff0c\u54ea\u6015\u662f\u4e00\u70b9\u5c0f\u5c0f\u7684\u8bef\u5dee\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u8513\u5ef6\u90fd\u662f\u4e0d\u5141\u8bb8\u7684\u3002 \u56e0\u6b64\uff0c decimal \u6a21\u5757\u4e3a\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u63d0\u4f9b\u4e86\u65b9\u6cd5\u3002 \u5f53Python\u548c\u6570\u636e\u5e93\u6253\u4ea4\u9053\u7684\u65f6\u5019\u4e5f\u901a\u5e38\u4f1a\u9047\u5230 Decimal \u5bf9\u8c61\uff0c\u5e76\u4e14\uff0c\u901a\u5e38\u4e5f\u662f\u5728\u5904\u7406\u91d1\u878d\u6570\u636e\u7684\u65f6\u5019\u3002 >>> from decimal import Decimal >>> a = Decimal('4.2') >>> b = Decimal('2.1') >>> a + b Decimal('6.3') >>> print(a + b) 6.3 >>> (a + b) == Decimal('6.3') True fractions \u6a21\u5757 fractions \u6a21\u5757\u53ef\u4ee5\u88ab\u7528\u6765\u6267\u884c\u5305\u542b\u5206\u6570\u7684\u6570\u5b66\u8fd0\u7b97\u3002\u6bd4\u5982\uff1a >>> from fractions import Fraction >>> a = Fraction(5, 4) >>> b = Fraction(7, 16) >>> print(a + b) 27/16 >>> print(a * b) 35/64 >>> # Getting numerator/denominator >>> c = a * b >>> c.numerator 35 >>> c.denominator 64 >>> # Converting to a float >>> float(c) 0.546875 >>> # Limiting the denominator of a value >>> print(c.limit_denominator(8)) 4/7 >>> # Converting a float to a fraction >>> x = 3.75 >>> y = Fraction(*x.as_integer_ratio()) >>> y Fraction(15, 4) >>> random \u6a21\u5757 random \u6a21\u5757\u6709\u5927\u91cf\u7684\u51fd\u6570\u7528\u6765\u4ea7\u751f\u968f\u673a\u6570\u548c\u968f\u673a\u9009\u62e9\u5143\u7d20\u3002 \u6bd4\u5982\uff0c\u8981\u60f3\u4ece\u4e00\u4e2a\u5e8f\u5217\u4e2d\u968f\u673a\u7684\u62bd\u53d6\u4e00\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528 random.choice() \uff1a >>> import random >>> values = [1, 2, 3, 4, 5, 6] >>> random.choice(values) 2 >>> random.choice(values) 3 >>> random.choice(values) 1 >>> random.choice(values) 4 >>> random.choice(values) 6 >>> \u4e3a\u4e86\u63d0\u53d6\u51faN\u4e2a\u4e0d\u540c\u5143\u7d20\u7684\u6837\u672c\u7528\u6765\u505a\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528 random.sample() \uff1a >>> random.sample(values, 2) [6, 2] >>> random.sample(values, 2) [4, 3] >>> random.sample(values, 3) [4, 3, 1] >>> random.sample(values, 3) [5, 4, 1] >>> \u6253\u4e71\u5e8f\u5217\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 random.shuffle() \uff1a >>> random.shuffle(values) >>> values [2, 4, 6, 5, 3, 1] >>> random.shuffle(values) >>> values [3, 5, 2, 1, 6, 4] >>> \u751f\u6210\u968f\u673a\u6574\u6570\uff0c\u8bf7\u4f7f\u7528 random.randint() \uff1a >>> random.randint(0,10) 2 >>> random.randint(0,10) 5 >>> random.randint(0,10) 0 >>> random.randint(0,10) 7 >>> random.randint(0,10) 10 >>> random.randint(0,10) 3 >>> \u4e3a\u4e86\u751f\u62100\u52301\u8303\u56f4\u5185\u5747\u5300\u5206\u5e03\u7684\u6d6e\u70b9\u6570\uff0c\u4f7f\u7528 random.random() \uff1a >>> random.random() 0.9406677561675867 >>> random.random() 0.133129581343897 >>> random.random() 0.4144991136919316 >>> \u5982\u679c\u8981\u83b7\u53d6N\u4f4d\u968f\u673a\u4f4d(\u4e8c\u8fdb\u5236)\u7684\u6574\u6570\uff0c\u4f7f\u7528 random.getrandbits() \uff1a >>> random.getrandbits(200) 335837000776573622800628485064121869519521710558559406913275 >>> struct \u6a21\u5757 hashlib \u6a21\u5757 statistics \u6a21\u5757","title":"\u5e38\u7528\u5185\u7f6e\u5e93"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#_1","text":"","title":""},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#re","text":"","title":"re \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#_2","text":"\u6700\u77ed\u5339\u914d\u6a21\u5f0f\uff08\u975e\u8d2a\u5a6a\uff09 \u591a\u884c\u5339\u914d\uff08 re.compile(r'/\\*(.*?)\\*/', re.DOTALL) \u6216\u8005 (?:.|\\n) \u6307\u5b9a\u4e00\u4e2a\u975e\u6355\u83b7\u7ec4\uff09","title":"\u6b63\u5219"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#_3","text":"\u5982\u679c\u60f3\u5339\u914d\u7684\u662f\u5b57\u9762\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u901a\u5e38\u53ea\u9700\u8981\u8c03\u7528\u57fa\u672c\u5b57\u7b26\u4e32\u65b9\u6cd5\u5c31\u884c\uff0c \u6bd4\u5982 str.find() , str.endswith() , str.startswith() \u3002 \u590d\u6742\u7684\u5339\u914d\u9700\u8981\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u548c re \u6a21\u5757\u3002 >>> text1 = '11/27/2012' >>> text2 = 'Nov 27, 2012' >>> >>> import re >>> # Simple matching: \\d+ means match one or more digits >>> if re.match(r'\\d+/\\d+/\\d+', text1): ... print('yes') ... else: ... print('no') ... \u5982\u679c\u60f3\u4f7f\u7528\u540c\u4e00\u4e2a\u6a21\u5f0f\u53bb\u505a\u591a\u6b21\u5339\u914d\uff0c\u4f60\u5e94\u8be5\u5148\u5c06\u6a21\u5f0f\u5b57\u7b26\u4e32\u9884\u7f16\u8bd1\u4e3a\u6a21\u5f0f\u5bf9\u8c61\u3002\u6bd4\u5982\uff1a >>> datepat = re.compile(r'\\d+/\\d+/\\d+') >>> if datepat.match(text1): ... print('yes') ... else: ... print('no') ... match() \u603b\u662f\u4ece\u5b57\u7b26\u4e32\u5f00\u59cb\u53bb\u5339\u914d\uff0c\u5982\u679c\u4f60\u60f3\u67e5\u627e\u5b57\u7b26\u4e32\u4efb\u610f\u90e8\u5206\u7684\u6a21\u5f0f\u51fa\u73b0\u4f4d\u7f6e\uff0c \u4f7f\u7528 findall() \u65b9\u6cd5\u53bb\u4ee3\u66ff\u3002 \u5728\u5b9a\u4e49\u6b63\u5219\u5f0f\u7684\u65f6\u5019\uff0c\u901a\u5e38\u4f1a\u5229\u7528\u62ec\u53f7\u53bb\u6355\u83b7\u5206\u7ec4\u3002 >>> datepat = re.compile(r'(\\d+)/(\\d+)/(\\d+)') >>> text 'Today is 11/27/2012. PyCon starts 3/13/2013.' >>> datepat.findall(text) [('11', '27', '2012'), ('3', '13', '2013')] >>> for month, day, year in datepat.findall(text): ... print('{}-{}-{}'.format(year, month, day)) ... 2012-11-27 2013-3-13 >>> findall() \u65b9\u6cd5\u4f1a\u641c\u7d22\u6587\u672c\u5e76\u4ee5\u5217\u8868\u5f62\u5f0f\u8fd4\u56de\u6240\u6709\u7684\u5339\u914d\u3002 \u5982\u679c\u60f3\u4ee5\u8fed\u4ee3\u65b9\u5f0f\u8fd4\u56de\u5339\u914d\uff0c\u53ef\u4ee5\u4f7f\u7528 finditer() \u65b9\u6cd5\u6765\u4ee3\u66ff\uff0c\u6bd4\u5982\uff1a >>> for m in datepat.finditer(text): ... print(m.groups()) ... ('11', '27', '2012') ('3', '13', '2013') >>>","title":"\u67e5\u627e"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#_4","text":"\u5bf9\u4e8e\u7b80\u5355\u7684\u5b57\u9762\u6a21\u5f0f\uff0c\u76f4\u63a5\u4f7f\u7528 str.replace() \u65b9\u6cd5\u5373\u53ef\uff0c\u5bf9\u4e8e\u590d\u6742\u7684\u6a21\u5f0f\uff0c\u4f7f\u7528 re \u6a21\u5757\u4e2d\u7684 sub() \u51fd\u6570\u3002 >>> text = 'UPPER PYTHON, lower python, Mixed Python' >>> re.findall('python', text, flags=re.IGNORECASE) ['PYTHON', 'python', 'Python'] >>> re.sub('python', 'snake', text, flags=re.IGNORECASE) 'UPPER snake, lower snake, Mixed snake' >>> \u4e0a\u9762\u4f8b\u5b50\u6709\u4e2a\u7f3a\u9677\uff0c\u66ff\u6362\u5b57\u7b26\u4e32\u5e76\u4e0d\u4f1a\u81ea\u52a8\u8ddf\u88ab\u5339\u914d\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\u5199\u4fdd\u6301\u4e00\u81f4\u3002 def matchcase(word): def replace(m): text = m.group() if text.isupper(): return word.upper() elif text.islower(): return word.lower() elif text[0].isupper(): return word.capitalize() else: return word return replace >>> re.sub('python', matchcase('snake'), text, flags=re.IGNORECASE) 'UPPER SNAKE, lower snake, Mixed Snake' >>> matchcase('snake') \u8fd4\u56de\u4e86\u4e00\u4e2a\u56de\u8c03\u51fd\u6570(\u53c2\u6570\u5fc5\u987b\u662f match \u5bf9\u8c61)\uff0c\u524d\u9762\u4e00\u8282\u63d0\u5230\u8fc7\uff0c sub() \u51fd\u6570\u9664\u4e86\u63a5\u53d7\u66ff\u6362\u5b57\u7b26\u4e32\u5916\uff0c\u8fd8\u80fd\u63a5\u53d7\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u3002 \u5bf9\u4e8e\u4e00\u822c\u7684\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u5339\u914d\u64cd\u4f5c\uff0c\u7b80\u5355\u7684\u4f20\u9012\u4e00\u4e2a re.IGNORECASE \u6807\u5fd7\u53c2\u6570\u5c31\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u5bf9\u4e8e\u67d0\u4e9b\u9700\u8981\u5927\u5c0f\u5199\u8f6c\u6362\u7684 Unicode \u5339\u914d\u53ef\u80fd\u8fd8\u4e0d\u591f\u3002","title":"\u66ff\u6362"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#unicode","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b re \u6a21\u5757\u5df2\u7ecf\u5bf9\u4e00\u4e9b Unicode \u5b57\u7b26\u7c7b\u6709\u4e86\u57fa\u672c\u7684\u652f\u6301\u3002 \u6bd4\u5982\uff0c \\\\d \u5df2\u7ecf\u5339\u914d\u4efb\u610f\u7684 unicode \u6570\u5b57\u5b57\u7b26\u4e86\u3002 >>> import re >>> num = re.compile('\\d+') >>> # ASCII digits >>> num.match('123') <_sre.SRE_Match object at 0x1007d9ed0> >>> # Arabic digits >>> num.match('\\u0661\\u0662\\u0663') <_sre.SRE_Match object at 0x101234030> >>> \u6df7\u5408\u4f7f\u7528Unicode\u548c\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6700\u597d\u8fd8\u662f\u4f7f\u7528\u589e\u5f3a\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u6bd4\u5982\uff1a regex","title":"\u5728\u6b63\u5219\u5f0f\u4e2d\u4f7f\u7528 Unicode"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#_5","text":"\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u60f3\u4ece\u5de6\u81f3\u53f3\u5c06\u5176\u89e3\u6790\u4e3a\u4e00\u4e2a\u4ee4\u724c\u6d41\u3002 \u5bf9\u4e8e\u590d\u6742\u7684\u8bed\u6cd5\uff0c\u6700\u597d\u662f\u9009\u62e9\u67d0\u4e2a\u89e3\u6790\u5de5\u5177\u6bd4\u5982 PyParsing \u6216\u8005\u662f PLY\u3002","title":"\u5b57\u7b26\u4e32\u4ee4\u724c\u89e3\u6790"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#unicodedata","text":"\u6807\u51c6\u5316\u5bf9\u4e8e\u4efb\u4f55\u9700\u8981\u4ee5\u4e00\u81f4\u7684\u65b9\u5f0f\u5904\u7406Unicode\u6587\u672c\u7684\u7a0b\u5e8f\u90fd\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u5f53\u5904\u7406\u6765\u81ea\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u800c\u4f60\u5f88\u96be\u53bb\u63a7\u5236\u7f16\u7801\u7684\u65f6\u5019\u5c24\u5176\u5982\u6b64\u3002 >>> s1 = 'Spicy Jalape\\u00f1o' >>> s2 = 'Spicy Jalapen\\u0303o' >>> s1 'Spicy Jalape\u00f1o' >>> s2 'Spicy Jalape\u00f1o' >>> s1 == s2 False >>> len(s1) 14 >>> len(s2) 15 >>> >>> import unicodedata >>> t1 = unicodedata.normalize('NFC', s1) >>> t2 = unicodedata.normalize('NFC', s2) >>> t1 == t2 True >>> print(ascii(t1)) 'Spicy Jalape\\xf1o' >>> t3 = unicodedata.normalize('NFD', s1) >>> t4 = unicodedata.normalize('NFD', s2) >>> t3 == t4 True >>> print(ascii(t3)) 'Spicy Jalapen\\u0303o' >>> >>> t1 = unicodedata.normalize('NFD', s1) >>> ''.join(c for c in t1 if not unicodedata.combining(c)) 'Spicy Jalapeno' >>>","title":"unicodedata \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#collections","text":"","title":"collections \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#deque","text":"\u5728\u8fed\u4ee3\u64cd\u4f5c\u6216\u8005\u5176\u4ed6\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u53ea\u4fdd\u7559\u6700\u540e\u6709\u9650\u51e0\u4e2a\u5143\u7d20\u7684\u5386\u53f2\u8bb0\u5f55\u3002 deque(maxlen=N) \u6784\u9020\u51fd\u6570\u4f1a\u65b0\u5efa\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u961f\u5217\u3002\u5f53\u65b0\u7684\u5143\u7d20\u52a0\u5165\u5e76\u4e14\u8fd9\u4e2a\u961f\u5217\u5df2\u6ee1\u7684\u65f6\u5019\uff0c \u6700\u8001\u7684\u5143\u7d20\u4f1a\u81ea\u52a8\u88ab\u79fb\u9664\u6389\u3002 \u5728\u961f\u5217\u4e24\u7aef\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1) \uff0c\u533a\u522b\u4e8e\u5217\u8868\uff0c\u5728\u5217\u8868\u7684\u5f00\u5934\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N) \u3002 \u5728\u5199\u67e5\u8be2\u5143\u7d20\u7684\u4ee3\u7801\u65f6\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u5305\u542b yield \u8868\u8fbe\u5f0f\u7684\u751f\u6210\u5668\u51fd\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u5c06\u641c\u7d22\u8fc7\u7a0b\u4ee3\u7801\u548c\u4f7f\u7528\u641c\u7d22\u7ed3\u679c\u4ee3\u7801\u89e3\u8026\u3002 from collections import deque def my_search(lines, pattern, history=5): previous_lines = deque(maxlen=history) for line in lines: if pattern in line: yield line, previous_lines previous_lines.append(line) # Example use on a file if __name__ == '__main__': with open(r'../../cookbook/somefile.txt') as f: for line, prevlines in my_search(f, 'python', 5): for pline in prevlines: print(pline, end='') print(line, end='') print('-' * 20)","title":"deque()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#defaultdict","text":"\u4e00\u4e2a\u5b57\u5178\u5c31\u662f\u4e00\u4e2a\u952e\u5bf9\u5e94\u4e00\u4e2a\u5355\u503c\u7684\u6620\u5c04\u3002\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u952e\u6620\u5c04\u591a\u4e2a\u503c\uff0c\u5c31\u9700\u8981\u5c06\u8fd9\u591a\u4e2a\u503c\u653e\u5230\u53e6\u5916\u7684\u5bb9\u5668\u4e2d\uff0c\u6bd4\u5982\u5217\u8868\u6216\u8005\u96c6\u5408\u91cc\u9762\u3002 \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4f7f\u7528 collections \u6a21\u5757\u4e2d\u7684 defaultdict \u6765\u6784\u9020\u8fd9\u6837\u7684\u5b57\u5178\u3002 from collections import defaultdict d = defaultdict(list) d['a'].append(1) d['a'].append(2) d['b'].append(4) d = defaultdict(set) d['a'].add(1) d['a'].add(2) d['b'].add(4) \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c defaultdict \u4f1a\u81ea\u52a8\u4e3a\u5c06\u8981\u8bbf\u95ee\u7684\u952e\uff08\u5c31\u7b97\u76ee\u524d\u5b57\u5178\u4e2d\u5e76\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u952e\uff09\u521b\u5efa\u6620\u5c04\u5b9e\u4f53\u3002","title":"defaultdict()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#ordereddict","text":"\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\uff0c\u5e76\u4e14\u5728\u8fed\u4ee3\u6216\u5e8f\u5217\u5316\u8fd9\u4e2a\u5b57\u5178\u7684\u65f6\u5019\u80fd\u591f\u63a7\u5236\u5143\u7d20\u7684\u987a\u5e8f\u3002 \u4e3a\u4e86\u80fd\u63a7\u5236\u4e00\u4e2a\u5b57\u5178\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 collections \u6a21\u5757\u4e2d\u7684 OrderedDict \u7c7b\u3002\u5728\u8fed\u4ee3\u64cd\u4f5c\u7684\u65f6\u5019\u5b83\u4f1a\u4fdd\u6301\u5143\u7d20\u88ab\u63d2\u5165\u65f6\u7684\u987a\u5e8f from collections import OrderedDict d = OrderedDict() d['foo'] = 1 d['bar'] = 2 d['spam'] = 3 d['grok'] = 4 # Outputs \"foo 1\", \"bar 2\", \"spam 3\", \"grok 4\" for key in d: print(key, d[key]) OrderedDict \u5185\u90e8\u7ef4\u62a4\u7740\u4e00\u4e2a\u6839\u636e\u952e\u63d2\u5165\u987a\u5e8f\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u6bcf\u6b21\u5f53\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u63d2\u5165\u8fdb\u6765\u7684\u65f6\u5019\uff0c \u5b83\u4f1a\u88ab\u653e\u5230\u94fe\u8868\u7684\u5c3e\u90e8\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u952e\u7684\u91cd\u590d\u8d4b\u503c\u4e0d\u4f1a\u6539\u53d8\u952e\u7684\u987a\u5e8f\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u4e2a OrderedDict \u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u666e\u901a\u5b57\u5178\u7684\u4e24\u500d\uff0c\u56e0\u4e3a\u5b83\u5185\u90e8\u7ef4\u62a4\u7740\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u3002 \u6240\u4ee5\u5982\u679c\u4f60\u8981\u6784\u5efa\u4e00\u4e2a\u9700\u8981\u5927\u91cf OrderedDict \u5b9e\u4f8b\u7684\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\uff08\u6bd4\u5982\u8bfb\u53d6 100,000 \u884c CSV \u6570\u636e\u5230\u4e00\u4e2a OrderedDict \u5217\u8868\u4e2d\u53bb\uff09\uff0c \u90a3\u4e48\u4f60\u5c31\u5f97\u4ed4\u7ec6\u6743\u8861\u4e00\u4e0b\u662f\u5426\u4f7f\u7528 OrderedDict \u5e26\u6765\u7684\u597d\u5904\u8981\u5927\u8fc7\u989d\u5916\u5185\u5b58\u6d88\u8017\u7684\u5f71\u54cd\u3002","title":"OrderedDict()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#counter","text":"\u627e\u51fa\u4e00\u4e2a\u5e8f\u5217\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20 words = [ 'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes', 'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the', 'eyes', \"don't\", 'look', 'around', 'the', 'eyes', 'look', 'into', 'my', 'eyes', \"you're\", 'under' ] from collections import Counter word_counts = Counter(words) # \u51fa\u73b0\u9891\u7387\u6700\u9ad8\u76843\u4e2a\u5355\u8bcd top_three = word_counts.most_common(3) print(top_three) # Outputs [('eyes', 8), ('the', 5), ('look', 4)]","title":"Counter()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#namedtuple","text":"collections.namedtuple() \u8fd9\u4e2a\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u8fd4\u56de Python \u4e2d\u6807\u51c6\u5143\u7ec4\u7c7b\u578b\u5b50\u7c7b\u7684\u4e00\u4e2a\u5de5\u5382\u65b9\u6cd5\u3002 \u4f20\u9012\u4e00\u4e2a\u7c7b\u578b\u540d\u548c\u4f60\u9700\u8981\u7684\u5b57\u6bb5\u7ed9\u5b83\uff0c\u7136\u540e\u5b83\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\uff0c\u53ef\u4ee5\u521d\u59cb\u5316\u8fd9\u4e2a\u7c7b\uff0c\u4e3a\u5b9a\u4e49\u7684\u5b57\u6bb5\u4f20\u9012\u503c\u7b49\u3002 >>> from collections import namedtuple >>> Subscriber = namedtuple('Subscriber', ['addr', 'joined']) >>> sub = Subscriber('jonesy@example.com', '2012-10-19') >>> sub Subscriber(addr='jonesy@example.com', joined='2012-10-19') >>> sub.addr 'jonesy@example.com' >>> sub.joined '2012-10-19' >>> \u5c3d\u7ba1 namedtuple \u7684\u5b9e\u4f8b\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u666e\u901a\u7684\u7c7b\u5b9e\u4f8b\uff0c\u4f46\u662f\u5b83\u8ddf\u5143\u7ec4\u7c7b\u578b\u662f\u53ef\u4ea4\u6362\u7684\uff0c\u652f\u6301\u6240\u6709\u7684\u666e\u901a\u5143\u7ec4\u64cd\u4f5c\uff0c\u6bd4\u5982\u7d22\u5f15\u548c\u89e3\u538b\u3002 \u6bd4\u5982\uff1a >>> len(sub) 2 >>> addr, joined = sub >>> addr 'jonesy@example.com' >>> joined '2012-10-19' >>> \u547d\u540d\u5143\u7ec4\u7684\u4e00\u4e2a\u4e3b\u8981\u7528\u9014\u662f\u5c06\u4ee3\u7801\u4ece\u4e0b\u6807\u64cd\u4f5c\u4e2d\u89e3\u8131\u51fa\u6765\u3002 \u56e0\u6b64\uff0c\u5728\u6570\u636e\u5e93\u8c03\u7528\u4e2d\u8fd4\u56de\u4e86\u4e00\u4e2a\u5f88\u5927\u7684\u5143\u7ec4\u5217\u8868\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u547d\u540d\u5143\u7ec4\u589e\u5220\u5c31\u4f1a\u5f88\u65b9\u4fbf\u3002 def compute_cost(records): total = 0.0 for rec in records: total += rec[1] * rec[2] return total \u4e0b\u6807\u64cd\u4f5c\u901a\u5e38\u4f1a\u8ba9\u4ee3\u7801\u8868\u610f\u4e0d\u6e05\u6670\uff0c\u5e76\u4e14\u975e\u5e38\u4f9d\u8d56\u8bb0\u5f55\u7684\u7ed3\u6784\u3002 \u4e0b\u9762\u662f\u4f7f\u7528\u547d\u540d\u5143\u7ec4\u7684\u7248\u672c\uff1a from collections import namedtuple Stock = namedtuple('Stock', ['name', 'shares', 'price']) def compute_cost(records): total = 0.0 for rec in records: s = Stock(*rec) total += s.shares * s.price return total \u547d\u540d\u5143\u7ec4\u53e6\u4e00\u4e2a\u7528\u9014\u5c31\u662f\u4f5c\u4e3a\u5b57\u5178\u7684\u66ff\u4ee3\uff0c\u56e0\u4e3a\u5b57\u5178\u5b58\u50a8\u9700\u8981\u66f4\u591a\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u5982\u679c\u9700\u8981\u6784\u5efa\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u5305\u542b\u5b57\u5178\u7684\u6570\u636e\u7ed3\u6784\uff0c\u90a3\u4e48\u4f7f\u7528\u547d\u540d\u5143\u7ec4\u4f1a\u66f4\u52a0\u9ad8\u6548\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u50cf\u5b57\u5178\u90a3\u6837\uff0c\u4e00\u4e2a\u547d\u540d\u5143\u7ec4\u662f\u4e0d\u53ef\u66f4\u6539\u7684\u3002\u6bd4\u5982\uff1a >>> s = Stock('ACME', 100, 123.45) >>> s Stock(name='ACME', shares=100, price=123.45) >>> s.shares = 75 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AttributeError: can't set attribute >>> \u5982\u679c\u771f\u7684\u9700\u8981\u6539\u53d8\u5c5e\u6027\u7684\u503c\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u547d\u540d\u5143\u7ec4\u5b9e\u4f8b\u7684 _replace() \u65b9\u6cd5\uff0c \u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u5168\u65b0\u7684\u547d\u540d\u5143\u7ec4\u5e76\u5c06\u5bf9\u5e94\u7684\u5b57\u6bb5\u7528\u65b0\u7684\u503c\u53d6\u4ee3\u3002\u6bd4\u5982\uff1a >>> s = s._replace(shares=75) >>> s Stock(name='ACME', shares=75, price=123.45) >>>","title":"namedtuple()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#chainmap","text":"\u73b0\u5728\u6709\u591a\u4e2a\u5b57\u5178\u6216\u8005\u6620\u5c04\uff0c\u5c06\u5b83\u4eec\u4ece\u903b\u8f91\u4e0a\u5408\u5e76\u4e3a\u4e00\u4e2a\u5355\u4e00\u7684\u6620\u5c04\u540e\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u6bd4\u5982\u67e5\u627e\u503c\u6216\u8005\u68c0\u67e5\u67d0\u4e9b\u952e\u662f\u5426\u5b58\u5728\u3002 a = {'x': 1, 'z': 3 } b = {'y': 2, 'z': 4 } from collections import ChainMap c = ChainMap(a,b) print(c['x']) # Outputs 1 (from a) print(c['y']) # Outputs 2 (from b) print(c['z']) # Outputs 3 (from a) \u4e00\u4e2a ChainMap \u63a5\u53d7\u591a\u4e2a\u5b57\u5178\u5e76\u5c06\u5b83\u4eec\u5728\u903b\u8f91\u4e0a\u53d8\u4e3a\u4e00\u4e2a\u5b57\u5178\u3002 \u7136\u540e\uff0c\u8fd9\u4e9b\u5b57\u5178\u5e76\u4e0d\u662f\u771f\u7684\u5408\u5e76\u5728\u4e00\u8d77\u4e86\uff0c ChainMap \u7c7b\u53ea\u662f\u5728\u5185\u90e8\u521b\u5efa\u4e86\u4e00\u4e2a\u5bb9\u7eb3\u8fd9\u4e9b\u5b57\u5178\u7684\u5217\u8868 \u5e76\u91cd\u65b0\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u5b57\u5178\u64cd\u4f5c\u6765\u904d\u5386\u8fd9\u4e2a\u5217\u8868\u3002\u5927\u90e8\u5206\u5b57\u5178\u64cd\u4f5c\u90fd\u662f\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u3002 \u4e0e update() \u4e0d\u540c\u7684\u662f\uff1a\u4f7f\u7528 update \u5982\u679c\u539f\u5b57\u5178\u505a\u4e86\u66f4\u65b0\uff0c\u8fd9\u79cd\u6539\u53d8\u4e0d\u4f1a\u53cd\u5e94\u5230\u65b0\u7684\u5408\u5e76\u5b57\u5178\u4e2d\u53bb\u3002 ChainMap \u4f7f\u7528\u539f\u6765\u7684\u5b57\u5178\uff0c\u5b83\u81ea\u5df1\u4e0d\u521b\u5efa\u65b0\u7684\u5b57\u5178\uff0c\u6240\u4ee5\u4f1a\u968f\u4e4b\u6539\u53d8\u3002","title":"ChainMap"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#heapq","text":"","title":"heapq \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#n","text":"heapq \u6a21\u5757\u6709\u4e24\u4e2a\u51fd\u6570\uff1a nlargest() \u548c nsmallest() \u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 import heapq nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2] print(heapq.nlargest(3, nums)) # Prints [42, 37, 23] print(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2] \u5728\u5e95\u5c42\u5b9e\u73b0\u91cc\u9762\uff0c\u9996\u5148\u4f1a\u5148\u5c06\u96c6\u5408\u6570\u636e\u8fdb\u884c\u5806\u6392\u5e8f\u540e\u653e\u5165\u4e00\u4e2a\u5217\u8868\u4e2d\u3002 \u5806\u6570\u636e\u7ed3\u6784\u6700\u91cd\u8981\u7684\u7279\u5f81\u662f heap[0] \u6c38\u8fdc\u662f\u6700\u5c0f\u7684\u5143\u7d20\u3002\u5e76\u4e14\u5269\u4f59\u7684\u5143\u7d20\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u8c03\u7528 heapq.heappop() \u65b9\u6cd5\u5f97\u5230\uff0c \u8be5\u65b9\u6cd5\u4f1a\u5148\u5c06\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f39\u51fa\u6765\uff0c\u7136\u540e\u7528\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u6765\u53d6\u4ee3\u88ab\u5f39\u51fa\u5143\u7d20\uff08\u8fd9\u79cd\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4ec5\u4ec5\u662f O(log N) \uff0c N \u662f\u5806\u5927\u5c0f\uff09\u3002 >>> nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2] >>> import heapq >>> heap = list(nums) >>> heapq.heapify(heap) >>> heap [-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8] >>> \u5f53\u8981\u67e5\u627e\u7684\u5143\u7d20\u4e2a\u6570\u76f8\u5bf9\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c\u51fd\u6570 nlargest() \u548c nsmallest() \u662f\u5f88\u5408\u9002\u7684\u3002 \u5982\u679c\u4f60\u4ec5\u4ec5\u60f3\u67e5\u627e\u552f\u4e00\u7684\u6700\u5c0f\u6216\u6700\u5927\uff08N=1\uff09\u7684\u5143\u7d20\u7684\u8bdd\uff0c\u90a3\u4e48\u4f7f\u7528 min() \u548c max() \u51fd\u6570\u4f1a\u66f4\u5feb\u4e9b\u3002 \u7c7b\u4f3c\u7684\uff0c\u5982\u679c N \u7684\u5927\u5c0f\u548c\u96c6\u5408\u5927\u5c0f\u63a5\u8fd1\u7684\u65f6\u5019\uff0c\u901a\u5e38\u5148\u6392\u5e8f\u8fd9\u4e2a\u96c6\u5408\u7136\u540e\u518d\u4f7f\u7528\u5207\u7247\u64cd\u4f5c\u4f1a\u66f4\u5feb\u70b9 \uff08 sorted(items)[:N] \u6216\u8005\u662f sorted(items)[-N:] \uff09\u3002 \u9700\u8981\u5728\u6b63\u786e\u573a\u5408\u4f7f\u7528\u51fd\u6570 nlargest() \u548c nsmallest() \u624d\u80fd\u53d1\u6325\u5b83\u4eec\u7684\u4f18\u52bf \uff08\u5982\u679c N \u5feb\u63a5\u8fd1\u96c6\u5408\u5927\u5c0f\u4e86\uff0c\u90a3\u4e48\u4f7f\u7528\u6392\u5e8f\u64cd\u4f5c\u4f1a\u66f4\u597d\u4e9b\uff09\u3002","title":"\u4ece\u4e00\u4e2a\u96c6\u5408\u4e2d\u83b7\u5f97\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684 N \u4e2a\u5143\u7d20\u5217\u8868\u3002"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#_6","text":"\u6709\u4e00\u7cfb\u5217\u6392\u5e8f\u5e8f\u5217\uff0c\u60f3\u5c06\u5b83\u4eec\u5408\u5e76\u540e\u5f97\u5230\u4e00\u4e2a\u6392\u5e8f\u5e8f\u5217\u5e76\u5728\u4e0a\u9762\u8fed\u4ee3\u904d\u5386\u3002 >>> import heapq >>> a = [1, 4, 7, 10] >>> b = [2, 5, 6, 11] >>> for c in heapq.merge(a, b): ... print(c) ... 1 2 4 5 6 7 10 11 heapq.merge() \u9700\u8981\u6240\u6709\u8f93\u5165\u5e8f\u5217\u5fc5\u987b\u662f\u6392\u8fc7\u5e8f\u7684\u3002 \u7279\u522b\u7684\uff0c\u5b83\u5e76\u4e0d\u4f1a\u9884\u5148\u8bfb\u53d6\u6240\u6709\u6570\u636e\u5230\u5806\u6808\u4e2d\u6216\u8005\u9884\u5148\u6392\u5e8f\uff0c\u4e5f\u4e0d\u4f1a\u5bf9\u8f93\u5165\u505a\u4efb\u4f55\u7684\u6392\u5e8f\u68c0\u6d4b\u3002\u5b83\u4ec5\u4ec5\u662f\u68c0\u67e5\u6240\u6709\u5e8f\u5217\u7684\u5f00\u59cb\u90e8\u5206\u5e76\u8fd4\u56de\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e00\u76f4\u4f1a\u6301\u7eed\u76f4\u5230\u6240\u6709\u8f93\u5165\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u90fd\u88ab\u904d\u5386\u5b8c\u3002","title":"\u987a\u5e8f\u8fed\u4ee3\u5408\u5e76\u540e\u7684\u6392\u5e8f\u8fed\u4ee3\u5bf9\u8c61"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#operator","text":"","title":"operator \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#itemgetter","text":"\u6839\u636e\u67d0\u4e2a\u6216\u67d0\u51e0\u4e2a\u5b57\u5178\u5b57\u6bb5\u6765\u6392\u5e8f\u8fd9\u4e2a\u5217\u8868\uff0c\u901a\u8fc7\u4f7f\u7528 operator \u6a21\u5757\u7684 itemgetter \u51fd\u6570\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u7684\u6392\u5e8f\u8fd9\u6837\u7684\u6570\u636e\u7ed3\u6784\uff1a rows = [ {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004} ] from operator import itemgetter rows_by_fname = sorted(rows, key=itemgetter('fname')) rows_by_uid = sorted(rows, key=itemgetter('uid')) itemgetter() \u6709\u65f6\u5019\u4e5f\u53ef\u4ee5\u7528 lambda \u8868\u8fbe\u5f0f\u4ee3\u66ff\uff0c\u6bd4\u5982\uff1a rows_by_fname = sorted(rows, key=lambda r: r['fname']) rows_by_lfname = sorted(rows, key=lambda r: (r['lname'],r['fname'])) \u4f7f\u7528 itemgetter() \u65b9\u5f0f\u4f1a\u8fd0\u884c\u7684\u7a0d\u5fae\u5feb\u70b9\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u5bf9\u6027\u80fd\u8981\u6c42\u6bd4\u8f83\u9ad8\u7684\u8bdd\u5c31\u4f7f\u7528 itemgetter() \u65b9\u5f0f\u3002 >>> min(rows, key=itemgetter('uid')) {'fname': 'John', 'lname': 'Cleese', 'uid': 1001} >>> max(rows, key=itemgetter('uid')) {'fname': 'Big', 'lname': 'Jones', 'uid': 1004} >>>","title":"itemgetter()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#attrgetter","text":"\u6392\u5e8f\u7c7b\u578b\u76f8\u540c\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u4ed6\u4eec\u4e0d\u652f\u6301\u539f\u751f\u7684\u6bd4\u8f83\u64cd\u4f5c\u3002 \u5185\u7f6e\u7684 sorted() \u51fd\u6570\u6709\u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570 key \uff0c\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a callable \u5bf9\u8c61\u7ed9\u5b83\uff0c \u8fd9\u4e2a callable \u5bf9\u8c61\u5bf9\u6bcf\u4e2a\u4f20\u5165\u7684\u5bf9\u8c61\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u4f1a\u88ab sorted \u7528\u6765\u6392\u5e8f\u8fd9\u4e9b\u5bf9\u8c61\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u4f60\u5728\u5e94\u7528\u7a0b\u5e8f\u91cc\u9762\u6709\u4e00\u4e2a User \u5b9e\u4f8b\u5e8f\u5217\uff0c\u5e76\u4e14\u4f60\u5e0c\u671b\u901a\u8fc7\u4ed6\u4eec\u7684 user_id \u5c5e\u6027\u8fdb\u884c\u6392\u5e8f\uff0c \u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u4ee5 User \u5b9e\u4f8b\u4f5c\u4e3a\u8f93\u5165\u5e76\u8f93\u51fa\u5bf9\u5e94 user_id \u503c\u7684 callable \u5bf9\u8c61\u3002 class User: def __init__(self, user_id): self.user_id = user_id def __repr__(self): return 'User({})'.format(self.user_id) sorted(users, key=lambda u: u.user_id) # [User(3), User(23), User(99)] from operator import attrgetter sorted(users, key=attrgetter('user_id')) # [User(3), User(23), User(99)]","title":"attrgetter()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#itertools","text":"","title":"itertools \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#islice","text":"\u7528\u4e8e \u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668 \u4e0a\u7684\u5207\u7247\u64cd\u4f5c\u3002","title":"islice()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#dropwhile","text":"\u7528\u4e8e\u4e22\u5f03\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u524d\u9762\u7684\u5143\u7d20\u3002","title":"dropwhile()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#permutationscombinationscombinations_with_replacement","text":"\u6392\u5217\u7ec4\u5408\u7684\u8fed\u4ee3\uff08\u8fed\u4ee3\u904d\u5386\u4e00\u4e2a\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6240\u6709\u53ef\u80fd\u7684\u6392\u5217\u6216\u7ec4\u5408\uff09\u3002","title":"permutations()/combinations()/combinations_with_replacement()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#zip_longest","text":"\u540c\u65f6\u8fed\u4ee3\u591a\u4e2a\u5e8f\u5217\uff0c\u5e76\u4e14\u5bf9\u5176\u957f\u5ea6\u3002","title":"zip_longest()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#chain","text":"\u5408\u5e76\u591a\u4e2a\u96c6\u5408\uff0c\u521b\u5efa\u8fed\u4ee3\u5668\u3002","title":"chain()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#groupby","text":"\u6709\u4e00\u4e2a\u5b57\u5178\u6216\u8005\u5b9e\u4f8b\u7684\u5e8f\u5217\uff0c\u7136\u540e\u4f60\u60f3\u6839\u636e\u67d0\u4e2a\u7279\u5b9a\u7684\u5b57\u6bb5\u6bd4\u5982 date \u6765\u5206\u7ec4\u8fed\u4ee3\u8bbf\u95ee\u3002 itertools.groupby() \u51fd\u6570\u5bf9\u4e8e\u8fd9\u6837\u7684\u6570\u636e\u5206\u7ec4\u64cd\u4f5c\u975e\u5e38\u5b9e\u7528\u3002 rows = [ {'address': '5412 N CLARK', 'date': '07/01/2012'}, {'address': '5148 N CLARK', 'date': '07/04/2012'}, {'address': '5800 E 58TH', 'date': '07/02/2012'}, {'address': '2122 N CLARK', 'date': '07/03/2012'}, {'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'}, {'address': '1060 W ADDISON', 'date': '07/02/2012'}, {'address': '4801 N BROADWAY', 'date': '07/01/2012'}, {'address': '1039 W GRANVILLE', 'date': '07/04/2012'}, ] from operator import itemgetter from itertools import groupby # Sort by the desired field first rows.sort(key=itemgetter('date')) # Iterate in groups for date, items in groupby(rows, key=itemgetter('date')): print(date) for i in items: print(' ', i) \u8fd0\u884c\u7ed3\u679c\uff1a 07/01/2012 {'date': '07/01/2012', 'address': '5412 N CLARK'} {'date': '07/01/2012', 'address': '4801 N BROADWAY'} 07/02/2012 {'date': '07/02/2012', 'address': '5800 E 58TH'} {'date': '07/02/2012', 'address': '5645 N RAVENSWOOD'} {'date': '07/02/2012', 'address': '1060 W ADDISON'} 07/03/2012 {'date': '07/03/2012', 'address': '2122 N CLARK'} 07/04/2012 {'date': '07/04/2012', 'address': '5148 N CLARK'} {'date': '07/04/2012', 'address': '1039 W GRANVILLE'}","title":"groupby()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#compress","text":"\u5b83\u4ee5\u4e00\u4e2a iterable \u5bf9\u8c61\u548c\u4e00\u4e2a\u76f8\u5bf9\u5e94\u7684 Boolean \u9009\u62e9\u5668\u5e8f\u5217\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u3002 \u7136\u540e\u8f93\u51fa iterable \u5bf9\u8c61\u4e2d\u5bf9\u5e94\u9009\u62e9\u5668\u4e3a True \u7684\u5143\u7d20\u3002 \u5f53\u9700\u8981\u7528\u53e6\u5916\u4e00\u4e2a\u76f8\u5173\u8054\u7684\u5e8f\u5217\u6765\u8fc7\u6ee4\u67d0\u4e2a\u5e8f\u5217\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u975e\u5e38\u6709\u7528\u7684\u3002 \u6bd4\u5982\uff1a addresses = [ '5412 N CLARK', '5148 N CLARK', '5800 E 58TH', '2122 N CLARK', '5645 N RAVENSWOOD', '1060 W ADDISON', '4801 N BROADWAY', '1039 W GRANVILLE', ] counts = [ 0, 3, 10, 4, 1, 7, 6, 1] \u5c06\u90a3\u4e9b\u5bf9\u5e94 count \u503c\u5927\u4e8e5\u7684\u5730\u5740\u5168\u90e8\u8f93\u51fa\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a >>> from itertools import compress >>> more5 = [n > 5 for n in counts] >>> more5 [False, False, True, False, False, True, True, False] >>> list(compress(addresses, more5)) ['5800 E 58TH', '1060 W ADDISON', '4801 N BROADWAY'] >>> \u8fd9\u91cc\u7684\u5173\u952e\u70b9\u5728\u4e8e\u5148\u521b\u5efa\u4e00\u4e2a Boolean \u5e8f\u5217\uff0c\u6307\u793a\u54ea\u4e9b\u5143\u7d20\u7b26\u5408\u6761\u4ef6\u3002 \u7136\u540e compress() \u51fd\u6570\u6839\u636e\u8fd9\u4e2a\u5e8f\u5217\u53bb\u9009\u62e9\u8f93\u51fa\u5bf9\u5e94\u4f4d\u7f6e\u4e3a True \u7684\u5143\u7d20\u3002 \u548c filter() \u51fd\u6570\u7c7b\u4f3c\uff0c compress() \u4e5f\u662f\u8fd4\u56de\u7684\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u9700\u8981\u5f97\u5230\u4e00\u4e2a\u5217\u8868\uff0c \u90a3\u4e48\u4f60\u9700\u8981\u4f7f\u7528 list() \u6765\u5c06\u7ed3\u679c\u8f6c\u6362\u4e3a\u5217\u8868\u7c7b\u578b\u3002","title":"compress()"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#logging","text":"","title":"logging \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#time","text":"import time # \u5f53\u524d\u65f6\u95f4\u6233\uff08\u79d2\uff09 ts = time.time() print(\"\u5f53\u524d\u65f6\u95f4\u6233:\", ts, type(ts)) # \u8f93\u51fa\u793a\u4f8b: 1681440000.123456 <class 'float'> # \u65f6\u95f4\u6233 -> \u672c\u5730\u65f6\u95f4\u5143\u7ec4 local = time.localtime(ts) print(\"\u672c\u5730\u65f6\u95f4\u5143\u7ec4:\", local, type(local)) # time.struct_time(tm_year=..., ...) <class 'time.struct_time'> # \u65f6\u95f4\u5143\u7ec4 -> \u5b57\u7b26\u4e32 str_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", local) print(\"\u683c\u5f0f\u5316\u65f6\u95f4\u5b57\u7b26\u4e32:\", str_time, type(str_time)) # '2025-04-10 15:30:45' <class 'str'> # \u5b57\u7b26\u4e32 -> \u65f6\u95f4\u5143\u7ec4 parsed = time.strptime(\"2025-01-01 12:00:00\", \"%Y-%m-%d %H:%M:%S\") print(\"\u89e3\u6790\u540e\u7684\u65f6\u95f4\u5143\u7ec4:\", parsed, type(parsed)) # time.struct_time(tm_year=2025, ...) <class 'time.struct_time'> # \u65f6\u95f4\u5143\u7ec4 -> \u65f6\u95f4\u6233 ts_from_struct = time.mktime(parsed) print(\"\u4ece\u7ed3\u6784\u4f53\u5f97\u5230\u65f6\u95f4\u6233:\", ts_from_struct, type(ts_from_struct)) # 1735723200.0 <class 'float'>","title":"time \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#datetime","text":"from datetime import datetime, timedelta # \u5f53\u524d\u65f6\u95f4 now = datetime.now() print(\"\u5f53\u524d datetime:\", now, type(now)) # 2025-04-10 15:30:45.123456 <class 'datetime.datetime'> # \u81ea\u5b9a\u4e49\u65f6\u95f4 d = datetime(2024, 12, 31, 23, 59, 59) print(\"\u81ea\u5b9a\u4e49 datetime:\", d, type(d)) # 2024-12-31 23:59:59 <class 'datetime.datetime'> # datetime -> \u5b57\u7b26\u4e32 formatted = d.strftime(\"%Y/%m/%d %H:%M\") print(\"\u683c\u5f0f\u5316:\", formatted, type(formatted)) # '2024/12/31 23:59' <class 'str'> # \u5b57\u7b26\u4e32 -> datetime parsed_dt = datetime.strptime(\"2025-03-15 08:30\", \"%Y-%m-%d %H:%M\") print(\"\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a datetime:\", parsed_dt, type(parsed_dt)) # 2025-03-15 08:30:00 <class 'datetime.datetime'> # \u83b7\u53d6\u65f6\u95f4\u5dee delta = now - parsed_dt print(\"\u65f6\u95f4\u5dee:\", delta, type(delta)) # datetime.timedelta(days=..., seconds=...) <class 'datetime.timedelta'> print(\"\u5dee\u591a\u5c11\u5929:\", delta.days, type(delta.days)) # 26 <class 'int'> print(\"\u5dee\u591a\u5c11\u79d2:\", delta.total_seconds(), type(delta.total_seconds())) # 2276400.0 <class 'float'> # \u52a0\u51cf\u65f6\u95f4 future = now + timedelta(days=7) print(\"7\u5929\u540e:\", future, type(future)) # <class 'datetime.datetime'> past = now - timedelta(hours=3) print(\"3\u5c0f\u65f6\u524d:\", past, type(past)) # <class 'datetime.datetime'> # datetime -> \u65f6\u95f4\u6233 timestamp = now.timestamp() print(\"\u5f53\u524d datetime \u8f6c\u65f6\u95f4\u6233:\", timestamp, type(timestamp)) # 1681440000.0 <class 'float'> # \u65f6\u95f4\u6233 -> datetime from_ts = datetime.fromtimestamp(timestamp) print(\"\u65f6\u95f4\u6233\u8f6c datetime:\", from_ts, type(from_ts)) # <class 'datetime.datetime'> # ISO \u683c\u5f0f\u65f6\u95f4\uff08\u6807\u51c6\u683c\u5f0f\uff09 iso_str = now.isoformat() print(\"ISO \u683c\u5f0f:\", iso_str, type(iso_str)) # '2025-04-10T15:30:45.123456' <class 'str'> # \u83b7\u53d6\u5f53\u524d UTC \u65f6\u95f4 utc_now = datetime.utcnow() print(\"\u5f53\u524d UTC \u65f6\u95f4:\", utc_now, type(utc_now)) # <class 'datetime.datetime'> # \u66ff\u6362 datetime \u4e2d\u7684\u90e8\u5206\u503c new_time = now.replace(hour=0, minute=0) print(\"\u66ff\u6362\u540e\u7684\u65f6\u95f4:\", new_time, type(new_time)) # <class 'datetime.datetime'> \u5185\u5bb9 \u793a\u4f8b\u8f93\u51fa\u7c7b\u578b \u65f6\u95f4\u6233 <class 'float'> \u65f6\u95f4\u5143\u7ec4 <class 'time.struct_time'> \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u65f6\u95f4 <class 'str'> datetime \u5bf9\u8c61 <class 'datetime.datetime'> \u65f6\u95f4\u5dee\u5bf9\u8c61 <class 'datetime.timedelta'> total_seconds() <class 'float'> days \u5c5e\u6027 <class 'int'>","title":"datetime \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#time-datetime","text":"\u529f\u80fd time \u6a21\u5757 datetime \u6a21\u5757 \u65f6\u95f4\u6233\u64cd\u4f5c \u2705 time.time() \u2705 datetime.timestamp() \u5b57\u7b26\u4e32\u683c\u5f0f\u5316 \u2705 strftime / strptime \u2705 \u540c\u6837\u652f\u6301 \u65f6\u95f4\u5dee\u8ba1\u7b97 \u274c\uff08\u9700\u624b\u52a8\u8ba1\u7b97\uff09 \u2705 datetime - datetime \u52a0\u51cf\u65f6\u95f4 \u274c\uff08\u9700\u8981\u5c01\u88c5\uff09 \u2705 \u4f7f\u7528 timedelta \u53ef\u8bfb\u6027 & OOP \u8f83\u5e95\u5c42 \u66f4\u76f4\u89c2\u3001\u66f4\u5f3a\u5927","title":"time \u548c datetime \u5bf9\u6bd4"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#pytz","text":"\u5bf9\u51e0\u4e4e\u6240\u6709\u6d89\u53ca\u5230\u65f6\u533a\u7684\u95ee\u9898\uff0c\u90fd\u5e94\u8be5\u4f7f\u7528 pytz \u6a21\u5757\u3002\u8fd9\u4e2a\u5305\u63d0\u4f9b\u4e86Olson\u65f6\u533a\u6570\u636e\u5e93\uff0c \u5b83\u662f\u65f6\u533a\u4fe1\u606f\u7684\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\uff0c\u5728\u5f88\u591a\u8bed\u8a00\u548c\u64cd\u4f5c\u7cfb\u7edf\u91cc\u9762\u90fd\u53ef\u4ee5\u627e\u5230\u3002 pytz \u6a21\u5757\u4e00\u4e2a\u4e3b\u8981\u7528\u9014\u662f\u5c06 datetime \u5e93\u521b\u5efa\u7684\u7b80\u5355\u65e5\u671f\u5bf9\u8c61\u672c\u5730\u5316\u3002 \u6bd4\u5982\uff0c\u4e0b\u9762\u5982\u4f55\u8868\u793a\u4e00\u4e2a\u829d\u52a0\u54e5\u65f6\u95f4\u7684\u793a\u4f8b\uff1a >>> from datetime import datetime >>> from pytz import timezone >>> d = datetime(2012, 12, 21, 9, 30, 0) >>> print(d) 2012-12-21 09:30:00 >>> >>> # Localize the date for Chicago >>> central = timezone('US/Central') >>> loc_d = central.localize(d) >>> print(loc_d) 2012-12-21 09:30:00-06:00 >>>","title":"pytz \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#os","text":"","title":"os \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#_7","text":">>> import os >>> os.chmod('script.py', 0755) File \"<stdin>\", line 1 os.chmod('script.py', 0755) ^ SyntaxError: invalid token >>> # \u9700\u786e\u4fdd\u516b\u8fdb\u5236\u6570\u7684\u524d\u7f00\u662f 0o >>> os.chmod('script.py', 0o755) >>>","title":"\u516b\u8fdb\u5236"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#operator_1","text":"","title":"operator \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#math","text":"","title":"math \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#_8","text":"import math print(f\"math.ceil(3.2) = {math.ceil(3.2)}\") # \u8f93\u51fa: math.ceil(3.2) = 4 (\u5411\u4e0a\u53d6\u6574) print(f\"math.floor(3.8) = {math.floor(3.8)}\") # \u8f93\u51fa: math.floor(3.8) = 3 (\u5411\u4e0b\u53d6\u6574) print(f\"math.trunc(-3.7) = {math.trunc(-3.7)}\") # \u8f93\u51fa: math.trunc(-3.7) = -3 (\u622a\u65ad\u5c0f\u6570\u90e8\u5206)","title":"\u6570\u5b66\u51fd\u6570"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#decimal","text":"\u7cbe\u786e\u8ba1\u7b97\u6d6e\u70b9\u6570\uff08\u5e76\u80fd\u5bb9\u5fcd\u4e00\u5b9a\u7684\u6027\u80fd\u635f\u8017\uff09\u3002 decimal \u6a21\u5757\u4e3b\u8981\u7528\u5728\u6d89\u53ca\u5230\u91d1\u878d\u7684\u9886\u57df\u3002 \u5728\u8fd9\u7c7b\u7a0b\u5e8f\u4e2d\uff0c\u54ea\u6015\u662f\u4e00\u70b9\u5c0f\u5c0f\u7684\u8bef\u5dee\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u8513\u5ef6\u90fd\u662f\u4e0d\u5141\u8bb8\u7684\u3002 \u56e0\u6b64\uff0c decimal \u6a21\u5757\u4e3a\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u63d0\u4f9b\u4e86\u65b9\u6cd5\u3002 \u5f53Python\u548c\u6570\u636e\u5e93\u6253\u4ea4\u9053\u7684\u65f6\u5019\u4e5f\u901a\u5e38\u4f1a\u9047\u5230 Decimal \u5bf9\u8c61\uff0c\u5e76\u4e14\uff0c\u901a\u5e38\u4e5f\u662f\u5728\u5904\u7406\u91d1\u878d\u6570\u636e\u7684\u65f6\u5019\u3002 >>> from decimal import Decimal >>> a = Decimal('4.2') >>> b = Decimal('2.1') >>> a + b Decimal('6.3') >>> print(a + b) 6.3 >>> (a + b) == Decimal('6.3') True","title":"decimal \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#fractions","text":"fractions \u6a21\u5757\u53ef\u4ee5\u88ab\u7528\u6765\u6267\u884c\u5305\u542b\u5206\u6570\u7684\u6570\u5b66\u8fd0\u7b97\u3002\u6bd4\u5982\uff1a >>> from fractions import Fraction >>> a = Fraction(5, 4) >>> b = Fraction(7, 16) >>> print(a + b) 27/16 >>> print(a * b) 35/64 >>> # Getting numerator/denominator >>> c = a * b >>> c.numerator 35 >>> c.denominator 64 >>> # Converting to a float >>> float(c) 0.546875 >>> # Limiting the denominator of a value >>> print(c.limit_denominator(8)) 4/7 >>> # Converting a float to a fraction >>> x = 3.75 >>> y = Fraction(*x.as_integer_ratio()) >>> y Fraction(15, 4) >>>","title":"fractions \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#random","text":"random \u6a21\u5757\u6709\u5927\u91cf\u7684\u51fd\u6570\u7528\u6765\u4ea7\u751f\u968f\u673a\u6570\u548c\u968f\u673a\u9009\u62e9\u5143\u7d20\u3002 \u6bd4\u5982\uff0c\u8981\u60f3\u4ece\u4e00\u4e2a\u5e8f\u5217\u4e2d\u968f\u673a\u7684\u62bd\u53d6\u4e00\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528 random.choice() \uff1a >>> import random >>> values = [1, 2, 3, 4, 5, 6] >>> random.choice(values) 2 >>> random.choice(values) 3 >>> random.choice(values) 1 >>> random.choice(values) 4 >>> random.choice(values) 6 >>> \u4e3a\u4e86\u63d0\u53d6\u51faN\u4e2a\u4e0d\u540c\u5143\u7d20\u7684\u6837\u672c\u7528\u6765\u505a\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528 random.sample() \uff1a >>> random.sample(values, 2) [6, 2] >>> random.sample(values, 2) [4, 3] >>> random.sample(values, 3) [4, 3, 1] >>> random.sample(values, 3) [5, 4, 1] >>> \u6253\u4e71\u5e8f\u5217\u4e2d\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 random.shuffle() \uff1a >>> random.shuffle(values) >>> values [2, 4, 6, 5, 3, 1] >>> random.shuffle(values) >>> values [3, 5, 2, 1, 6, 4] >>> \u751f\u6210\u968f\u673a\u6574\u6570\uff0c\u8bf7\u4f7f\u7528 random.randint() \uff1a >>> random.randint(0,10) 2 >>> random.randint(0,10) 5 >>> random.randint(0,10) 0 >>> random.randint(0,10) 7 >>> random.randint(0,10) 10 >>> random.randint(0,10) 3 >>> \u4e3a\u4e86\u751f\u62100\u52301\u8303\u56f4\u5185\u5747\u5300\u5206\u5e03\u7684\u6d6e\u70b9\u6570\uff0c\u4f7f\u7528 random.random() \uff1a >>> random.random() 0.9406677561675867 >>> random.random() 0.133129581343897 >>> random.random() 0.4144991136919316 >>> \u5982\u679c\u8981\u83b7\u53d6N\u4f4d\u968f\u673a\u4f4d(\u4e8c\u8fdb\u5236)\u7684\u6574\u6570\uff0c\u4f7f\u7528 random.getrandbits() \uff1a >>> random.getrandbits(200) 335837000776573622800628485064121869519521710558559406913275 >>>","title":"random \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#struct","text":"","title":"struct \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#hashlib","text":"","title":"hashlib \u6a21\u5757"},{"location":"03_python/05_%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93/#statistics","text":"","title":"statistics \u6a21\u5757"},{"location":"03_python/06_%E5%B8%B8%E7%94%A8%E4%B8%89%E6%96%B9%E5%BA%93/","text":"psutil \u6a21\u5757 regex \u5e93 \u5728Python\u4e2d\uff0c\u5904\u7406Unicode\u548c\u6b63\u5219\u8868\u8fbe\u5f0f\u6df7\u5408\u4f7f\u7528\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 regex \u5e93\u6765\u589e\u5f3a\u529f\u80fd\u5e76\u7b80\u5316\u64cd\u4f5c\u3002 \u8fd9\u662f\u6807\u51c6\u5e93 re \u7684\u589e\u5f3a\u7248\uff0c\u63d0\u4f9b\u66f4\u5168\u9762\u7684 Unicode \u652f\u6301\uff0c\u5305\u62ec\uff1a \u66f4\u5f3a\u5927\u7684Unicode\u5c5e\u6027\u5339\u914d\uff08\u5982 \\p{Script=Han} \u5339\u914d\u6240\u6709\u6c49\u5b57\uff09\u3002 \u66f4\u597d\u7684\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u5339\u914d\uff08\u652f\u6301Unicode\u5927\u5c0f\u5199\u8f6c\u6362\uff09\u3002 \u6a21\u7cca\u5339\u914d\uff08\u8fd1\u4f3c\u5b57\u7b26\u4e32\u5339\u914d\uff09\u7b49\u9ad8\u7ea7\u529f\u80fd75\u3002 import regex pattern = regex.compile(r'\\p{Script=Han}+') # \u5339\u914d\u6240\u6709\u4e2d\u6587\u5b57\u7b26 print(pattern.findall(\"\u4f60\u597d\uff0c\u4e16\u754c\uff01\")) # \u8f93\u51fa: ['\u4f60\u597d', '\u4e16\u754c']","title":"\u5e38\u7528\u4e09\u65b9\u5e93"},{"location":"03_python/06_%E5%B8%B8%E7%94%A8%E4%B8%89%E6%96%B9%E5%BA%93/#_1","text":"","title":""},{"location":"03_python/06_%E5%B8%B8%E7%94%A8%E4%B8%89%E6%96%B9%E5%BA%93/#psutil","text":"","title":"psutil \u6a21\u5757"},{"location":"03_python/06_%E5%B8%B8%E7%94%A8%E4%B8%89%E6%96%B9%E5%BA%93/#regex","text":"\u5728Python\u4e2d\uff0c\u5904\u7406Unicode\u548c\u6b63\u5219\u8868\u8fbe\u5f0f\u6df7\u5408\u4f7f\u7528\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 regex \u5e93\u6765\u589e\u5f3a\u529f\u80fd\u5e76\u7b80\u5316\u64cd\u4f5c\u3002 \u8fd9\u662f\u6807\u51c6\u5e93 re \u7684\u589e\u5f3a\u7248\uff0c\u63d0\u4f9b\u66f4\u5168\u9762\u7684 Unicode \u652f\u6301\uff0c\u5305\u62ec\uff1a \u66f4\u5f3a\u5927\u7684Unicode\u5c5e\u6027\u5339\u914d\uff08\u5982 \\p{Script=Han} \u5339\u914d\u6240\u6709\u6c49\u5b57\uff09\u3002 \u66f4\u597d\u7684\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u5339\u914d\uff08\u652f\u6301Unicode\u5927\u5c0f\u5199\u8f6c\u6362\uff09\u3002 \u6a21\u7cca\u5339\u914d\uff08\u8fd1\u4f3c\u5b57\u7b26\u4e32\u5339\u914d\uff09\u7b49\u9ad8\u7ea7\u529f\u80fd75\u3002 import regex pattern = regex.compile(r'\\p{Script=Han}+') # \u5339\u914d\u6240\u6709\u4e2d\u6587\u5b57\u7b26 print(pattern.findall(\"\u4f60\u597d\uff0c\u4e16\u754c\uff01\")) # \u8f93\u51fa: ['\u4f60\u597d', '\u4e16\u754c']","title":"regex \u5e93"},{"location":"05_database/mongodb%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/","text":"","title":"mongodb"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/","text":"4 \u68c0\u7d22\uff1a select column from table; select * from table; select distinct column from table; select column from table limit 5; select column from table 5,5; # \u4ece\u884c5\u5f00\u59cb\u76845\u884c 5 \u6392\u5e8f\u68c0\u7d22\u6570\u636e \u9ed8\u8ba4\u4ee5\u6570\u636e\u5e95\u5c42\u8868\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u5c55\u793a\uff0c\u4e0d\u5e94\u8be5\u5047\u5b9a\u68c0\u7d22\u51fa\u6765\u7684\u987a\u5e8f\u6709\u610f\u4e49\u3002 select column from table order by column; # \u4f7f\u7528\u975e\u68c0\u7d22\u7684\u5217\u6392\u5e8f\u4e5f\u662f\u5408\u6cd5\u7684 select column from table order by column, column2; # \u591a\u5217\u6392\u5e8f\uff0c\u53ea\u6709\u5f53\u7b2c\u4e00\u5217\u4e0d\u540c\u65f6\uff0c\u624d\u4f1a\u4f7f\u7528\u7b2c\u4e8c\u5217 select column from table order by column desc; # \u964d\u5e8f\u6392\u5217 select column from table order by column desc, column2; # desc \u76f4\u63a5\u4f5c\u7528\u5b83\u524d\u8fb9\u7684\u5217\uff0c\u591a\u5217\u964d\u5e8f\u9700\u8981\u6bcf\u4e2a\u5217\u90fd\u6307\u5b9a desc select column from table order by column desc limit 1; # limit \u653e\u6700\u540e\uff0c\u8fd9\u91cc\u627e\u5230\u6700\u5927\u7684\u503c 6 \u8fc7\u6ee4\u6570\u636e where\u5b50\u53e5\u64cd\u4f5c\u7b26\uff1a = , != , <, <=, >, >=, BETWEEN select name, price from products where price=2; select name, price from products where price is null; # \u7a7a\u503c NULL \u68c0\u67e5 select name, price from products where price BETWEEN 3 and 5; # \u627e\u52303\u548c5\u4e4b\u95f4\uff0c\u5305\u62ec3\u548c5 7 \u6570\u636e\u8fc7\u6ee4 \u7ec4\u5408 where \u5b50\u53e5\u3002\u6ce8\u610f AND \u4f18\u5148\u7ea7\u9ad8\u4e8e OR\uff0c\u5982\u679c\u5fc5\u8981\u5e94\u8be5\u4f7f\u7528\u62ec\u53f7\uff0c\u5c3d\u91cf\u90fd\u7528\u62ec\u53f7\u9632\u6b62\u6b67\u4e49\u3002 select prod_name, prod_price from products where (vend_id=1002 or vend_id=1003) and prod_price>=10 select name, price from products where price > 3 and price < 5; select name, price from products where price in (3,5); # in \u6bd4\u4f7f\u7528 or \u66f4\u5feb select name, price from products where price not in (3,5); # \u4f7f\u7528 not \u5426\u5b9a\u6761\u4ef6 select Concat(vend_name, '(', vend_country, ')') from vendors order by vend_name; # \u8ba1\u7b97\u5b57\u6bb5 8 \u7528\u901a\u914d\u7b26\u8fc7\u6ee4 LIKE\u64cd\u4f5c\u7b26(\u8c13\u8bcd)\u3002 # %\u8868\u793a\u4efb\u4f55\u5b57\u7b26\u51fa\u73b0\u4efb\u610f\u6b21\u6570\uff0c\u4e0d\u4f1a\u5339\u914d NULL select prod_id,prod_name from products where prod_name LIKE 'jet%'; # \u6ce8\u610f\u5c3e\u7a7a\u683c\u53ef\u80fd\u4f1a \u5e72\u6270\u901a\u914d\u7b26 select prod_id,prod_name from products where prod_name LIKE '%anvil%'; # _ \u53ea\u80fd\u5339\u914d\u5355\u4e2a\u5b57\u7b26 select prod_id,prod_name from products where prod_name LIKE '% ton anvil'; \u6ce8\u610f\uff1a\u4e0d\u8981\u8fc7\u5ea6\u4f7f\u7528\u901a\u914d\u7b26\uff1b\u5c3d\u91cf\u4e0d\u8981\u628a\u901a\u914d\u7b26\u653e\u5728\u5f00\u59cb\u4f4d\u7f6e\uff1b 9 \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u641c\u7d22 mysql \u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5b50\u96c6 REGEXP, LIKE\u5339\u914d\u6574\u4e32 # \u641c\u7d22prod_name \u5305\u542b\u6587\u672c 1000 \u7684\u6240\u6709\u884c select prod_id,prod_name from products where prod_name REGEXP '1000' order by prod_name; select prod_id,prod_name from products where prod_name REGEXP '1000|2000' order by prod_name; # \u641c\u7d22\u4e24\u4e2a\u4e32\u4e4b\u4e00 10 \u521b\u5efa\u8ba1\u7b97\u5b57\u6bb5 \u62fc\u63a5\u5b57\u6bb5\uff1a concat() select concat(vend_name, ' (', vend_country, ')') from vendors order by vend_name; select concat(vend_name, ' (', RTrim(vend_country), ')') from vendors order by vend_name; # RTrim/LTrim/TRim \u53bb\u9664\u7a7a\u683c \u522b\u540d\uff1a\u4f7f\u7528 as \u652f\u6301\u5217 \u522b\u540d select Concat(RTrim(vend_name), ' (', RTrim(vend_country), ')') AS vend_title from vendors order by vend_name; \u7b97\u6570\u8ba1\u7b97\uff1a\u5bf9\u68c0\u7d22\u51fa\u7684\u6570\u636e\u8fdb\u884c\u7b97\u6570\u8ba1\u7b97 select prod_id,quantity,item_price,quantity*item_price AS expanded_price from orderitems where order_num=20005; 11 \u4f7f\u7528\u6570\u636e\u5904\u7406\u51fd\u6570 \u6587\u672c\u3001\u6570\u503c\u8ba1\u7b97\u3001\u65e5\u671f\u5904\u7406\u3001\u7cfb\u7edf\u51fd\u6570\u7b49 # \u6587\u672c\uff1aLeft, Length, Locate, Lower, LTrim, Right, RTrim, Soundex(\u66ff\u6362\u4e3a\u63cf\u8ff0\u8bed\u97f3\u8868\u793a\u7684\u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f), SubString, Upper select vned_name,Upper(vend_name) as vend_name_upcase from vendors order by vend_name; # \u65e5\u671f\uff1aCurDate, Date, Day, Hour, Minute, Month, Now, Second, Time, Year select cust_id,order_num from orders where order_date ='2005-09-01'; select cust_id,order_num from orders where Date(order_date) ='2005-09-01'; # use Date\uff0c\u66f4\u51c6\u786e select cust_id,order_num from orders where Date(order_date) BETWEEN '2005-09-01' and '2005-09-30'; select cust_id,order_num from orders where Year(order_date) =2005 and Month(order_date) =9; # \u6570\u503c\uff1aAbs, Cos, Exp, Mod, Pi, Rand, Sin, Sqrt, Tan 12 \u6c47\u603b\u6570\u636e \u6c47\u603b\u800c\u4e0d\u662f\u68c0\u7d22\u6570\u636e\uff0c\u786e\u5b9a\u884c\u6570\u3001\u83b7\u53d6\u548c\u3001\u627e\u51fa\u6700\u5927\u6700\u5c0f\u5e73\u5747\u503c\u3002 \u4e94\u4e2a\u805a\u96c6\u51fd\u6570\uff08\u8fd0\u884c\u5728\u884c\u7ec4\u4e0a\uff0c\u8ba1\u7b97\u548c\u8fd4\u56de\u5355\u4e2a\u503c\u7684\u51fd\u6570\uff09: avg, count, max, min, sum # avg select avg(price) as avg_price from products; # avg\u4f1a\u5ffd\u7565\u5217\u503c\u4e3a NULL \u7684\u884c # count select count(*) as num_cust from customers; # count(*)\u5bf9\u8868\u4e2d\u7684\u884c\u6570\u8ba1\u7b97\uff0c\u4e0d\u7ba1\u5305\u542b\u7684\u662f NULL \u8fd8\u662f\u975e\u7a7a select count(cust_email) as num_cust from customers; # count(column) \u5ffd\u7565 NULL \u7684\u503c # max\u3001min, \u5ffd\u7565 NULL \u503c select max(prod_price) as max_price FROM products; # sum select sum(quantity) as items_ordered from orderitems where order_num = 20005; # ignore NULL # distince select avg(quantity) as items_ordered from orderitems where order_num = 20005; # ignore NULL 13 \u5206\u7ec4\u6570\u636e group by and having\uff0c\u5206\u7ec4\u5141\u8bb8\u628a\u6570\u636e\u5206\u4e3a\u591a\u4e2a\u903b\u8f91\u7ec4\uff0c\u4ee5\u4fbf\u80fd\u591f\u5bf9\u6bcf\u4e2a\u7ec4\u8fdb\u884c\u805a\u96c6\u8ba1\u7b97\u3002 # \u5206\u7ec4 select vend_id,count(*) as num_prods from products group by vend_id; # \u4f7f\u7528 having \u8fc7\u6ee4\u5206\u7ec4\uff0cwhere \u8fc7\u6ee4\u884c\uff0chaving \u652f\u6301\u6240\u6709\u7684where\u5b50\u53e5\u6761\u4ef6 select cust_id, count(*) as orders from orders group by cust_id having count(*)>=2; # having and where \u4e00\u8d77\u7528 select cust_id, count(*) as orders from orders where prod_price>=10 group by cust_id having count(*)>=2; # order by and group by select order_num, sum(quantity*item_price) as ordertotal from orderitems group by order_num having sum(quantity*item_price)>=50 order by ordertotal; 14 \u4f7f\u7528\u5b50\u67e5\u8be2 \u5b50\u67e5\u8be2\uff1a \u5728SELECT\u8bed\u53e5\u4e2d\uff0c\u5b50\u67e5\u8be2\u603b\u662f\u4ece\u5185\u5411\u5916\u5904\u7406\u3002 # \u5229\u7528\u5b50\u67e5\u8be2\u8fdb\u884c\u8fc7\u6ee4\u3002\u53ef\u4ee5\u628a\u4e00\u6761 select \u8bed\u53e5\u8fd4\u56de\u7684\u7ed3\u679c\u7528\u4e8e\u53e6\u4e00\u6761 select \u8bed\u53e5\u7684 where \u5b50\u53e5 select cust_name, cust_contact from customers where cust_id in (select cust_id from orders where order_num in (select order_num from orderitems where prod_id='TNT2')); # \u53c2\u800315\u7ae0\u4f7f\u7528join \u5904\u7406 # \u4f5c\u4e3a\u8ba1\u7b97\u5b57\u6bb5\u4f7f\u7528\u5b50\u67e5\u8be2\uff0c\u76f8\u5173\u5b50\u67e5\u8be2\u9700\u8981\u9650\u5b9a\u5217\u540d select cust_name, cust_state, (select count(*) from orders where orders.cust_id=customers.cust_id) as orders from customers order by cust_name; 15 \u8054\u7ed3\u8868 # \u5f15\u7528\u7684\u5217\u53ef\u80fd\u51fa\u73b0\u4e8c\u4e49\u6027\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u5217\u540d select vend_name, prod_name, prod_price from vendors, products where vendors.vend_id=products.vend_id order by vend_name,prod_name; # \u5185\u90e8\u8054\u7ed3\uff08\u7b49\u503c\u8054\u7ed3\uff09 select vend_name, prod_name, prod_price from vendors INNER JOIN products on vendors.vend_id = products.vend_id; # \u8fde\u63a5\u591a\u4e2a\u8868\uff0csql \u5bf9\u4e00\u6761 select \u4e2d\u7684\u8fde\u63a5\u7684\u8868\u6570\u76ee\u6ca1\u6709\u9650\u5236\u3002\u5148\u5217\u51fa\u6240\u6709\u8868\uff0c\u7136\u540e\u5b9a\u4e49\u8868\u4e4b\u95f4\u7684\u5173\u7cfb select prod_name,vend_name,prod_price,quantity # 14\u7ae0\u7684\u4f8b\u5b50\u4f7f\u7528 join \u5904\u7406 select cust_name,cust_contact, from customers,orders,orderitems where customers.cust_id=orders.cust_id and orderitems.order_num=orders.order_num and prod_id='TNT2'; 16 \u521b\u5efa\u9ad8\u7ea7\u8054\u7ed3 \u4f55\u65f6\u4f7f\u7528\u8868\u522b\u540d\uff1f\u5141\u8bb8\u5355\u6761 select \u4e2d\u591a\u6b21\u5f15\u7528\u76f8\u540c\u7684\u8868 \u81ea\u8fde\u63a5\uff1a\u7528 as \u8bed\u53e5\u522b\u540d select p1.prod_id,p1.prod_name from products as p1, products as p2 where p1.vend_id=p2.vend_id and p2.prod_id='DTNTR'; \u5916\u90e8\u8054\u7ed3\uff1a\u8054\u7ed3\u5305\u542b\u4e86\u90a3\u4e9b\u5728\u76f8\u5173\u8868\u4e2d\u6ca1\u6709\u5173\u8054\u884c\u7684\u884c\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u8054\u7ed3\u79f0\u4e3a\u5916\u90e8\u8054\u7ed3\u3002 \u4e0e\u5185\u90e8\u8054\u7ed3\u5173\u8054\u4e24\u4e2a\u8868\u4e2d\u7684\u884c\u4e0d\u540c\u7684\u662f\uff0c\u5916\u90e8\u8054\u7ed3\u8fd8\u5305\u62ec\u6ca1\u6709\u5173\u8054\u884c\u7684\u884c\u3002\u5728\u4f7f\u7528OUTER JOIN\u8bed\u6cd5\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528RIGHT\u6216LEFT\u5173\u952e\u5b57\u6307\u5b9a\u5305\u62ec\u5176\u6240\u6709\u884c\u7684\u8868\uff08RIGHT\u6307\u51fa\u7684\u662fOUTER JOIN\u53f3\u8fb9\u7684\u8868\uff0c\u800cLEFT\u6307\u51fa\u7684\u662fOUTER JOIN\u5de6\u8fb9\u7684\u8868\uff09\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4f7f\u7528LEFT OUTER JOIN\u4eceFROM\u5b50\u53e5\u7684\u5de6\u8fb9\u8868\uff08customers\u8868\uff09\u4e2d\u9009\u62e9\u6240\u6709\u884c\u3002\u4e3a \u590d\u5408\u67e5\u8be2\uff1a \u591a\u6570SQL\u67e5\u8be2\u90fd\u53ea\u5305\u542b\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u4e2d\u8fd4\u56de\u6570\u636e\u7684\u5355\u6761SELECT\u8bed\u53e5\u3002MySQL\u4e5f\u5141\u8bb8\u6267\u884c\u591a\u4e2a\u67e5\u8be2\uff08\u591a\u6761SELECT\u8bed\u53e5\uff09\uff0c\u5e76\u5c06\u7ed3\u679c\u4f5c\u4e3a\u5355\u4e2a\u67e5\u8be2\u7ed3\u679c\u96c6\u8fd4\u56de\u3002\u8fd9\u4e9b\u7ec4\u5408\u67e5\u8be2\u901a\u5e38\u79f0\u4e3a\u5e76\uff08union\uff09\u6216\u590d\u5408\u67e5\u8be2\uff08compound query\uff09\u3002 \u4e5f\u53ef\u4ee5\u7528 or \u6761\u4ef6\u5b9e\u73b0\u76f8\u540c\u529f\u80fd\u3002\u7b80\u5316\u590d\u6742 where 17 \u7ec4\u5408\u67e5\u8be2 \u53ef\u4ee5\u7528 union \u64cd\u4f5c\u7b26\u6765\u7ec4\u5408\u591a\u4e2a SQL \u67e5\u8be2\uff0c\u628a\u7ed3\u679c\u5408\u5e76\u6210\u5355\u4e2a\u7ed3\u679c\u96c6\u3002\u4f7f\u7528 union \u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a where \u6761\u4ef6\u66ff\u6362\u3002 # union \u5fc5\u987b\u662f\u76f8\u540c\u7684\u5217\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u662f\u4e0d\u91cd\u590d\u7684\u884c\u3002\u53ef\u4ee5\u4f7f\u7528 union all \u8fd4\u56de\u6240\u6709\u7684\u884c(\u8fd9\u4e2a where \u65e0\u6cd5\u5b8c\u6210) select vend_id,prod_id,prod_price from products where prod_price<=5 union select vend_id,prod_id,prod_price from products wehre vend_id in (1002,1002);","title":"mysql"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#4","text":"select column from table; select * from table; select distinct column from table; select column from table limit 5; select column from table 5,5; # \u4ece\u884c5\u5f00\u59cb\u76845\u884c","title":"4 \u68c0\u7d22\uff1a"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#5","text":"\u9ed8\u8ba4\u4ee5\u6570\u636e\u5e95\u5c42\u8868\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u5c55\u793a\uff0c\u4e0d\u5e94\u8be5\u5047\u5b9a\u68c0\u7d22\u51fa\u6765\u7684\u987a\u5e8f\u6709\u610f\u4e49\u3002 select column from table order by column; # \u4f7f\u7528\u975e\u68c0\u7d22\u7684\u5217\u6392\u5e8f\u4e5f\u662f\u5408\u6cd5\u7684 select column from table order by column, column2; # \u591a\u5217\u6392\u5e8f\uff0c\u53ea\u6709\u5f53\u7b2c\u4e00\u5217\u4e0d\u540c\u65f6\uff0c\u624d\u4f1a\u4f7f\u7528\u7b2c\u4e8c\u5217 select column from table order by column desc; # \u964d\u5e8f\u6392\u5217 select column from table order by column desc, column2; # desc \u76f4\u63a5\u4f5c\u7528\u5b83\u524d\u8fb9\u7684\u5217\uff0c\u591a\u5217\u964d\u5e8f\u9700\u8981\u6bcf\u4e2a\u5217\u90fd\u6307\u5b9a desc select column from table order by column desc limit 1; # limit \u653e\u6700\u540e\uff0c\u8fd9\u91cc\u627e\u5230\u6700\u5927\u7684\u503c","title":"5 \u6392\u5e8f\u68c0\u7d22\u6570\u636e"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#6","text":"where\u5b50\u53e5\u64cd\u4f5c\u7b26\uff1a = , != , <, <=, >, >=, BETWEEN select name, price from products where price=2; select name, price from products where price is null; # \u7a7a\u503c NULL \u68c0\u67e5 select name, price from products where price BETWEEN 3 and 5; # \u627e\u52303\u548c5\u4e4b\u95f4\uff0c\u5305\u62ec3\u548c5","title":"6 \u8fc7\u6ee4\u6570\u636e"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#7","text":"\u7ec4\u5408 where \u5b50\u53e5\u3002\u6ce8\u610f AND \u4f18\u5148\u7ea7\u9ad8\u4e8e OR\uff0c\u5982\u679c\u5fc5\u8981\u5e94\u8be5\u4f7f\u7528\u62ec\u53f7\uff0c\u5c3d\u91cf\u90fd\u7528\u62ec\u53f7\u9632\u6b62\u6b67\u4e49\u3002 select prod_name, prod_price from products where (vend_id=1002 or vend_id=1003) and prod_price>=10 select name, price from products where price > 3 and price < 5; select name, price from products where price in (3,5); # in \u6bd4\u4f7f\u7528 or \u66f4\u5feb select name, price from products where price not in (3,5); # \u4f7f\u7528 not \u5426\u5b9a\u6761\u4ef6 select Concat(vend_name, '(', vend_country, ')') from vendors order by vend_name; # \u8ba1\u7b97\u5b57\u6bb5","title":"7 \u6570\u636e\u8fc7\u6ee4"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#8","text":"LIKE\u64cd\u4f5c\u7b26(\u8c13\u8bcd)\u3002 # %\u8868\u793a\u4efb\u4f55\u5b57\u7b26\u51fa\u73b0\u4efb\u610f\u6b21\u6570\uff0c\u4e0d\u4f1a\u5339\u914d NULL select prod_id,prod_name from products where prod_name LIKE 'jet%'; # \u6ce8\u610f\u5c3e\u7a7a\u683c\u53ef\u80fd\u4f1a \u5e72\u6270\u901a\u914d\u7b26 select prod_id,prod_name from products where prod_name LIKE '%anvil%'; # _ \u53ea\u80fd\u5339\u914d\u5355\u4e2a\u5b57\u7b26 select prod_id,prod_name from products where prod_name LIKE '% ton anvil'; \u6ce8\u610f\uff1a\u4e0d\u8981\u8fc7\u5ea6\u4f7f\u7528\u901a\u914d\u7b26\uff1b\u5c3d\u91cf\u4e0d\u8981\u628a\u901a\u914d\u7b26\u653e\u5728\u5f00\u59cb\u4f4d\u7f6e\uff1b","title":"8 \u7528\u901a\u914d\u7b26\u8fc7\u6ee4"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#9","text":"mysql \u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5b50\u96c6 REGEXP, LIKE\u5339\u914d\u6574\u4e32 # \u641c\u7d22prod_name \u5305\u542b\u6587\u672c 1000 \u7684\u6240\u6709\u884c select prod_id,prod_name from products where prod_name REGEXP '1000' order by prod_name; select prod_id,prod_name from products where prod_name REGEXP '1000|2000' order by prod_name; # \u641c\u7d22\u4e24\u4e2a\u4e32\u4e4b\u4e00","title":"9 \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u641c\u7d22"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#10","text":"\u62fc\u63a5\u5b57\u6bb5\uff1a concat() select concat(vend_name, ' (', vend_country, ')') from vendors order by vend_name; select concat(vend_name, ' (', RTrim(vend_country), ')') from vendors order by vend_name; # RTrim/LTrim/TRim \u53bb\u9664\u7a7a\u683c \u522b\u540d\uff1a\u4f7f\u7528 as \u652f\u6301\u5217 \u522b\u540d select Concat(RTrim(vend_name), ' (', RTrim(vend_country), ')') AS vend_title from vendors order by vend_name; \u7b97\u6570\u8ba1\u7b97\uff1a\u5bf9\u68c0\u7d22\u51fa\u7684\u6570\u636e\u8fdb\u884c\u7b97\u6570\u8ba1\u7b97 select prod_id,quantity,item_price,quantity*item_price AS expanded_price from orderitems where order_num=20005;","title":"10 \u521b\u5efa\u8ba1\u7b97\u5b57\u6bb5"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#11","text":"\u6587\u672c\u3001\u6570\u503c\u8ba1\u7b97\u3001\u65e5\u671f\u5904\u7406\u3001\u7cfb\u7edf\u51fd\u6570\u7b49 # \u6587\u672c\uff1aLeft, Length, Locate, Lower, LTrim, Right, RTrim, Soundex(\u66ff\u6362\u4e3a\u63cf\u8ff0\u8bed\u97f3\u8868\u793a\u7684\u5b57\u6bcd\u6570\u5b57\u6a21\u5f0f), SubString, Upper select vned_name,Upper(vend_name) as vend_name_upcase from vendors order by vend_name; # \u65e5\u671f\uff1aCurDate, Date, Day, Hour, Minute, Month, Now, Second, Time, Year select cust_id,order_num from orders where order_date ='2005-09-01'; select cust_id,order_num from orders where Date(order_date) ='2005-09-01'; # use Date\uff0c\u66f4\u51c6\u786e select cust_id,order_num from orders where Date(order_date) BETWEEN '2005-09-01' and '2005-09-30'; select cust_id,order_num from orders where Year(order_date) =2005 and Month(order_date) =9; # \u6570\u503c\uff1aAbs, Cos, Exp, Mod, Pi, Rand, Sin, Sqrt, Tan","title":"11 \u4f7f\u7528\u6570\u636e\u5904\u7406\u51fd\u6570"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#12","text":"\u6c47\u603b\u800c\u4e0d\u662f\u68c0\u7d22\u6570\u636e\uff0c\u786e\u5b9a\u884c\u6570\u3001\u83b7\u53d6\u548c\u3001\u627e\u51fa\u6700\u5927\u6700\u5c0f\u5e73\u5747\u503c\u3002 \u4e94\u4e2a\u805a\u96c6\u51fd\u6570\uff08\u8fd0\u884c\u5728\u884c\u7ec4\u4e0a\uff0c\u8ba1\u7b97\u548c\u8fd4\u56de\u5355\u4e2a\u503c\u7684\u51fd\u6570\uff09: avg, count, max, min, sum # avg select avg(price) as avg_price from products; # avg\u4f1a\u5ffd\u7565\u5217\u503c\u4e3a NULL \u7684\u884c # count select count(*) as num_cust from customers; # count(*)\u5bf9\u8868\u4e2d\u7684\u884c\u6570\u8ba1\u7b97\uff0c\u4e0d\u7ba1\u5305\u542b\u7684\u662f NULL \u8fd8\u662f\u975e\u7a7a select count(cust_email) as num_cust from customers; # count(column) \u5ffd\u7565 NULL \u7684\u503c # max\u3001min, \u5ffd\u7565 NULL \u503c select max(prod_price) as max_price FROM products; # sum select sum(quantity) as items_ordered from orderitems where order_num = 20005; # ignore NULL # distince select avg(quantity) as items_ordered from orderitems where order_num = 20005; # ignore NULL","title":"12 \u6c47\u603b\u6570\u636e"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#13","text":"group by and having\uff0c\u5206\u7ec4\u5141\u8bb8\u628a\u6570\u636e\u5206\u4e3a\u591a\u4e2a\u903b\u8f91\u7ec4\uff0c\u4ee5\u4fbf\u80fd\u591f\u5bf9\u6bcf\u4e2a\u7ec4\u8fdb\u884c\u805a\u96c6\u8ba1\u7b97\u3002 # \u5206\u7ec4 select vend_id,count(*) as num_prods from products group by vend_id; # \u4f7f\u7528 having \u8fc7\u6ee4\u5206\u7ec4\uff0cwhere \u8fc7\u6ee4\u884c\uff0chaving \u652f\u6301\u6240\u6709\u7684where\u5b50\u53e5\u6761\u4ef6 select cust_id, count(*) as orders from orders group by cust_id having count(*)>=2; # having and where \u4e00\u8d77\u7528 select cust_id, count(*) as orders from orders where prod_price>=10 group by cust_id having count(*)>=2; # order by and group by select order_num, sum(quantity*item_price) as ordertotal from orderitems group by order_num having sum(quantity*item_price)>=50 order by ordertotal;","title":"13 \u5206\u7ec4\u6570\u636e"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#14","text":"\u5b50\u67e5\u8be2\uff1a \u5728SELECT\u8bed\u53e5\u4e2d\uff0c\u5b50\u67e5\u8be2\u603b\u662f\u4ece\u5185\u5411\u5916\u5904\u7406\u3002 # \u5229\u7528\u5b50\u67e5\u8be2\u8fdb\u884c\u8fc7\u6ee4\u3002\u53ef\u4ee5\u628a\u4e00\u6761 select \u8bed\u53e5\u8fd4\u56de\u7684\u7ed3\u679c\u7528\u4e8e\u53e6\u4e00\u6761 select \u8bed\u53e5\u7684 where \u5b50\u53e5 select cust_name, cust_contact from customers where cust_id in (select cust_id from orders where order_num in (select order_num from orderitems where prod_id='TNT2')); # \u53c2\u800315\u7ae0\u4f7f\u7528join \u5904\u7406 # \u4f5c\u4e3a\u8ba1\u7b97\u5b57\u6bb5\u4f7f\u7528\u5b50\u67e5\u8be2\uff0c\u76f8\u5173\u5b50\u67e5\u8be2\u9700\u8981\u9650\u5b9a\u5217\u540d select cust_name, cust_state, (select count(*) from orders where orders.cust_id=customers.cust_id) as orders from customers order by cust_name;","title":"14 \u4f7f\u7528\u5b50\u67e5\u8be2"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#15","text":"# \u5f15\u7528\u7684\u5217\u53ef\u80fd\u51fa\u73b0\u4e8c\u4e49\u6027\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528\u5b8c\u5168\u9650\u5b9a\u5217\u540d select vend_name, prod_name, prod_price from vendors, products where vendors.vend_id=products.vend_id order by vend_name,prod_name; # \u5185\u90e8\u8054\u7ed3\uff08\u7b49\u503c\u8054\u7ed3\uff09 select vend_name, prod_name, prod_price from vendors INNER JOIN products on vendors.vend_id = products.vend_id; # \u8fde\u63a5\u591a\u4e2a\u8868\uff0csql \u5bf9\u4e00\u6761 select \u4e2d\u7684\u8fde\u63a5\u7684\u8868\u6570\u76ee\u6ca1\u6709\u9650\u5236\u3002\u5148\u5217\u51fa\u6240\u6709\u8868\uff0c\u7136\u540e\u5b9a\u4e49\u8868\u4e4b\u95f4\u7684\u5173\u7cfb select prod_name,vend_name,prod_price,quantity # 14\u7ae0\u7684\u4f8b\u5b50\u4f7f\u7528 join \u5904\u7406 select cust_name,cust_contact, from customers,orders,orderitems where customers.cust_id=orders.cust_id and orderitems.order_num=orders.order_num and prod_id='TNT2';","title":"15 \u8054\u7ed3\u8868"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#16","text":"\u4f55\u65f6\u4f7f\u7528\u8868\u522b\u540d\uff1f\u5141\u8bb8\u5355\u6761 select \u4e2d\u591a\u6b21\u5f15\u7528\u76f8\u540c\u7684\u8868 \u81ea\u8fde\u63a5\uff1a\u7528 as \u8bed\u53e5\u522b\u540d select p1.prod_id,p1.prod_name from products as p1, products as p2 where p1.vend_id=p2.vend_id and p2.prod_id='DTNTR'; \u5916\u90e8\u8054\u7ed3\uff1a\u8054\u7ed3\u5305\u542b\u4e86\u90a3\u4e9b\u5728\u76f8\u5173\u8868\u4e2d\u6ca1\u6709\u5173\u8054\u884c\u7684\u884c\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u8054\u7ed3\u79f0\u4e3a\u5916\u90e8\u8054\u7ed3\u3002 \u4e0e\u5185\u90e8\u8054\u7ed3\u5173\u8054\u4e24\u4e2a\u8868\u4e2d\u7684\u884c\u4e0d\u540c\u7684\u662f\uff0c\u5916\u90e8\u8054\u7ed3\u8fd8\u5305\u62ec\u6ca1\u6709\u5173\u8054\u884c\u7684\u884c\u3002\u5728\u4f7f\u7528OUTER JOIN\u8bed\u6cd5\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528RIGHT\u6216LEFT\u5173\u952e\u5b57\u6307\u5b9a\u5305\u62ec\u5176\u6240\u6709\u884c\u7684\u8868\uff08RIGHT\u6307\u51fa\u7684\u662fOUTER JOIN\u53f3\u8fb9\u7684\u8868\uff0c\u800cLEFT\u6307\u51fa\u7684\u662fOUTER JOIN\u5de6\u8fb9\u7684\u8868\uff09\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4f7f\u7528LEFT OUTER JOIN\u4eceFROM\u5b50\u53e5\u7684\u5de6\u8fb9\u8868\uff08customers\u8868\uff09\u4e2d\u9009\u62e9\u6240\u6709\u884c\u3002\u4e3a \u590d\u5408\u67e5\u8be2\uff1a \u591a\u6570SQL\u67e5\u8be2\u90fd\u53ea\u5305\u542b\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u4e2d\u8fd4\u56de\u6570\u636e\u7684\u5355\u6761SELECT\u8bed\u53e5\u3002MySQL\u4e5f\u5141\u8bb8\u6267\u884c\u591a\u4e2a\u67e5\u8be2\uff08\u591a\u6761SELECT\u8bed\u53e5\uff09\uff0c\u5e76\u5c06\u7ed3\u679c\u4f5c\u4e3a\u5355\u4e2a\u67e5\u8be2\u7ed3\u679c\u96c6\u8fd4\u56de\u3002\u8fd9\u4e9b\u7ec4\u5408\u67e5\u8be2\u901a\u5e38\u79f0\u4e3a\u5e76\uff08union\uff09\u6216\u590d\u5408\u67e5\u8be2\uff08compound query\uff09\u3002 \u4e5f\u53ef\u4ee5\u7528 or \u6761\u4ef6\u5b9e\u73b0\u76f8\u540c\u529f\u80fd\u3002\u7b80\u5316\u590d\u6742 where","title":"16 \u521b\u5efa\u9ad8\u7ea7\u8054\u7ed3"},{"location":"05_database/mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#17","text":"\u53ef\u4ee5\u7528 union \u64cd\u4f5c\u7b26\u6765\u7ec4\u5408\u591a\u4e2a SQL \u67e5\u8be2\uff0c\u628a\u7ed3\u679c\u5408\u5e76\u6210\u5355\u4e2a\u7ed3\u679c\u96c6\u3002\u4f7f\u7528 union \u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a where \u6761\u4ef6\u66ff\u6362\u3002 # union \u5fc5\u987b\u662f\u76f8\u540c\u7684\u5217\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u662f\u4e0d\u91cd\u590d\u7684\u884c\u3002\u53ef\u4ee5\u4f7f\u7528 union all \u8fd4\u56de\u6240\u6709\u7684\u884c(\u8fd9\u4e2a where \u65e0\u6cd5\u5b8c\u6210) select vend_id,prod_id,prod_price from products where prod_price<=5 union select vend_id,prod_id,prod_price from products wehre vend_id in (1002,1002);","title":"17 \u7ec4\u5408\u67e5\u8be2"},{"location":"05_database/redis%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/","text":"","title":"redis"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/","text":"HTTP \u5728Web\u5e94\u7528\u4e2d\uff0c\u670d\u52a1\u5668\u628a\u7f51\u9875\u4f20\u7ed9\u6d4f\u89c8\u5668\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u7f51\u9875\u7684HTML\u4ee3\u7801\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\uff0c\u8ba9\u6d4f\u89c8\u5668\u663e\u793a\u51fa\u6765\u3002\u800c\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u4f20\u8f93\u534f\u8bae\u662fHTTP\uff0c\u6240\u4ee5\uff1a HTML\u662f\u4e00\u79cd\u7528\u6765\u5b9a\u4e49\u7f51\u9875\u7684\u6587\u672c\uff0c\u4f1aHTML\uff0c\u5c31\u53ef\u4ee5\u7f16\u5199\u7f51\u9875\uff1b HTTP\u662f\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93HTML\u7684\u534f\u8bae\uff0c\u7528\u4e8e\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u7684\u901a\u4fe1\u3002 HTML \u7f51\u9875\u5c31\u662fHTML\uff1f\u8fd9\u4e48\u7406\u89e3\u5927\u6982\u6ca1\u9519\u3002\u56e0\u4e3a\u7f51\u9875\u4e2d\u4e0d\u4f46\u5305\u542b\u6587\u5b57\uff0c\u8fd8\u6709\u56fe\u7247\u3001\u89c6\u9891\u3001HTML5\u5c0f\u6e38\u620f\uff0c\u6709\u590d\u6742\u7684\u6392\u7248\u3001\u52a8\u753b\u6548\u679c\uff0c\u6240\u4ee5\uff0cHTML\u5b9a\u4e49\u4e86\u4e00\u5957\u8bed\u6cd5\u89c4\u5219\uff0c\u6765\u544a\u8bc9\u6d4f\u89c8\u5668\u5982\u4f55\u628a\u4e00\u4e2a\u4e30\u5bcc\u591a\u5f69\u7684\u9875\u9762\u663e\u793a\u51fa\u6765\u3002 <html> <head> <title>Hello</title> </head> <body> <h1>Hello, world!</h1> </body> </html> CSS\u7b80\u4ecb CSS\u662fCascading Style Sheets\uff08\u5c42\u53e0\u6837\u5f0f\u8868\uff09\u7684\u7b80\u79f0\uff0cCSS\u7528\u6765\u63a7\u5236HTML\u91cc\u7684\u6240\u6709\u5143\u7d20\u5982\u4f55\u5c55\u73b0\uff0c\u6bd4\u5982\uff0c\u7ed9\u6807\u9898\u5143\u7d20 <h1> \u52a0\u4e00\u4e2a\u6837\u5f0f\uff0c\u53d8\u621048\u53f7\u5b57\u4f53\uff0c\u7070\u8272\uff0c\u5e26\u9634\u5f71\uff1a <html> <head> <title>Hello</title> <style> h1 { color: #333333; font-size: 48px; text-shadow: 3px 3px 3px #666666; } </style> </head> <body> <h1>Hello, world!</h1> </body> </html> JavaScript\u7b80\u4ecb JavaScript\u867d\u7136\u540d\u79f0\u6709\u4e2aJava\uff0c\u4f46\u5b83\u548cJava\u771f\u7684\u4e00\u70b9\u5173\u7cfb\u6ca1\u6709\u3002JavaScript\u662f\u4e3a\u4e86\u8ba9HTML\u5177\u6709\u4ea4\u4e92\u6027\u800c\u4f5c\u4e3a\u811a\u672c\u8bed\u8a00\u6dfb\u52a0\u7684\uff0cJavaScript\u65e2\u53ef\u4ee5\u5185\u5d4c\u5230HTML\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5916\u90e8\u94fe\u63a5\u5230HTML\u4e2d\u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5f53\u7528\u6237\u70b9\u51fb\u6807\u9898\u65f6\u628a\u6807\u9898\u53d8\u6210\u7ea2\u8272\uff0c\u5c31\u5fc5\u987b\u901a\u8fc7JavaScript\u6765\u5b9e\u73b0\uff1a <html> <head> <title>Hello</title> <style> h1 { color: #333333; font-size: 48px; text-shadow: 3px 3px 3px #666666; } </style> <script> function change() { document.getElementsByTagName('h1')[0].style.color = '#ff0000'; } </script> </head> <body> <h1 onclick=\"change()\">Hello, world!</h1> </body> </html> CGI CGI\uff08Common Gateway Interface\uff09\u901a\u7528\u7f51\u5173\u63a5\u53e3\uff0c\u662f\u4e00\u4e2a\u534f\u8bae\uff0c\u662f\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\uff08CGI \u7a0b\u5e8f\uff09\u4e0e Web \u670d\u52a1\u5668\u4e4b\u95f4\u7684\u63a5\u53e3\u6807\u51c6\uff0c\u8be5\u534f\u8bae\u5b9a\u4e49\u4e86 Web \u670d\u52a1\u5668\u8c03\u7528\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u7684\u65f6\u5019\u9700\u8981\u8f93\u5165\u7684\u53c2\u6570\uff0c\u548c\u7ed9 Web \u670d\u52a1\u5668\u7684\u8fd4\u56de\u7ed3\u679c\u3002 \u901a\u4fd7\u6765\u8bf4\uff0c\u5b83\u89c4\u5b9a\u4e00\u4e2a\u7a0b\u5e8f\u8be5\u5982\u4f55\u4e0e Web \u670d\u52a1\u5668\u7a0b\u5e8f\u4e4b\u95f4\u901a\u4fe1\uff0c\u4ece\u800c\u53ef\u4ee5\u8ba9\u8fd9\u4e2a\u7a0b\u5e8f\u8dd1\u5728 Web \u670d\u52a1\u5668\u4e0a\u3002 \u6bcf\u5f53\u5ba2\u6237\u8bf7\u6c42 CGI \u7684\u65f6\u5019\uff0cWEB\u670d\u52a1\u5668\u5c31\u8bf7\u6c42\u64cd\u4f5c\u7cfb\u7edf\u751f\u6210\u4e00\u4e2a\u65b0\u7684CGI\u89e3\u91ca\u5668\u8fdb\u7a0b\uff08\u5982 php-cgi.exe\uff09\uff0cCGI \u7684\u4e00\u4e2a\u8fdb\u7a0b\u5219\u5904\u7406\u5b8c\u4e00\u4e2a\u8bf7\u6c42\u540e\u9000\u51fa\uff0c\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u6765\u65f6\u518d\u521b\u5efa\u65b0\u8fdb\u7a0b\u3002\u5f53\u7136\uff0c\u8fd9\u6837\u5728\u8bbf\u95ee\u91cf\u5f88\u5c11\u6ca1\u6709\u5e76\u53d1\u7684\u60c5\u51b5\u4e5f\u884c\u3002\u4f46\u5f53\u8bbf\u95ee\u91cf\u589e\u5927\uff0c\u5e76\u53d1\u5b58\u5728\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5c31\u4e0d\u9002\u5408\u4e86\uff0c\u4e8e\u662f\u5c31\u6709\u4e86FastCGI FastCGI FASTCGI \u662f Web \u670d\u52a1\u5668\uff08ex:Nginx\uff09\u548c\u8bed\u8a00\u89e3\u91ca\u5668\uff08ex:uWsgi\uff09\u4e24\u8005\u5e95\u5c42\u7684\u901a\u4fe1\u534f\u8bae\u7684\u89c4\u8303\uff0c\u662f\u5bf9CGI\u7684\u5f00\u653e\u7684\u6269\u5c55\u3002 CGI\u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u50cf\u662f\u4e00\u4e2a\u5e38\u9a7b\uff08long-live\uff09\u578b\u7684CGI \uff0c\u5e9f\u9664\u4e86 CGI fork-and-execute \uff08\u6765\u4e00\u4e2a\u8bf7\u6c42 fork \u4e00\u4e2a\u65b0\u8fdb\u7a0b\u5904\u7406\uff0c\u5904\u7406\u5b8c\u518d\u628a\u8fdb\u7a0b kill \u6389\uff09\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u8f6c\u800c\u4f7f\u7528\u4e00\u79cd\u957f\u751f\u5b58\u671f\u7684\u65b9\u6cd5\uff0c\u51cf\u5c11\u4e86\u8fdb\u7a0b\u6d88\u8017\uff0c\u63d0\u5347\u4e86\u6027\u80fd\u3002 \u800cFastCGI \u5219\u4f1a\u5148 fork \u4e00\u4e2a master \u8fdb\u7a0b\uff0c\u89e3\u6790\u914d\u7f6e\u6587\u4ef6\uff0c\u521d\u59cb\u5316\u6267\u884c\u73af\u5883\uff0c\u7136\u540e\u518d fork \u591a\u4e2a worker \u8fdb\u7a0b\uff08\u4e0e Nginx \u6709\u70b9\u50cf\uff09\uff0c\u5f53 HTTP \u8bf7\u6c42\u8fc7\u6765\u65f6\uff0cmaster \u8fdb\u7a0b\u5c06\u5176\u4f1a\u4f20\u9012\u7ed9\u4e00\u4e2a worker \u8fdb\u7a0b\uff0c\u7136\u540e\u7acb\u5373\u53ef\u4ee5\u63a5\u53d7\u4e0b\u4e00\u4e2a\u8bf7\u6c42\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u91cd\u590d\u7684\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u6548\u7387\u81ea\u7136\u4e5f\u5c31\u63d0\u9ad8\u4e86\u3002 \u800c\u4e14\u5f53 worker \u8fdb\u7a0b\u4e0d\u591f\u7528\u65f6\uff0cmaster \u8fdb\u7a0b\u8fd8\u53ef\u4ee5\u6839\u636e\u914d\u7f6e\u9884\u5148\u542f\u52a8\u51e0\u4e2a worker \u8fdb\u7a0b\u7b49\u7740\uff1b\u5f53\u7a7a\u95f2 worker \u8fdb\u7a0b\u592a\u591a\u65f6\uff0c\u4e5f\u4f1a\u5173\u6389\u4e00\u4e9b\uff0c\u8fd9\u6837\u4e0d\u4ec5\u63d0\u9ad8\u4e86\u6027\u80fd\uff0c\u8fd8\u8282\u7ea6\u4e86\u7cfb\u7edf\u8d44\u6e90 WSGI WSGI\uff0c\uff08WEB SERVER GATEWAY INTERFACE\uff09\uff0cWeb\u670d\u52a1\u5668\u7f51\u5173\u63a5\u53e3\uff0c\u662f\u4e00\u79cdWeb\u670d\u52a1\u5668\u7f51\u5173\u63a5\u53e3\uff0c\u5b83\u662f\u4e00\u4e2aWeb\u670d\u52a1\u5668\uff08\u5982Nginx\uff0cuWSGI\u7b49\u670d\u52a1\u5668\uff09\u4e0eWeb\u5e94\u7528\uff08\u5982Flask\u6846\u67b6\u5199\u7684\u7a0b\u5e8f\uff09\u901a\u4fe1\u7684\u4e00\u79cd\u89c4\u8303\u3002\u5f53\u524d\u8fd0\u884c\u5728WSGI\u534f\u8bae\u4e4b\u4e0a\u7684Web\u6846\u67b6\u6709Bottle\uff0cFlask\uff0cDjango\u3002 uwsgi \u540cWSGI\u4e00\u6837\u662f\u4e00\u79cd\u901a\u4fe1\u534f\u8bae uwsgi\u534f\u8bae\u662f\u4e00\u4e2auWSGI\u670d\u52a1\u5668\u81ea\u6709\u7684\u534f\u8bae\uff0c\u5b83\u7528\u4e8e\u5b9a\u4e49\u4f20\u8f93\u4fe1\u606f\u7684\u7c7b\u578b\uff08type of information\uff09\uff0c\u6bcf\u4e00\u4e2auwsgi packet\u524d4byte\u4e3a\u4f20\u8f93\u4fe1\u606f\u7c7b\u578b\u63cf\u8ff0\uff0c\u5b83\u4e0eWSGI\u76f8\u6bd4\u662f\u4e24\u6837\u4e1c\u897f\u3002 uWSGI \u5b83\u662f\u4e00\u4e2aWeb\u670d\u52a1\u5668\uff0c\u5b83\u5b9e\u73b0\u4e86WSGI\u534f\u8bae\u3001uwsgi\u3001http\u7b49\u534f\u8bae\u3002\u7528\u4e8e\u63a5\u6536\u524d\u7aef\u670d\u52a1\u5668\u8f6c\u53d1\u7684\u52a8\u6001\u8bf7\u6c42\u5e76\u5904\u7406\u540e\u53d1\u7ed9 Web \u5e94\u7528\u7a0b\u5e8f\u3002 uWSGI\u662f\u4f7f\u7528C\u7f16\u5199\u7684\uff0c\u663e\u793a\u4e86\u81ea\u6709\u7684uwsgi\u534f\u8bae\u7684Web\u670d\u52a1\u5668\u3002\u5b83\u81ea\u5e26\u4e30\u5bcc\u7684\u7ec4\u4ef6\uff0c\u5176\u4e2d\u6838\u5fc3\u7ec4\u4ef6\u5305\u542b\u8fdb\u7a0b\u7ba1\u7406\u3001\u76d1\u63a7\u3001IPC\u7b49\u529f\u80fd\uff0c\u5b9e\u73b0\u5e94\u7528\u670d\u52a1\u5668\u63a5\u53e3\u7684\u8bf7\u6c42\u63d2\u4ef6\u652f\u6301\u591a\u79cd\u8bed\u8a00\u548c\u5e73\u53f0\uff0c\u6bd4\u5982WSGI\u3001Rack\u3001Lua WSAPI\uff0c\u7f51\u7ba1\u7ec4\u4ef6\u5b9e\u73b0\u4e86\u8d1f\u8f7d\u5747\u8861\u3001\u4ee3\u7406\u548c\u7406\u7531\u529f\u80fd\u3002 uWSGI\u4e5f\u53ef\u4ee5\u5f53\u505a\u4e2d\u95f4\u4ef6\u3002 \u5982\u679c\u662fNginx+uWSGI+App\uff0c\u90a3uWSGI\u5c31\u662f\u4e00\u4e2a\u4e2d\u95f4\u4ef6 \u5982\u679c\u662fuWSGI+App\uff0c\u90a3\u5b83\u5c31\u662f\u670d\u52a1\u5668 \u5047\u8bbe\u6211\u4eec\u4f7f\u7528 Python \u7684 Django \u6846\u67b6\u5199\u4e86\u4e00\u4e2a\u7f51\u7ad9\uff0c\u73b0\u5728\u8981\u5c06\u5b83\u6302\u5728\u7f51\u4e0a\u8fd0\u884c\uff0c\u6211\u4eec\u4e00\u822c\u9700\u8981\uff1a Nginx \u505a\u4e3a\u4ee3\u7406\u670d\u52a1\u5668\uff1a\u8d1f\u8d23\u9759\u6001\u8d44\u6e90\u53d1\u9001\uff08js\u3001css\u3001\u56fe\u7247\u7b49\uff09\u3001\u52a8\u6001\u8bf7\u6c42\u8f6c\u53d1\u4ee5\u53ca\u7ed3\u679c\u7684\u56de\u590d\u3002 uWSGI \u505a\u4e3a\u540e\u7aef\u670d\u52a1\u5668\uff1a\u8d1f\u8d23\u63a5\u6536 Nginx \u8f6c\u53d1\u7684\u8bf7\u6c42\u5e76\u5904\u7406\u540e\u53d1\u7ed9 Django \u5e94\u7528\u4ee5\u53ca\u63a5\u6536 Django \u5e94\u7528\u8fd4\u56de\u4fe1\u606f\u8f6c\u53d1\u7ed9 Nginx\u3002 Django \u5e94\u7528\u6536\u5230\u8bf7\u6c42\u540e\u5904\u7406\u6570\u636e\u5e76\u6e32\u67d3\u76f8\u5e94\u7684\u8fd4\u56de\u9875\u9762\u7ed9 uWSGI \u670d\u52a1\u5668\u3002 \u4e00\u4e2aDjango\u5e94\u7528\uff0c\u901a\u8fc7WSGI\u534f\u8bae\u8fde\u63a5uWSGI\u670d\u52a1\u5668\uff0cuWSGI\u670d\u52a1\u5668\u5b9e\u73b0WSGI\u3001http\u7b49\u534f\u8bae\uff0c\u901a\u8fc7uwsgi\u534f\u8bae\u548cNginx\u670d\u52a1\u5668\u5b9e\u73b0http\u7684\u52a8\u6001\u8bf7\u6c42\u548c\u8f6c\u53d1\u4ee5\u53ca\u7ed3\u679c\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684WSGI\u5e94\u7528\u7a0b\u5e8f\u793a\u4f8b\uff1a def application(environ, start_response): status = '200 OK' response_headers = [('Content-type', 'text/plain')] start_response(status, response_headers) return [b'Hello, World!'] \u4f7f\u7528 uwsgi \u542f\u52a8\u8be5\u5e94\u7528\uff1a uwsgi --http :8080 --wsgi-file codes/03_python/p_05.py Nginx \u4e00\u4e2a\u666e\u901a\u7684\u4e2a\u4eba\u7f51\u7ad9\uff0c\u8bbf\u95ee\u91cf\u4e0d\u5927\u7684\u8bdd\uff0c\u5f53\u7136\u53ef\u4ee5\u7531 uWSGI \u548c Django \u6784\u6210\u3002\u4f46\u662f\u4e00\u65e6\u8bbf\u95ee\u91cf\u8fc7\u5927\uff0c\u5ba2\u6237\u7aef\u8bf7\u6c42\u8fde\u63a5\u5c31\u8981\u8fdb\u884c\u957f\u65f6\u95f4\u7684\u7b49\u5f85\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u51fa\u6765\u4e86\u5206\u5e03\u5f0f\u670d\u52a1\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u591a\u6765\u51e0\u53f0 Web \u670d\u52a1\u5668\uff0c\u90fd\u80fd\u5904\u7406\u8bf7\u6c42\u3002 \u4f46\u662f\u8c01\u6765\u5206\u914d\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8fde\u63a5\u548c Web \u670d\u52a1\u5668\u5462\uff1fNginx \u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u7ba1\u5bb6\u7684\u5b58\u5728\uff0c\u7531\u5b83\u6765\u5206\u914d\u3002\u8fd9\u4e5f\u5c31\u662f\u7531 Nginx \u5b9e\u73b0\u53cd\u5411\u4ee3\u7406\uff0c\u5373\u4ee3\u7406\u670d\u52a1\u5668\u3002 Nginx \u662f\u4e00\u4e2a HTTP \u548c\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668 \u6b63\u5411\u4ee3\u7406\uff1a\u6b63\u5411\u7684\u5c31\u662f\u7531\u6d4f\u89c8\u5668\u4e3b\u52a8\u7684\u60f3\u4ee3\u7406\u670d\u52a1\u5668\u53d1\u51fa\u8bf7\u6c42\uff0c\u7ecf\u4ee3\u7406\u670d\u52a1\u5668\u505a\u51fa\u5904\u7406\u540e\u518d\u8f6c\u7ed9\u76ee\u6807\u670d\u52a1\u5668 \u53cd\u5411\u4ee3\u7406\uff1a\u53cd\u5411\u7684\u5c31\u662f\u4e0d\u7ba1\u6d4f\u89c8\u5668\u540c\u4e0d\u540c\u610f\uff0c\u8bf7\u6c42\u90fd\u4f1a\u7ecf\u8fc7\u4ee3\u7406\u670d\u52a1\u5668\u5904\u7406\u518d\u53d1\u7ed9\u76ee\u6807\u670d\u52a1\u5668 \u4f7f\u7528Nginx\u4f5c\u4e3a\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668\u7684\u597d\u5904\uff1a \u5b89\u5168 \u4e0d\u7ba1\u4ec0\u4e48\u8bf7\u6c42\u90fd\u8981\u7ecf\u8fc7\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u907f\u514d\u5916\u90e8\u7a0b\u5e8f\u76f4\u63a5\u653b\u51fbWeb\u670d\u52a1\u5668 \u8d1f\u8f7d\u5747\u8861 \u6839\u636e\u8bf7\u6c42\u60c5\u51b5\u548c\u670d\u52a1\u5668\u8d1f\u8f7d\u60c5\u51b5\uff0c\u5c06\u8bf7\u6c42\u5206\u914d\u7ed9\u4e0d\u540c\u7684Web\u670d\u52a1\u5668\uff0c\u4fdd\u8bc1\u670d\u52a1\u5668\u6027\u80fd \u63d0\u9ad8Web\u670d\u52a1\u5668\u7684IO\u6027\u80fd \u8bf7\u6c42\u4ece\u5ba2\u6237\u7aef\u4f20\u5230Web\u670d\u52a1\u5668\u662f\u9700\u8981\u65f6\u95f4\u7684\uff0c\u4f20\u9012\u591a\u957f\u65f6\u95f4\u5c31\u4f1a\u8ba9\u8fd9\u4e2a\u8fdb\u7a0b\u963b\u585e\u591a\u957f\u65f6\u95f4\uff0c\u800c\u901a\u8fc7\u53cd\u5411\u4ee3\u7406\uff0c\u5c31\u53ef\u4ee5\u7531\u53cd\u5411\u4ee3\u7406\u5b8c\u6574\u63a5\u53d7\u8be5\u8bf7\u6c42\uff0c\u7136\u540e\u518d\u4f20\u7ed9Web\u670d\u52a1\u5668\uff0c\u4ece\u800c\u4fdd\u8bc1\u670d\u52a1\u5668\u6027\u80fd\uff0c\u800c\u4e14\u6709\u7684\u4e00\u4e9b\u7b80\u5355\u7684\u4e8b\u60c5\uff08\u6bd4\u5982\u9759\u6001\u6587\u4ef6\uff09\u53ef\u4ee5\u76f4\u63a5\u7531\u53cd\u5411\u4ee3\u7406\u5904\u7406\uff0c\u4e0d\u7ecf\u8fc7Web\u670d\u52a1\u5668\u3002 ASGI \u5f02\u6b65\u7f51\u5173\u534f\u8bae\u63a5\u53e3\uff0c\u4e00\u4e2a\u4ecb\u4e8e\u7f51\u7edc\u534f\u8bae\u670d\u52a1\u548cPython\u5e94\u7528\u4e4b\u95f4\u7684\u6807\u51c6\u63a5\u53e3\uff0c\u80fd\u591f\u5904\u7406\u591a\u79cd\u901a\u7528\u7684\u534f\u8bae\u7c7b\u578b\uff0c\u5305\u62ecHTTP\uff0cHTTP2\u548cWebSocket\u3002 \u7136\u800c\u76ee\u524d\u7684\u5e38\u7528\u7684WSGI\u4e3b\u8981\u662f\u9488\u5bf9HTTP\u98ce\u683c\u7684\u8bf7\u6c42\u54cd\u5e94\u6a21\u578b\u505a\u7684\u8bbe\u8ba1\uff0c\u5e76\u4e14\u8d8a\u6765\u8d8a\u591a\u7684\u4e0d\u9075\u5faa\u8fd9\u79cd\u6a21\u5f0f\u7684\u534f\u8bae\u9010\u6e10\u6210\u4e3aWeb\u53d8\u6210\u7684\u6807\u51c6\u4e4b\u4e00\uff0c\u4f8b\u5982WebSocket\u3002 ASGI\u5c1d\u8bd5\u4fdd\u6301\u5728\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u63a5\u53e3\u7684\u524d\u63d0\u4e0b\uff0c\u63d0\u4f9b\u5141\u8bb8\u6570\u636e\u80fd\u591f\u5728\u4efb\u610f\u7684\u65f6\u5019\u3001\u88ab\u4efb\u610f\u5e94\u7528\u8fdb\u7a0b\u53d1\u9001\u548c\u63a5\u53d7\u7684\u62bd\u8c61\u3002\u5e76\u4e14\u540c\u6837\u63cf\u8ff0\u4e86\u4e00\u4e2a\u65b0\u7684\uff0c\u517c\u5bb9HTTP\u8bf7\u6c42\u54cd\u5e94\u4ee5\u53caWebSocket\u6570\u636e\u5e27\u7684\u5e8f\u5217\u683c\u5f0f\u3002\u5141\u8bb8\u8fd9\u4e9b\u534f\u8bae\u80fd\u901a\u8fc7\u7f51\u7edc\u6216\u672c\u5730socket\u8fdb\u884c\u4f20\u8f93\uff0c\u4ee5\u53ca\u8ba9\u4e0d\u540c\u7684\u534f\u8bae\u88ab\u5206\u914d\u5230\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\u3002 WSGI\u548cASGI\u7684\u533a\u522b WSGI\u662f\u57fa\u4e8eHTTP\u534f\u8bae\u6a21\u5f0f\u7684\uff0c\u4e0d\u652f\u6301WebSocket\uff0c\u800cASGI\u7684\u8bde\u751f\u5219\u662f\u4e3a\u4e86\u89e3\u51b3Python\u5e38\u7528\u7684WSGI\u4e0d\u652f\u6301\u5f53\u524dWeb\u5f00\u53d1\u4e2d\u7684\u4e00\u4e9b\u65b0\u7684\u534f\u8bae\u6807\u51c6\u3002\u540c\u65f6\uff0cASGI\u5bf9\u4e8eWSGI\u539f\u6709\u7684\u6a21\u5f0f\u7684\u652f\u6301\u548cWebSocket\u7684\u6269\u5c55\uff0c\u5373ASGI\u662fWSGI\u7684\u6269\u5c55\u3002 Web \u670d\u52a1\u5668\u548c Web\u6846\u67b6 Web\u670d\u52a1\u5668\u5373\u7528\u6765\u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u5efa\u7acb\u8fde\u63a5\uff0c\u8f6c\u53d1\u54cd\u5e94\u7684\u7a0b\u5e8f\u3002\u81f3\u4e8e\u8f6c\u53d1\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\uff0c\u4ea4\u7531Web\u6846\u67b6\u6765\u5904\u7406\uff0c\u5373\u5904\u7406\u8fd9\u4e9b\u4e1a\u52a1\u903b\u8f91\u3002\u5982\u67e5\u8be2\u6570\u636e\u5e93\u3001\u751f\u6210\u5b9e\u65f6\u4fe1\u606f\u7b49\u3002Nginx\u5c31\u662f\u4e00\u4e2aWeb\u670d\u52a1\u5668\uff0cDjango\u6216flask\u5c31\u662fWeb\u6846\u67b6\u3002 \u90a3\u4e48\u5982\u4f55\u5b9e\u73b0uWSGI\u548cWSGI\u7684\u914d\u5408\u5462\uff1f\u5982\u4f55\u505a\u5230\u4efb\u610f\u4e00\u4e2aWeb\u670d\u52a1\u5668\uff0c\u90fd\u80fd\u642d\u914d\u4efb\u610f\u4e00\u4e2a\u6846\u67b6\u5462\uff1f\u8fd9\u5c31\u4ea7\u751f\u4e86WSGI\u534f\u8bae\u3002\u53ea\u8981Web\u670d\u52a1\u5668\u548cWeb\u6846\u67b6\u6ee1\u8db3WSGI\u534f\u8bae\uff0c\u5b83\u4eec\u5c31\u80fd\u76f8\u4e92\u642d\u914d\u3002\u6240\u4ee5WSGI\u53ea\u662f\u4e00\u4e2a\u534f\u8bae\uff0c\u4e00\u4e2a\u7ea6\u5b9a\u3002\u800c\u4e0d\u662fPython\u7684\u6a21\u5757\u3001\u6846\u67b6\u7b49\u5177\u4f53\u7684\u529f\u80fd\u3002 \u800cuWSGI\uff0c\u5219\u662f\u5b9e\u73b0\u4e86WSGI\u534f\u8bae\u7684\u4e00\u4e2aWeb\u670d\u52a1\u5668\u3002\u5373\u7528\u6765\u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u8f6c\u53d1\u54cd\u5e94\u7684\u7a0b\u5e8f\u3002\u5b9e\u9645\u4e0a\uff0c\u4e00\u4e2auWSGI\u7684Web\u670d\u52a1\u5668\uff0c\u518d\u52a0\u4e0aDjango\u8fd9\u6837\u7684Web\u6846\u67b6\uff0c\u5c31\u5df2\u7ecf\u53ef\u4ee5\u5b9e\u73b0\u7f51\u7ad9\u7684\u529f\u80fd\u4e86\u3002","title":"web\u5f00\u53d1"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#_1","text":"","title":""},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#http","text":"\u5728Web\u5e94\u7528\u4e2d\uff0c\u670d\u52a1\u5668\u628a\u7f51\u9875\u4f20\u7ed9\u6d4f\u89c8\u5668\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u7f51\u9875\u7684HTML\u4ee3\u7801\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\uff0c\u8ba9\u6d4f\u89c8\u5668\u663e\u793a\u51fa\u6765\u3002\u800c\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u4f20\u8f93\u534f\u8bae\u662fHTTP\uff0c\u6240\u4ee5\uff1a HTML\u662f\u4e00\u79cd\u7528\u6765\u5b9a\u4e49\u7f51\u9875\u7684\u6587\u672c\uff0c\u4f1aHTML\uff0c\u5c31\u53ef\u4ee5\u7f16\u5199\u7f51\u9875\uff1b HTTP\u662f\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93HTML\u7684\u534f\u8bae\uff0c\u7528\u4e8e\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u7684\u901a\u4fe1\u3002","title":"HTTP"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#html","text":"\u7f51\u9875\u5c31\u662fHTML\uff1f\u8fd9\u4e48\u7406\u89e3\u5927\u6982\u6ca1\u9519\u3002\u56e0\u4e3a\u7f51\u9875\u4e2d\u4e0d\u4f46\u5305\u542b\u6587\u5b57\uff0c\u8fd8\u6709\u56fe\u7247\u3001\u89c6\u9891\u3001HTML5\u5c0f\u6e38\u620f\uff0c\u6709\u590d\u6742\u7684\u6392\u7248\u3001\u52a8\u753b\u6548\u679c\uff0c\u6240\u4ee5\uff0cHTML\u5b9a\u4e49\u4e86\u4e00\u5957\u8bed\u6cd5\u89c4\u5219\uff0c\u6765\u544a\u8bc9\u6d4f\u89c8\u5668\u5982\u4f55\u628a\u4e00\u4e2a\u4e30\u5bcc\u591a\u5f69\u7684\u9875\u9762\u663e\u793a\u51fa\u6765\u3002 <html> <head> <title>Hello</title> </head> <body> <h1>Hello, world!</h1> </body> </html>","title":"HTML"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#css","text":"CSS\u662fCascading Style Sheets\uff08\u5c42\u53e0\u6837\u5f0f\u8868\uff09\u7684\u7b80\u79f0\uff0cCSS\u7528\u6765\u63a7\u5236HTML\u91cc\u7684\u6240\u6709\u5143\u7d20\u5982\u4f55\u5c55\u73b0\uff0c\u6bd4\u5982\uff0c\u7ed9\u6807\u9898\u5143\u7d20 <h1> \u52a0\u4e00\u4e2a\u6837\u5f0f\uff0c\u53d8\u621048\u53f7\u5b57\u4f53\uff0c\u7070\u8272\uff0c\u5e26\u9634\u5f71\uff1a <html> <head> <title>Hello</title> <style> h1 { color: #333333; font-size: 48px; text-shadow: 3px 3px 3px #666666; } </style> </head> <body> <h1>Hello, world!</h1> </body> </html>","title":"CSS\u7b80\u4ecb"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#javascript","text":"JavaScript\u867d\u7136\u540d\u79f0\u6709\u4e2aJava\uff0c\u4f46\u5b83\u548cJava\u771f\u7684\u4e00\u70b9\u5173\u7cfb\u6ca1\u6709\u3002JavaScript\u662f\u4e3a\u4e86\u8ba9HTML\u5177\u6709\u4ea4\u4e92\u6027\u800c\u4f5c\u4e3a\u811a\u672c\u8bed\u8a00\u6dfb\u52a0\u7684\uff0cJavaScript\u65e2\u53ef\u4ee5\u5185\u5d4c\u5230HTML\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5916\u90e8\u94fe\u63a5\u5230HTML\u4e2d\u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5f53\u7528\u6237\u70b9\u51fb\u6807\u9898\u65f6\u628a\u6807\u9898\u53d8\u6210\u7ea2\u8272\uff0c\u5c31\u5fc5\u987b\u901a\u8fc7JavaScript\u6765\u5b9e\u73b0\uff1a <html> <head> <title>Hello</title> <style> h1 { color: #333333; font-size: 48px; text-shadow: 3px 3px 3px #666666; } </style> <script> function change() { document.getElementsByTagName('h1')[0].style.color = '#ff0000'; } </script> </head> <body> <h1 onclick=\"change()\">Hello, world!</h1> </body> </html>","title":"JavaScript\u7b80\u4ecb"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#cgi","text":"CGI\uff08Common Gateway Interface\uff09\u901a\u7528\u7f51\u5173\u63a5\u53e3\uff0c\u662f\u4e00\u4e2a\u534f\u8bae\uff0c\u662f\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\uff08CGI \u7a0b\u5e8f\uff09\u4e0e Web \u670d\u52a1\u5668\u4e4b\u95f4\u7684\u63a5\u53e3\u6807\u51c6\uff0c\u8be5\u534f\u8bae\u5b9a\u4e49\u4e86 Web \u670d\u52a1\u5668\u8c03\u7528\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u7684\u65f6\u5019\u9700\u8981\u8f93\u5165\u7684\u53c2\u6570\uff0c\u548c\u7ed9 Web \u670d\u52a1\u5668\u7684\u8fd4\u56de\u7ed3\u679c\u3002 \u901a\u4fd7\u6765\u8bf4\uff0c\u5b83\u89c4\u5b9a\u4e00\u4e2a\u7a0b\u5e8f\u8be5\u5982\u4f55\u4e0e Web \u670d\u52a1\u5668\u7a0b\u5e8f\u4e4b\u95f4\u901a\u4fe1\uff0c\u4ece\u800c\u53ef\u4ee5\u8ba9\u8fd9\u4e2a\u7a0b\u5e8f\u8dd1\u5728 Web \u670d\u52a1\u5668\u4e0a\u3002 \u6bcf\u5f53\u5ba2\u6237\u8bf7\u6c42 CGI \u7684\u65f6\u5019\uff0cWEB\u670d\u52a1\u5668\u5c31\u8bf7\u6c42\u64cd\u4f5c\u7cfb\u7edf\u751f\u6210\u4e00\u4e2a\u65b0\u7684CGI\u89e3\u91ca\u5668\u8fdb\u7a0b\uff08\u5982 php-cgi.exe\uff09\uff0cCGI \u7684\u4e00\u4e2a\u8fdb\u7a0b\u5219\u5904\u7406\u5b8c\u4e00\u4e2a\u8bf7\u6c42\u540e\u9000\u51fa\uff0c\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u6765\u65f6\u518d\u521b\u5efa\u65b0\u8fdb\u7a0b\u3002\u5f53\u7136\uff0c\u8fd9\u6837\u5728\u8bbf\u95ee\u91cf\u5f88\u5c11\u6ca1\u6709\u5e76\u53d1\u7684\u60c5\u51b5\u4e5f\u884c\u3002\u4f46\u5f53\u8bbf\u95ee\u91cf\u589e\u5927\uff0c\u5e76\u53d1\u5b58\u5728\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5c31\u4e0d\u9002\u5408\u4e86\uff0c\u4e8e\u662f\u5c31\u6709\u4e86FastCGI","title":"CGI"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#fastcgi","text":"FASTCGI \u662f Web \u670d\u52a1\u5668\uff08ex:Nginx\uff09\u548c\u8bed\u8a00\u89e3\u91ca\u5668\uff08ex:uWsgi\uff09\u4e24\u8005\u5e95\u5c42\u7684\u901a\u4fe1\u534f\u8bae\u7684\u89c4\u8303\uff0c\u662f\u5bf9CGI\u7684\u5f00\u653e\u7684\u6269\u5c55\u3002 CGI\u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u50cf\u662f\u4e00\u4e2a\u5e38\u9a7b\uff08long-live\uff09\u578b\u7684CGI \uff0c\u5e9f\u9664\u4e86 CGI fork-and-execute \uff08\u6765\u4e00\u4e2a\u8bf7\u6c42 fork \u4e00\u4e2a\u65b0\u8fdb\u7a0b\u5904\u7406\uff0c\u5904\u7406\u5b8c\u518d\u628a\u8fdb\u7a0b kill \u6389\uff09\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u8f6c\u800c\u4f7f\u7528\u4e00\u79cd\u957f\u751f\u5b58\u671f\u7684\u65b9\u6cd5\uff0c\u51cf\u5c11\u4e86\u8fdb\u7a0b\u6d88\u8017\uff0c\u63d0\u5347\u4e86\u6027\u80fd\u3002 \u800cFastCGI \u5219\u4f1a\u5148 fork \u4e00\u4e2a master \u8fdb\u7a0b\uff0c\u89e3\u6790\u914d\u7f6e\u6587\u4ef6\uff0c\u521d\u59cb\u5316\u6267\u884c\u73af\u5883\uff0c\u7136\u540e\u518d fork \u591a\u4e2a worker \u8fdb\u7a0b\uff08\u4e0e Nginx \u6709\u70b9\u50cf\uff09\uff0c\u5f53 HTTP \u8bf7\u6c42\u8fc7\u6765\u65f6\uff0cmaster \u8fdb\u7a0b\u5c06\u5176\u4f1a\u4f20\u9012\u7ed9\u4e00\u4e2a worker \u8fdb\u7a0b\uff0c\u7136\u540e\u7acb\u5373\u53ef\u4ee5\u63a5\u53d7\u4e0b\u4e00\u4e2a\u8bf7\u6c42\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u91cd\u590d\u7684\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u6548\u7387\u81ea\u7136\u4e5f\u5c31\u63d0\u9ad8\u4e86\u3002 \u800c\u4e14\u5f53 worker \u8fdb\u7a0b\u4e0d\u591f\u7528\u65f6\uff0cmaster \u8fdb\u7a0b\u8fd8\u53ef\u4ee5\u6839\u636e\u914d\u7f6e\u9884\u5148\u542f\u52a8\u51e0\u4e2a worker \u8fdb\u7a0b\u7b49\u7740\uff1b\u5f53\u7a7a\u95f2 worker \u8fdb\u7a0b\u592a\u591a\u65f6\uff0c\u4e5f\u4f1a\u5173\u6389\u4e00\u4e9b\uff0c\u8fd9\u6837\u4e0d\u4ec5\u63d0\u9ad8\u4e86\u6027\u80fd\uff0c\u8fd8\u8282\u7ea6\u4e86\u7cfb\u7edf\u8d44\u6e90","title":"FastCGI"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#wsgi","text":"WSGI\uff0c\uff08WEB SERVER GATEWAY INTERFACE\uff09\uff0cWeb\u670d\u52a1\u5668\u7f51\u5173\u63a5\u53e3\uff0c\u662f\u4e00\u79cdWeb\u670d\u52a1\u5668\u7f51\u5173\u63a5\u53e3\uff0c\u5b83\u662f\u4e00\u4e2aWeb\u670d\u52a1\u5668\uff08\u5982Nginx\uff0cuWSGI\u7b49\u670d\u52a1\u5668\uff09\u4e0eWeb\u5e94\u7528\uff08\u5982Flask\u6846\u67b6\u5199\u7684\u7a0b\u5e8f\uff09\u901a\u4fe1\u7684\u4e00\u79cd\u89c4\u8303\u3002\u5f53\u524d\u8fd0\u884c\u5728WSGI\u534f\u8bae\u4e4b\u4e0a\u7684Web\u6846\u67b6\u6709Bottle\uff0cFlask\uff0cDjango\u3002","title":"WSGI"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#uwsgi","text":"\u540cWSGI\u4e00\u6837\u662f\u4e00\u79cd\u901a\u4fe1\u534f\u8bae uwsgi\u534f\u8bae\u662f\u4e00\u4e2auWSGI\u670d\u52a1\u5668\u81ea\u6709\u7684\u534f\u8bae\uff0c\u5b83\u7528\u4e8e\u5b9a\u4e49\u4f20\u8f93\u4fe1\u606f\u7684\u7c7b\u578b\uff08type of information\uff09\uff0c\u6bcf\u4e00\u4e2auwsgi packet\u524d4byte\u4e3a\u4f20\u8f93\u4fe1\u606f\u7c7b\u578b\u63cf\u8ff0\uff0c\u5b83\u4e0eWSGI\u76f8\u6bd4\u662f\u4e24\u6837\u4e1c\u897f\u3002","title":"uwsgi"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#uwsgi_1","text":"\u5b83\u662f\u4e00\u4e2aWeb\u670d\u52a1\u5668\uff0c\u5b83\u5b9e\u73b0\u4e86WSGI\u534f\u8bae\u3001uwsgi\u3001http\u7b49\u534f\u8bae\u3002\u7528\u4e8e\u63a5\u6536\u524d\u7aef\u670d\u52a1\u5668\u8f6c\u53d1\u7684\u52a8\u6001\u8bf7\u6c42\u5e76\u5904\u7406\u540e\u53d1\u7ed9 Web \u5e94\u7528\u7a0b\u5e8f\u3002 uWSGI\u662f\u4f7f\u7528C\u7f16\u5199\u7684\uff0c\u663e\u793a\u4e86\u81ea\u6709\u7684uwsgi\u534f\u8bae\u7684Web\u670d\u52a1\u5668\u3002\u5b83\u81ea\u5e26\u4e30\u5bcc\u7684\u7ec4\u4ef6\uff0c\u5176\u4e2d\u6838\u5fc3\u7ec4\u4ef6\u5305\u542b\u8fdb\u7a0b\u7ba1\u7406\u3001\u76d1\u63a7\u3001IPC\u7b49\u529f\u80fd\uff0c\u5b9e\u73b0\u5e94\u7528\u670d\u52a1\u5668\u63a5\u53e3\u7684\u8bf7\u6c42\u63d2\u4ef6\u652f\u6301\u591a\u79cd\u8bed\u8a00\u548c\u5e73\u53f0\uff0c\u6bd4\u5982WSGI\u3001Rack\u3001Lua WSAPI\uff0c\u7f51\u7ba1\u7ec4\u4ef6\u5b9e\u73b0\u4e86\u8d1f\u8f7d\u5747\u8861\u3001\u4ee3\u7406\u548c\u7406\u7531\u529f\u80fd\u3002 uWSGI\u4e5f\u53ef\u4ee5\u5f53\u505a\u4e2d\u95f4\u4ef6\u3002 \u5982\u679c\u662fNginx+uWSGI+App\uff0c\u90a3uWSGI\u5c31\u662f\u4e00\u4e2a\u4e2d\u95f4\u4ef6 \u5982\u679c\u662fuWSGI+App\uff0c\u90a3\u5b83\u5c31\u662f\u670d\u52a1\u5668 \u5047\u8bbe\u6211\u4eec\u4f7f\u7528 Python \u7684 Django \u6846\u67b6\u5199\u4e86\u4e00\u4e2a\u7f51\u7ad9\uff0c\u73b0\u5728\u8981\u5c06\u5b83\u6302\u5728\u7f51\u4e0a\u8fd0\u884c\uff0c\u6211\u4eec\u4e00\u822c\u9700\u8981\uff1a Nginx \u505a\u4e3a\u4ee3\u7406\u670d\u52a1\u5668\uff1a\u8d1f\u8d23\u9759\u6001\u8d44\u6e90\u53d1\u9001\uff08js\u3001css\u3001\u56fe\u7247\u7b49\uff09\u3001\u52a8\u6001\u8bf7\u6c42\u8f6c\u53d1\u4ee5\u53ca\u7ed3\u679c\u7684\u56de\u590d\u3002 uWSGI \u505a\u4e3a\u540e\u7aef\u670d\u52a1\u5668\uff1a\u8d1f\u8d23\u63a5\u6536 Nginx \u8f6c\u53d1\u7684\u8bf7\u6c42\u5e76\u5904\u7406\u540e\u53d1\u7ed9 Django \u5e94\u7528\u4ee5\u53ca\u63a5\u6536 Django \u5e94\u7528\u8fd4\u56de\u4fe1\u606f\u8f6c\u53d1\u7ed9 Nginx\u3002 Django \u5e94\u7528\u6536\u5230\u8bf7\u6c42\u540e\u5904\u7406\u6570\u636e\u5e76\u6e32\u67d3\u76f8\u5e94\u7684\u8fd4\u56de\u9875\u9762\u7ed9 uWSGI \u670d\u52a1\u5668\u3002 \u4e00\u4e2aDjango\u5e94\u7528\uff0c\u901a\u8fc7WSGI\u534f\u8bae\u8fde\u63a5uWSGI\u670d\u52a1\u5668\uff0cuWSGI\u670d\u52a1\u5668\u5b9e\u73b0WSGI\u3001http\u7b49\u534f\u8bae\uff0c\u901a\u8fc7uwsgi\u534f\u8bae\u548cNginx\u670d\u52a1\u5668\u5b9e\u73b0http\u7684\u52a8\u6001\u8bf7\u6c42\u548c\u8f6c\u53d1\u4ee5\u53ca\u7ed3\u679c\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684WSGI\u5e94\u7528\u7a0b\u5e8f\u793a\u4f8b\uff1a def application(environ, start_response): status = '200 OK' response_headers = [('Content-type', 'text/plain')] start_response(status, response_headers) return [b'Hello, World!'] \u4f7f\u7528 uwsgi \u542f\u52a8\u8be5\u5e94\u7528\uff1a uwsgi --http :8080 --wsgi-file codes/03_python/p_05.py","title":"uWSGI"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#nginx","text":"\u4e00\u4e2a\u666e\u901a\u7684\u4e2a\u4eba\u7f51\u7ad9\uff0c\u8bbf\u95ee\u91cf\u4e0d\u5927\u7684\u8bdd\uff0c\u5f53\u7136\u53ef\u4ee5\u7531 uWSGI \u548c Django \u6784\u6210\u3002\u4f46\u662f\u4e00\u65e6\u8bbf\u95ee\u91cf\u8fc7\u5927\uff0c\u5ba2\u6237\u7aef\u8bf7\u6c42\u8fde\u63a5\u5c31\u8981\u8fdb\u884c\u957f\u65f6\u95f4\u7684\u7b49\u5f85\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u51fa\u6765\u4e86\u5206\u5e03\u5f0f\u670d\u52a1\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u591a\u6765\u51e0\u53f0 Web \u670d\u52a1\u5668\uff0c\u90fd\u80fd\u5904\u7406\u8bf7\u6c42\u3002 \u4f46\u662f\u8c01\u6765\u5206\u914d\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u8fde\u63a5\u548c Web \u670d\u52a1\u5668\u5462\uff1fNginx \u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u7ba1\u5bb6\u7684\u5b58\u5728\uff0c\u7531\u5b83\u6765\u5206\u914d\u3002\u8fd9\u4e5f\u5c31\u662f\u7531 Nginx \u5b9e\u73b0\u53cd\u5411\u4ee3\u7406\uff0c\u5373\u4ee3\u7406\u670d\u52a1\u5668\u3002 Nginx \u662f\u4e00\u4e2a HTTP \u548c\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668 \u6b63\u5411\u4ee3\u7406\uff1a\u6b63\u5411\u7684\u5c31\u662f\u7531\u6d4f\u89c8\u5668\u4e3b\u52a8\u7684\u60f3\u4ee3\u7406\u670d\u52a1\u5668\u53d1\u51fa\u8bf7\u6c42\uff0c\u7ecf\u4ee3\u7406\u670d\u52a1\u5668\u505a\u51fa\u5904\u7406\u540e\u518d\u8f6c\u7ed9\u76ee\u6807\u670d\u52a1\u5668 \u53cd\u5411\u4ee3\u7406\uff1a\u53cd\u5411\u7684\u5c31\u662f\u4e0d\u7ba1\u6d4f\u89c8\u5668\u540c\u4e0d\u540c\u610f\uff0c\u8bf7\u6c42\u90fd\u4f1a\u7ecf\u8fc7\u4ee3\u7406\u670d\u52a1\u5668\u5904\u7406\u518d\u53d1\u7ed9\u76ee\u6807\u670d\u52a1\u5668 \u4f7f\u7528Nginx\u4f5c\u4e3a\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668\u7684\u597d\u5904\uff1a \u5b89\u5168 \u4e0d\u7ba1\u4ec0\u4e48\u8bf7\u6c42\u90fd\u8981\u7ecf\u8fc7\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u907f\u514d\u5916\u90e8\u7a0b\u5e8f\u76f4\u63a5\u653b\u51fbWeb\u670d\u52a1\u5668 \u8d1f\u8f7d\u5747\u8861 \u6839\u636e\u8bf7\u6c42\u60c5\u51b5\u548c\u670d\u52a1\u5668\u8d1f\u8f7d\u60c5\u51b5\uff0c\u5c06\u8bf7\u6c42\u5206\u914d\u7ed9\u4e0d\u540c\u7684Web\u670d\u52a1\u5668\uff0c\u4fdd\u8bc1\u670d\u52a1\u5668\u6027\u80fd \u63d0\u9ad8Web\u670d\u52a1\u5668\u7684IO\u6027\u80fd \u8bf7\u6c42\u4ece\u5ba2\u6237\u7aef\u4f20\u5230Web\u670d\u52a1\u5668\u662f\u9700\u8981\u65f6\u95f4\u7684\uff0c\u4f20\u9012\u591a\u957f\u65f6\u95f4\u5c31\u4f1a\u8ba9\u8fd9\u4e2a\u8fdb\u7a0b\u963b\u585e\u591a\u957f\u65f6\u95f4\uff0c\u800c\u901a\u8fc7\u53cd\u5411\u4ee3\u7406\uff0c\u5c31\u53ef\u4ee5\u7531\u53cd\u5411\u4ee3\u7406\u5b8c\u6574\u63a5\u53d7\u8be5\u8bf7\u6c42\uff0c\u7136\u540e\u518d\u4f20\u7ed9Web\u670d\u52a1\u5668\uff0c\u4ece\u800c\u4fdd\u8bc1\u670d\u52a1\u5668\u6027\u80fd\uff0c\u800c\u4e14\u6709\u7684\u4e00\u4e9b\u7b80\u5355\u7684\u4e8b\u60c5\uff08\u6bd4\u5982\u9759\u6001\u6587\u4ef6\uff09\u53ef\u4ee5\u76f4\u63a5\u7531\u53cd\u5411\u4ee3\u7406\u5904\u7406\uff0c\u4e0d\u7ecf\u8fc7Web\u670d\u52a1\u5668\u3002","title":"Nginx"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#asgi","text":"\u5f02\u6b65\u7f51\u5173\u534f\u8bae\u63a5\u53e3\uff0c\u4e00\u4e2a\u4ecb\u4e8e\u7f51\u7edc\u534f\u8bae\u670d\u52a1\u548cPython\u5e94\u7528\u4e4b\u95f4\u7684\u6807\u51c6\u63a5\u53e3\uff0c\u80fd\u591f\u5904\u7406\u591a\u79cd\u901a\u7528\u7684\u534f\u8bae\u7c7b\u578b\uff0c\u5305\u62ecHTTP\uff0cHTTP2\u548cWebSocket\u3002 \u7136\u800c\u76ee\u524d\u7684\u5e38\u7528\u7684WSGI\u4e3b\u8981\u662f\u9488\u5bf9HTTP\u98ce\u683c\u7684\u8bf7\u6c42\u54cd\u5e94\u6a21\u578b\u505a\u7684\u8bbe\u8ba1\uff0c\u5e76\u4e14\u8d8a\u6765\u8d8a\u591a\u7684\u4e0d\u9075\u5faa\u8fd9\u79cd\u6a21\u5f0f\u7684\u534f\u8bae\u9010\u6e10\u6210\u4e3aWeb\u53d8\u6210\u7684\u6807\u51c6\u4e4b\u4e00\uff0c\u4f8b\u5982WebSocket\u3002 ASGI\u5c1d\u8bd5\u4fdd\u6301\u5728\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u63a5\u53e3\u7684\u524d\u63d0\u4e0b\uff0c\u63d0\u4f9b\u5141\u8bb8\u6570\u636e\u80fd\u591f\u5728\u4efb\u610f\u7684\u65f6\u5019\u3001\u88ab\u4efb\u610f\u5e94\u7528\u8fdb\u7a0b\u53d1\u9001\u548c\u63a5\u53d7\u7684\u62bd\u8c61\u3002\u5e76\u4e14\u540c\u6837\u63cf\u8ff0\u4e86\u4e00\u4e2a\u65b0\u7684\uff0c\u517c\u5bb9HTTP\u8bf7\u6c42\u54cd\u5e94\u4ee5\u53caWebSocket\u6570\u636e\u5e27\u7684\u5e8f\u5217\u683c\u5f0f\u3002\u5141\u8bb8\u8fd9\u4e9b\u534f\u8bae\u80fd\u901a\u8fc7\u7f51\u7edc\u6216\u672c\u5730socket\u8fdb\u884c\u4f20\u8f93\uff0c\u4ee5\u53ca\u8ba9\u4e0d\u540c\u7684\u534f\u8bae\u88ab\u5206\u914d\u5230\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\u3002 WSGI\u548cASGI\u7684\u533a\u522b WSGI\u662f\u57fa\u4e8eHTTP\u534f\u8bae\u6a21\u5f0f\u7684\uff0c\u4e0d\u652f\u6301WebSocket\uff0c\u800cASGI\u7684\u8bde\u751f\u5219\u662f\u4e3a\u4e86\u89e3\u51b3Python\u5e38\u7528\u7684WSGI\u4e0d\u652f\u6301\u5f53\u524dWeb\u5f00\u53d1\u4e2d\u7684\u4e00\u4e9b\u65b0\u7684\u534f\u8bae\u6807\u51c6\u3002\u540c\u65f6\uff0cASGI\u5bf9\u4e8eWSGI\u539f\u6709\u7684\u6a21\u5f0f\u7684\u652f\u6301\u548cWebSocket\u7684\u6269\u5c55\uff0c\u5373ASGI\u662fWSGI\u7684\u6269\u5c55\u3002","title":"ASGI"},{"location":"07_web/01_web%E5%BC%80%E5%8F%91/#web-web","text":"Web\u670d\u52a1\u5668\u5373\u7528\u6765\u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u5efa\u7acb\u8fde\u63a5\uff0c\u8f6c\u53d1\u54cd\u5e94\u7684\u7a0b\u5e8f\u3002\u81f3\u4e8e\u8f6c\u53d1\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\uff0c\u4ea4\u7531Web\u6846\u67b6\u6765\u5904\u7406\uff0c\u5373\u5904\u7406\u8fd9\u4e9b\u4e1a\u52a1\u903b\u8f91\u3002\u5982\u67e5\u8be2\u6570\u636e\u5e93\u3001\u751f\u6210\u5b9e\u65f6\u4fe1\u606f\u7b49\u3002Nginx\u5c31\u662f\u4e00\u4e2aWeb\u670d\u52a1\u5668\uff0cDjango\u6216flask\u5c31\u662fWeb\u6846\u67b6\u3002 \u90a3\u4e48\u5982\u4f55\u5b9e\u73b0uWSGI\u548cWSGI\u7684\u914d\u5408\u5462\uff1f\u5982\u4f55\u505a\u5230\u4efb\u610f\u4e00\u4e2aWeb\u670d\u52a1\u5668\uff0c\u90fd\u80fd\u642d\u914d\u4efb\u610f\u4e00\u4e2a\u6846\u67b6\u5462\uff1f\u8fd9\u5c31\u4ea7\u751f\u4e86WSGI\u534f\u8bae\u3002\u53ea\u8981Web\u670d\u52a1\u5668\u548cWeb\u6846\u67b6\u6ee1\u8db3WSGI\u534f\u8bae\uff0c\u5b83\u4eec\u5c31\u80fd\u76f8\u4e92\u642d\u914d\u3002\u6240\u4ee5WSGI\u53ea\u662f\u4e00\u4e2a\u534f\u8bae\uff0c\u4e00\u4e2a\u7ea6\u5b9a\u3002\u800c\u4e0d\u662fPython\u7684\u6a21\u5757\u3001\u6846\u67b6\u7b49\u5177\u4f53\u7684\u529f\u80fd\u3002 \u800cuWSGI\uff0c\u5219\u662f\u5b9e\u73b0\u4e86WSGI\u534f\u8bae\u7684\u4e00\u4e2aWeb\u670d\u52a1\u5668\u3002\u5373\u7528\u6765\u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u8f6c\u53d1\u54cd\u5e94\u7684\u7a0b\u5e8f\u3002\u5b9e\u9645\u4e0a\uff0c\u4e00\u4e2auWSGI\u7684Web\u670d\u52a1\u5668\uff0c\u518d\u52a0\u4e0aDjango\u8fd9\u6837\u7684Web\u6846\u67b6\uff0c\u5c31\u5df2\u7ecf\u53ef\u4ee5\u5b9e\u73b0\u7f51\u7ad9\u7684\u529f\u80fd\u4e86\u3002","title":"Web \u670d\u52a1\u5668\u548c Web\u6846\u67b6"},{"location":"07_web/02_flask/","text":"","title":"flask"},{"location":"08_blog/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/","text":"","title":"\u5de5\u4f5c\u7b14\u8bb0"},{"location":"09_books/%E6%8E%A7%E7%B3%96%E9%9D%A9%E5%91%BD/","text":"\u89c2\u70b9\uff1a \u63a7\u5236\u8840\u7cd6\u66f2\u7ebf\u5e73\u7a33\uff0c\u4e0d\u8981\u8ba9\u5b83\u5927\u8d77\u5927\u843d\u3002 \u5b9e\u65bd\uff1a \u5728\u5403\u5347\u7cd6\u8f83\u5feb\u7684\u98df\u7269\uff08\u6bd4\u5982\u767d\u7c73\u996d\u3001\u9762\u6761\u7b49\uff09\u65f6\uff0c\u5148\u5403\u852c\u83dc\uff08\u6bd4\u5982\uff1a\u9ec4\u74dc\u3001\u897f\u5170\u82b1\u7b49\uff09\uff0c\u4ee5\u4fdd\u6301\u8840\u7cd6\u66f2\u7ebf\u5e73\u7a33\u3002","title":"\u300a\u63a7\u7cd6\u9769\u547d\u300b"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/","text":"1.\u4ee3\u7801\u5e94\u5f53\u6613\u4e8e\u7406\u89e3 \u4ee3\u7801\u7684\u5199\u6cd5\u5e94\u5f53\u4f7f\u522b\u4eba\u7406\u89e3\u5b83\u6240\u9700\u7684\u65f6\u95f4\u6700\u5c0f\u5316\u3002\uff08\u76f8\u6bd4\u4e8e\u4ec5\u4ec5\u51cf\u5c11\u884c\u6570\u6765\u8bf4\uff09\u5982\u679c\u4e0e\u5176\u4ed6\u7406\u5ff5\u51b2\u7a81\uff0c\u672c\u6761\u4f18\u5148\u3002 2.\u628a\u4fe1\u606f\u88c5\u8fdb\u540d\u5b57\u91cc \u9009\u62e9\u4e13\u4e1a\u7684\u8bcd\u8bed(\u6e05\u6670\u548c\u7cbe\u786e)\u3002\u6bd4\u5982 fetchPage \u4f18\u4e8e getPage \u907f\u514d\u5bbd\u6cdb\u7684\u540d\u5b57: \u907f\u514d tmp \u548c retval \u8fd9\u6837\u5bbd\u6cdb\u7684\u540d\u5b57\u3002\u597d\u7684\u540d\u5b57\u5e94\u5f53\u63cf\u8ff0\u53d8\u91cf\u7684\u76ee\u7684\u6216\u8005\u5b83\u627f\u8f7d\u7684\u503c\uff0ctmp_file \u4e5f\u6bd4 tmp \u597d \u7528\u5177\u4f53\u7684\u540d\u5b57\u4ee3\u66ff\u62bd\u8c61\u7684\u540d\u5b57 \u4f7f\u7528\u524d\u7f00\u6216\u8005\u540e\u7f00\u7ed9\u540d\u5b57\u9644\u5e26\u66f4\u591a\u4fe1\u606f(\u82f1\u8bed\u8868\u793a\u6cd5\uff0c\u975e\u5308\u7259\u5229\u547d\u540d\u6cd5)\u3002\u6bd4\u5982 delay_secs, html_utf8 \u51b3\u5b9a\u540d\u5b57\u7684\u957f\u5ea6\uff1a\u5c0f\u7684\u4f5c\u7528\u57df\u5c3d\u53ef\u80fd\u7528\u77ed\u540d\u79f0\uff0c\u5426\u5219\u5e94\u8be5\u5305\u542b\u8db3\u591f\u7684\u4fe1\u606f\u3002\u7f29\u7565\u8bcd\uff08\u56e2\u961f\u65b0\u6210\u5458\u80fd\u5426\u7406\u89e3\u5b83\u7684\u542b\u4e49\uff0c\u4e0d\u80fd\u5c31\u4e0d\u8981\u7528\u504f\u95e8\u7684\u7f29\u5199\uff09 \u5229\u7528\u540d\u5b57\u7684\u683c\u5f0f\u8868\u8fbe\u542b\u4e49\uff1a\u6bd4\u5982\u7eaf\u5927\u5199\u8868\u793a\u5e38\u91cf\u7b49\uff0c\u9a86\u9a7c\u547d\u540d\u6cd5\u8868\u793a\u7c7b\u7b49\uff0c\u9075\u5faa\u4e00\u95e8\u8bed\u8a00\u7684\u7f16\u7a0b\u547d\u540d\u7ea6\u5b9a\u3002\u5728\u9879\u76ee\u4e2d\u4fdd\u6301\u4e00\u81f4\u7684\u547d\u540d\u6cd5 3.\u4e0d\u4f1a\u8bef\u89e3\u7684\u540d\u5b57 \u4e0d\u8981\u4f7f\u7528\u6709\u6b67\u4e49\u7684\u540d\u79f0 \u7528 max_ \u548c min_ \u524d\u7f00\u8868\u793a\u4e0a\u9650\u548c\u4e0b\u9650\uff1b\u5bf9\u4e8e\u5305\u542b\u7684\u8303\u56f4\u7528 first \u548c last\uff1b\u5bf9\u4e8e\u5305\u542b/\u6392\u9664\u8303\u56f4\uff08\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff09\u7528 begin \u548c end is\u3001has\u3001can\u3001\u6216 should \u8fd9\u6837\u7684\u8bcd\u80fd\u4f7f\u5f97 bool \u503c\u66f4\u660e\u786e\uff0c\u5e76\u4e14\u5c3d\u91cf\u907f\u514d\u7528\u53cd\u4e49\u8bcd\u6c47\u3002\u6bd4\u5982 use_ssl \u597d\u4e8e disable_ssl\u3002\uff08\u4eba\u8111\u66f4\u6613\u4e8e\u7406\u89e3\u6b63\u5411\u8bcd\u6c47\uff09 \u4e0e\u4f7f\u7528\u8005\u7684\u671f\u671b\u5339\u914d\uff1a\u6bd4\u5982\u4f7f\u7528 get \u8bef\u8ba9\u4f7f\u7528\u8005\u4ee5\u4e3a\u8fd9\u662f\u8f7b\u91cf\u7ea7\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528 compute \u66ff\u4ee3 4. \u5ba1\u7f8e \u597d\u7684\u4ee3\u7801\u5e94\u8be5\u770b\u4e0a\u53bb\u300e\u517b\u773c\u300f\uff0c\u4e09\u6761\u539f\u5219\uff1a \u4f7f\u7528\u4e00\u81f4\u7684\u5e03\u5c40\uff0c\u8ba9\u8bfb\u8005\u5f88\u5feb\u5c31\u80fd\u4e60\u60ef\u8fd9\u79cd\u98ce\u683c \u8ba9\u76f8\u4f3c\u7684\u4ee3\u7801\u770b\u4e0a\u53bb\u76f8\u4f3c \u628a\u76f8\u5173\u7684\u4ee3\u7801\u5206\u7ec4\uff0c\u5f62\u6210\u4ee3\u7801\u5757 \u7f16\u7a0b\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u82b1\u5728\u770b\u4ee3\u7801\u4e0a\uff0c\u6d4f\u89c8\u4ee3\u7801\u7684\u901f\u5ea6\u8d8a\u5feb\uff0c\u8d8a\u5bb9\u6613\u4f7f\u7528\u5b83\uff1a \u91cd\u65b0\u5b89\u6392\u6362\u884c\u6765\u4fdd\u6301\u4e00\u81f4\u548c\u7d27\u51d1 \u63d0\u70bc\u51fa\u300e\u65b9\u6cd5\u300f\u6574\u7406\u4e0d\u89c4\u5219\u7684\u4e1c\u897f \u5728\u9700\u8981\u7684\u65f6\u5019\u4f7f\u7528\u300e\u5217\u5bf9\u9f50\u300f\u3002\uff08\u6709\u4e9b\u7f16\u8f91\u5668\u63d2\u4ef6\u80fd\u5e2e\u52a9\u4f60\u505a\u8fd9\u79cd\u4e8b\uff0c\u6bd4\u5982 http://vimcasts.org/episodes/aligning-text-with-tabular-vim/\uff09 \u9009\u62e9\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u987a\u5e8f\u3002\u6bd4\u5982\u5b57\u5178\u5e8f\u3001\u91cd\u8981\u6027\u7b49\u6392\u5e8f \u628a\u58f0\u660e\u6309\u7167\u5757\u7ec4\u7ec7\u8d77\u6765\uff0c\u6309\u7167\u903b\u8f91\u5206\u7ec4 \u628a\u4ee3\u7801\u5206\u6210\u6bb5\u843d\uff0c\u6bd4\u5982\u6309\u7167\u6b65\u9aa4\u6765\u5206\u6bb5 \u4e00\u81f4\u7684\u98ce\u683c\u6bd4\u6b63\u786e\u7684\u98ce\u683c\u91cd\u8981 5. \u8be5\u5199\u4ec0\u4e48\u6837\u7684\u6ce8\u91ca \u597d\u4ee3\u7801>\u5dee\u4ee3\u7801+\u597d\u6ce8\u91ca \u4ec0\u4e48\u65f6\u5019\u52a0\u4e0a\uff1a\u522b\u4eba\u770b\u4e0d\u61c2\uff1b\u4ee3\u7801\u4f7f\u7528\u7684\u6ce8\u610f\u4e8b\u9879\uff1b \u4ec0\u4e48\u4e0d\u9700\u8981\u6ce8\u91ca\u3002\u4e0d\u8981\u62d0\u6756\u5f0f\u6ce8\u91ca\uff0c\u8bd5\u56fe\u7c89\u9970\u53ef\u8bfb\u6027\u5dee\u7684\u4ee3\u7801\u7684\u6ce8\u91ca\u3002 \u7528\u4ee3\u7801\u8bb0\u5f55\u4f60\u7684\u601d\u60f3\u3002\u52a0\u5165\u300e\u6307\u5bfc\u6027\u6279\u6ce8\u300f\uff1b\u4e3a\u7455\u75b5\u5199\u6ce8\u91ca(TODO,FIXME,HACK)\uff1b\u7ed9\u5e38\u91cf\u52a0\u6ce8\u91ca\uff1b \u7ad9\u5728\u8bfb\u8005\u7684\u89d2\u5ea6\uff0c\u53bb\u60f3\u8c61\u4ed6\u4eec\u9700\u8981\u77e5\u9053\u4ec0\u4e48\u3002 \u522b\u4eba\u8bfb\u4f60\u4ee3\u7801\u5728\u60f3\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u7684\u5730\u65b9\u9700\u8981\u6ce8\u91ca\uff1b \u53ef\u80fd\u7684\u9677\u9631\u3002\u6bd4\u5982\u4ee3\u7801\u4e2d\u6570\u636e\u4e0a\u89c4\u6a21\u4ee5\u540e\u6709\u4e25\u91cd\u6027\u80fd\u95ee\u9898\u7b49 \u5168\u5c40\u89c2\u6ce8\u91ca\u3002\u7c7b\u4e4b\u95f4\u5982\u4f55\u4ea4\u4e92\uff0c\u6570\u636e\u6d41\u52a8\uff0c\u5165\u53e3\u70b9\u5728\u54ea\u91cc\u7b49\u3002 \u603b\u7ed3\u6027\u6ce8\u91ca\u3002\u5e2e\u52a9\u5feb\u901f\u7406\u89e3\u4ee3\u7801\u5757\uff0c\u4e0d\u7528\u8ff7\u5931\u5728\u7ec6\u8282\u4e2d 6. \u5199\u51fa\u8a00\u7b80\u610f\u8d45\u7684\u6ce8\u91ca \u6ce8\u91ca\u5e94\u5f53\u5177\u6709\u5f88\u9ad8\u7684\u9ad8\u4fe1\u606f/\u7a7a\u95f4\u7387 \u8ba9\u6ce8\u91ca\u4fdd\u6301\u7d27\u51d1 \u907f\u514d\u4f7f\u7528\u4e0d\u660e\u786e\u7684\u4ee3\u8bcd\uff0c\u7528\u4ee3\u7801\u540d\u79f0\u4ee3\u66ff it \u7b49\u8bcd\u8bed \u6da6\u8272\u7c97\u7cd9\u7684\u53e5\u5b50 \u7cbe\u786e\u63cf\u8ff0\u51fd\u6570\u7684\u884c\u4e3a \u7528\u8f93\u5165\u8f93\u51fa\u4f8b\u5b50\u6765\u63cf\u8ff0\u7279\u6b8a\u7684\u60c5\u51b5\uff08\u66f4\u76f4\u89c2\uff09 \u58f0\u660e\u4ee3\u7801\u7684\u610f\u56fe\u3002\u5f88\u591a\u65f6\u5019\u6ce8\u91ca\u5c31\u662f\u544a\u8bc9\u8bfb\u8005\u4f60\u5199\u4ee3\u7801\u7684\u65f6\u5019\u600e\u4e48\u60f3\u7684\u3002 \u4f7f\u7528\u5177\u540d\u51fd\u6570\u3002python \u7b49\u8bed\u8a00\u80fd\u8fd9\u4e48\u8c03\u7528 f(timeout=1) \u91c7\u7528\u4fe1\u606f\u91cf\u9ad8\u7684\u8bcd\u8bed\u3002\u4e1a\u754c\u5e38\u7528\u8bcd\u6c47 7. \u628a\u63a7\u5236\u6d41\u53d8\u5f97\u6613\u8bfb \u6761\u4ef6\u8bed\u53e5\u4e2d\u53c2\u6570\u7684\u987a\u5e8f\u3002\u6761\u4ef6\u8868\u8fbe\u5f0f\u5de6\u8fb9\u7684\u503c\u503e\u5411\u4e8e\u662f\u53d8\u5316\u7684\u503c\uff0c\u53f3\u8fb9\u7684\u503c\u503e\u5411\u4e8e\u5e38\u91cf if/else \u8bed\u53e5\u5757\u7684\u987a\u5e8f\u3002\u5efa\u8bae\uff1a\u5148\u5904\u7406\u6b63\u5e38\u903b\u8f91\uff1b\u5148\u5904\u7406\u7b80\u5355\u7684\u60c5\u51b5\uff1b\u5148\u5904\u7406\u6709\u8da3\u6216\u8005\u53ef\u7591\u7684\u60c5\u51b5 \u4e09\u76ee\u8fd0\u7b97\u7b26\u3002 \u76f8\u5bf9\u4e8e\u51cf\u5c11\u4ee3\u7801\u884c\u6570\uff0c\u66f4\u597d\u7684\u5ea6\u91cf\u65b9\u6cd5\u662f\u7406\u89e3\u5b83\u7684\u65f6\u95f4\u3002\u4e0d\u592a\u5efa\u8bae\u5728\u4e09\u76ee\u8fd0\u7b97\u7b26\u4e2d\u4f7f\u7528\u590d\u6742\u7684\u8868\u8fbe\u5f0f\uff0c\u4e0d\u5982 if/else \u76f4\u89c2 \u907f\u514d\u4f7f\u7528 do/while \u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de \u6700\u5c0f\u5316\u5d4c\u5957\u3002\u8fc7\u591a\u7684\u903b\u8f91\u5d4c\u5957\u4f1a\u5bfc\u81f4\u96be\u4ee5\u7406\u89e3\uff0c\u5927\u8111\u4e0d\u65ad\"\u5165\u6808\u51fa\u6808\"\uff0c\u589e\u5927\u5708\u590d\u6742\u5ea6 \u901a\u8fc7\u63d0\u524d\u8fd4\u56de\u51cf\u5c11\u5d4c\u5957 \u4f60\u80fd\u7406\u89e3\u7a0b\u5e8f\u6267\u884c\u7684\u6d41\u7a0b\u5417\uff1f\u7ebf\u7a0b\u3001\u4fe1\u53f7\u91cf\uff08\u4e2d\u65ad\uff09\u3001\u5f02\u5e38\u3001\u533f\u540d\u51fd\u6570\u3001\u865a\u65b9\u6cd5\u7b49\u4f1a\u8ba9\u6d41\u7a0b\u96be\u4ee5\u7406\u89e3\uff0c\u4e0d\u8981\u6ee5\u7528\u3002 8. \u62c6\u5206\u8d85\u957f\u8868\u8fbe\u5f0f \u5927\u591a\u6570\u4eba\u7684\u5927\u8111\u6700\u591a\u53ea\u80fd\u540c\u65f6\u8003\u8651 3~4 \u4ef6\u4e8b\u60c5\uff0c\u4ee3\u7801\u4e2d\u7684\u8868\u8fbe\u5f0f\u8d8a\u957f\uff0c\u5c31\u8d8a\u96be\u7406\u89e3\u3002 \u5f15\u5165\u89e3\u91ca\u53d8\u91cf\u3002 if line.split(':')[0].strip() == \"root\" \u6539\u4e3a\u5982\u4e0b\u8868\u8fbe\u5f0f: username = line.split(':')[0].strip(); if username == \"root\" \u603b\u7ed3\u53d8\u91cf\u3002 boolean user_owns_document = (request.user.id == document.owner_id) \u4f7f\u7528\u5fb7\u6469\u6839\u5f8b\u7b80\u5316\u903b\u8f91\u8868\u8fbe\u5f0f\u3002\uff08\u53e3\u8bc0\uff1a\u5206\u522b\u53d6\u53cd\uff0c\u8f6c\u6362\u4e0e/\u6216\uff09 not (a or b or c) <=> (not a) and (not b) and (not c) not (a and b and c) <=> (not a) or (not b) or (not c) \u4e0d\u8981\u6ee5\u7528\u77ed\u8def\u903b\u8f91\u3002\u77ed\u8def\u6c42\u503c\u6709\u65f6\u5019\u4f1a\u5f88\u7b80\u6d01\uff0c\u4f46\u662f\u5f71\u54cd\u53ef\u8bfb\u6027 \u4ece\u903b\u8f91\u7684\u53cd\u9762\u601d\u8003\u6709\u65f6\u5019\u80fd\u7b80\u5316\u8868\u8fbe\u5f0f \u63d0\u70bc\u91cd\u590d\u8868\u8fbe\u5f0f\u4e3a\u53d8\u91cf 9. \u53d8\u91cf\u4e0e\u53ef\u8bfb\u6027 \u53d8\u91cf\u7684\u8349\u7387\u8fd0\u7528\u4f1a\u8ba9\u7a0b\u5e8f\u66f4\u96be\u7406\u89e3\uff1a \u53d8\u91cf\u8d8a\u591a\uff0c\u8d8a\u96be\u4ee5\u8ddf\u8e2a\u4ed6\u4eec\u7684\u52a8\u5411 \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u8d8a\u5927\uff0c\u5c31\u9700\u8981\u8ddf\u8e2a\u5b83\u7684\u52a8\u5411\u8d8a\u4e45 \u53d8\u91cf\u6539\u53d8\u5730\u8d8a\u9891\u7e41\uff0c\u5c31\u8d8a\u96be\u4ee5\u8ddf\u8e2a\u5b83\u7684\u5f53\u524d\u503c \u589e\u5f3a\u53ef\u8bfb\u6027\u7684\u65b9\u5f0f\uff1a \u51cf\u5c11\u4e0d\u5fc5\u8981\u4e34\u65f6\u53d8\u91cf\uff1b\u6bd4\u5982\u5b83\u6ca1\u6709\u62c6\u5206\u4efb\u4f55\u590d\u6742\u7684\u8868\u8fbe\u5f0f\uff1b\u6ca1\u6709\u505a\u51fa\u66f4\u591a\u6f84\u6e05\uff1b\u53ea\u4f7f\u7528\u8fc7\u4e00\u6b21\u7b49 \u51cf\u5c11\u4e2d\u95f4\u7ed3\u679c \u51cf\u5c11\u63a7\u5236\u6d41\u53d8\u91cf\uff1a\u6bd4\u5982 done \u6807\u8bb0\u3002\u53ef\u4ee5\u901a\u8fc7\u8fd0\u7528\u7ed3\u6784\u5316\u7f16\u7a0b\u6d88\u9664 \u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u57df\uff1a\u9632\u6b62\u540d\u79f0\u6c61\u67d3\u3002\u8ba9\u4f60\u7684\u53d8\u91cf\u5bf9\u5c3d\u91cf\u5c11\u7684\u4ee3\u7801\u53ef\u89c1\uff0c\u51cf\u5c11\u8bfb\u8005\u540c\u65f6\u9700\u8981\u601d\u8003\u7684\u53d8\u91cf\u4e2a\u6570\u3002 \u628a\u53d8\u91cf\u5b9a\u4e49\u653e\u5230\u4f7f\u7528\u524d \u53ea\u5199\u4e00\u6b21\u7684\u53d8\u91cf\u66f4\u597d\u3002\u5e38\u91cf\u5f80\u5f80\u4e0d\u4f1a\u5f15\u6765\u9ebb\u70e6\u3002\u8ba9\u53d8\u91cf\u5728\u8f83\u5c11\u7684\u5730\u65b9\u6709\u6539\u52a8\uff0c\u64cd\u4f5c\u5b83\u7684\u5730\u65b9\u8d8a\u591a\uff0c\u8d8a\u96be\u4ee5\u786e\u5b9a\u5b83\u7684\u503c 10. \u62bd\u53d6\u4e0d\u76f8\u5173\u5b50\u95ee\u9898 \u79ef\u6781\u62bd\u51fa\u4e0d\u76f8\u5173\u5b50\u95ee\u9898\uff0c\u80fd\u8ba9\u8bfb\u4ee3\u7801\u7684\u4eba\u5173\u6ce8\u7a0b\u5e8f\u7684\u66f4\u9ad8\u5c42\u6b21\u76ee\u6807 \u4e0d\u76f8\u5173\u5b50\u95ee\u9898\uff1a\u81ea\u5305\u542b\u7684\uff0c\u4e0d\u77e5\u9053\u5176\u4ed6\u7a0b\u5e8f\u5982\u4f55\u4f7f\u7528\u5b83\u3002 \u7eaf\u5de5\u5177\u4ee3\u7801 \u7b80\u5316\u5df2\u6709\u63a5\u53e3 \u4e0d\u8981\u8fc7\u72b9\u4e0d\u53ca\uff0c\u592a\u591a\u5c0f\u51fd\u6570\u4f1a\u8df3\u8f6c\u589e\u52a0\u7406\u89e3\u8d1f\u62c5\u3002 11. \u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b \u4f7f\u300e\u4ee3\u7801\u300f\u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b\u6240\u7528\u5230\u7684\u6d41\u7a0b\uff1a 1.\u5217\u51fa\u4ee3\u7801\u6240\u505a\u7684\u6240\u6709\u300e\u4efb\u52a1\u300f\u3002 2.\u5c3d\u529b\u628a\u8fd9\u4e9b\u4efb\u52a1\u62c6\u5206\u5230\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\uff0c\u6216\u8005\u81f3\u5c11\u662f\u4ee3\u7801\u4e2d\u7684\u4e0d\u540c\u6bb5\u843d\u4e2d\u3002 \u5bf9\u4e8e\u96be\u5ea6\u7684\u4ee3\u7801\uff0c\u5c1d\u8bd5\u5217\u51fa\u6240\u6709\u4efb\u52a1\uff0c\u5176\u4e2d\u4e00\u4e9b\u4efb\u52a1\u53ef\u4ee5\u6210\u4e3a\u5355\u72ec\u7684\u51fd\u6570\u6216\u8005\u7c7b\uff0c\u4e5f\u53ef\u4ee5\u6210\u4e3a\u51fd\u6570\u4e2d\u7684\u300e\u903b\u8f91\u6bb5\u843d\u300f 12. \u628a\u60f3\u6cd5\u53d8\u6210\u4ee3\u7801 \u4e00\u4e2a\u7b80\u5355\u7684\u8fc7\u7a0b\u4f7f\u4f60\u5199\u51fa\u66f4\u6e05\u6670\u7684\u4ee3\u7801: 1.\u50cf\u5bf9\u7740\u4e00\u4e2a\u540c\u4e8b\u4e00\u6837\u7528\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u4ee3\u7801\u8981\u505a\u4ec0\u4e48\u3002 2.\u6ce8\u610f\u63cf\u8ff0\u4e2d\u6240\u7528\u7684\u5173\u952e\u8bcd\u548c\u77ed\u8bed 3.\u5199\u51fa\u4e0e\u63cf\u8ff0\u5339\u914d\u7684\u4ee3\u7801 13. \u5c11\u5199\u4ee3\u7801 \u4f60\u4e0d\u4f1a\u9700\u8981\u5b83\uff1a\u4e0d\u8981\u63d0\u524d\u5b9e\u73b0\u4e0d\u9700\u8981\u7684\u529f\u80fd \u8d28\u7591\u548c\u62c6\u5206\u4f60\u7684\u9700\u6c42\uff1a\u300e\u51cf\u5c11\u9700\u6c42\u300f\u548c\u300e\u89e3\u51b3\u66f4\u7b80\u5355\u7684\u95ee\u9898\u300f \u4fdd\u6301\u5c0f\u4ee3\u7801\u5e93\uff1a \u521b\u5efa\u8d8a\u591a\u8d8a\u597d\u7684\u300e\u5de5\u5177\u300f\u4ee3\u7801\u6765\u51cf\u5c11\u91cd\u590d\u4ee3\u7801 \u51cf\u5c11\u65e0\u7528\u4ee3\u7801\u6216\u6ca1\u6709\u7528\u5230\u7684\u529f\u80fd \u8ba9\u4f60\u7684\u9879\u76ee\u4fdd\u6301\u5206\u5f00\u7684\u5b50\u9879\u76ee\u72b6\u6001 \u5c0f\u5fc3\u4ee3\u7801\u300e\u91cd\u91cf\u300f\u3002\u7a0b\u5e8f\u5458\u5f80\u5f80\u4e0d\u60c5\u613f\u5220\u9664\u65e0\u7528\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b83\u4ee3\u8868\u5f88\u591a\u5b9e\u9645\u7684\u5de5\u4f5c\u91cf \u719f\u6089\u4f60\u5468\u8fb9\u7684\u5e93\uff1a\u6bcf\u4e2a\u4e00\u6bb5\u65f6\u95f4\u65f6\u95f4\u9605\u8bfb\u4e0b\u6807\u51c6\u5e93\u4e2d\u6240\u6709\u51fd\u6570\u3001\u6a21\u5757\u3001\u7c7b\u578b\u7684\u540d\u5b57\uff0c\u9632\u6b62\u91cd\u590d\u53d1\u660e\u8f6e\u5b50 14. \u6d4b\u8bd5\u4e0e\u53ef\u8bfb\u6027 \u6d4b\u8bd5\u5e94\u5177\u6709\u53ef\u8bfb\u6027\uff0c\u5176\u4ed6\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8212\u670d\u5730\u6539\u53d8\u6216\u8005\u589e\u52a0\u6d4b\u8bd5\u3002 \u4f7f\u7528\u8f85\u52a9\u51fd\u6570\u9690\u85cf\u4e0d\u91cd\u8981\u7ec6\u8282\u3002\uff08\u5982\u6784\u5efa\u5bf9\u8c61\uff09 \u8ba9\u51fa\u9519\u6d88\u606f\u6613\u8bfb\u3002 \u4f7f\u7528\u7b80\u5355\u4f46\u662f\u53ef\u4ee5\u8986\u76d6\u8fb9\u754c\u6761\u4ef6\u7684\u6d4b\u8bd5\u503c\u3002 TDD: \u4ec5\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u60f3\u7740\u6d4b\u8bd5\u8fd9\u4ef6\u4e8b\u5c31\u80fd\u5e2e\u52a9\u628a\u4ee3\u7801\u5199\u5f97\u66f4\u597d \u6240\u6709\u89e3\u8026\u7684\u65b9\u6cd5\u4e2d\uff0c\u6700\u597d\u7684\u5f80\u5f80\u5c31\u662f\u6700\u5bb9\u6613\u6d4b\u8bd5\u7684\u90a3\u4e2a\u3002 \u4e0d\u8981\u8d70\u5f97\u592a\u8fdc\uff1a \u4e3a\u4e86\u6d4b\u8bd5\u727a\u7272\u771f\u5b9e\u4ee3\u7801\u7684\u53ef\u8bfb\u6027 \u7740\u8ff7\u4e8e 100% \u7684\u6d4b\u8bd5\u8986\u76d6\u7387 \u8ba9\u6d4b\u8bd5\u6210\u4e3a\u4ea7\u54c1\u5f00\u53d1\u7684\u963b\u788d \u53ef\u8bfb\u6027\u5dee\u7684\u4ee3\u7801\u53ca\u5176\u6d4b\u8bd5\u95ee\u9898\u548c\u8bbe\u8ba1\u95ee\u9898\uff1a \u5168\u5c40\u53d8\u91cf\uff1a\u4e0d\u540c\u6d4b\u8bd5\u4e92\u76f8\u5f71\u54cd\uff1a\u96be\u4ee5\u7406\u89e3\u51fd\u6570\u526f\u4f5c\u7528 \u5927\u91cf\u4f9d\u8d56\uff1a\u96be\u4ee5\u6784\u5efa\u6d4b\u8bd5\u811a\u624b\u67b6\uff1a\u96be\u4ee5\u91cd\u6784 \u4ee3\u7801\u4e0d\u786e\u5b9a\u884c\u4e3a\uff1a\u6d4b\u8bd5\u53e4\u602a\uff1a\u96be\u4ee5\u8ddf\u8e2a\u7684bug \u53ef\u6d4b\u8bd5\u8f83\u597d\u7684\u4ee3\u7801\u7279\u5f81\uff1a \u7c7b\u4e2d\u5f88\u5c11\u6216\u6ca1\u6709\u5185\u90e8\u72b6\u6001\uff1a\u5bb9\u6613\u6d4b\u8bd5\uff0c\u5f88\u5c11\u68c0\u67e5\u9690\u85cf\u72b6\u6001\uff1a\u6613\u4e8e\u7406\u89e3 \u53ea\u505a\u4e00\u4ef6\u4e8b\uff1a\u9700\u8981\u8f83\u5c11\u6d4b\u8bd5\u7528\u4f8b\uff1a\u6a21\u5757\u5316\uff0c\u5c11\u8026\u5408 \u4f9d\u8d56\u5c11\uff1a\u53ef\u4ee5\u72ec\u7acb\u6d4b\u8bd5\uff1a\u53ef\u4ee5\u5e76\u884c\u5f00\u53d1 \u63a5\u53e3\u7b80\u5355\u660e\u786e\uff1a\u660e\u786e\u7684\u884c\u4e3a\u6d4b\u8bd5\uff1b\u53ef\u91cd\u7528\u9ad8","title":"\u300a\u7f16\u5199\u53ef\u8bfb\u4ee3\u7801\u7684\u827a\u672f\u300b"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#1","text":"\u4ee3\u7801\u7684\u5199\u6cd5\u5e94\u5f53\u4f7f\u522b\u4eba\u7406\u89e3\u5b83\u6240\u9700\u7684\u65f6\u95f4\u6700\u5c0f\u5316\u3002\uff08\u76f8\u6bd4\u4e8e\u4ec5\u4ec5\u51cf\u5c11\u884c\u6570\u6765\u8bf4\uff09\u5982\u679c\u4e0e\u5176\u4ed6\u7406\u5ff5\u51b2\u7a81\uff0c\u672c\u6761\u4f18\u5148\u3002","title":"1.\u4ee3\u7801\u5e94\u5f53\u6613\u4e8e\u7406\u89e3"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#2","text":"\u9009\u62e9\u4e13\u4e1a\u7684\u8bcd\u8bed(\u6e05\u6670\u548c\u7cbe\u786e)\u3002\u6bd4\u5982 fetchPage \u4f18\u4e8e getPage \u907f\u514d\u5bbd\u6cdb\u7684\u540d\u5b57: \u907f\u514d tmp \u548c retval \u8fd9\u6837\u5bbd\u6cdb\u7684\u540d\u5b57\u3002\u597d\u7684\u540d\u5b57\u5e94\u5f53\u63cf\u8ff0\u53d8\u91cf\u7684\u76ee\u7684\u6216\u8005\u5b83\u627f\u8f7d\u7684\u503c\uff0ctmp_file \u4e5f\u6bd4 tmp \u597d \u7528\u5177\u4f53\u7684\u540d\u5b57\u4ee3\u66ff\u62bd\u8c61\u7684\u540d\u5b57 \u4f7f\u7528\u524d\u7f00\u6216\u8005\u540e\u7f00\u7ed9\u540d\u5b57\u9644\u5e26\u66f4\u591a\u4fe1\u606f(\u82f1\u8bed\u8868\u793a\u6cd5\uff0c\u975e\u5308\u7259\u5229\u547d\u540d\u6cd5)\u3002\u6bd4\u5982 delay_secs, html_utf8 \u51b3\u5b9a\u540d\u5b57\u7684\u957f\u5ea6\uff1a\u5c0f\u7684\u4f5c\u7528\u57df\u5c3d\u53ef\u80fd\u7528\u77ed\u540d\u79f0\uff0c\u5426\u5219\u5e94\u8be5\u5305\u542b\u8db3\u591f\u7684\u4fe1\u606f\u3002\u7f29\u7565\u8bcd\uff08\u56e2\u961f\u65b0\u6210\u5458\u80fd\u5426\u7406\u89e3\u5b83\u7684\u542b\u4e49\uff0c\u4e0d\u80fd\u5c31\u4e0d\u8981\u7528\u504f\u95e8\u7684\u7f29\u5199\uff09 \u5229\u7528\u540d\u5b57\u7684\u683c\u5f0f\u8868\u8fbe\u542b\u4e49\uff1a\u6bd4\u5982\u7eaf\u5927\u5199\u8868\u793a\u5e38\u91cf\u7b49\uff0c\u9a86\u9a7c\u547d\u540d\u6cd5\u8868\u793a\u7c7b\u7b49\uff0c\u9075\u5faa\u4e00\u95e8\u8bed\u8a00\u7684\u7f16\u7a0b\u547d\u540d\u7ea6\u5b9a\u3002\u5728\u9879\u76ee\u4e2d\u4fdd\u6301\u4e00\u81f4\u7684\u547d\u540d\u6cd5","title":"2.\u628a\u4fe1\u606f\u88c5\u8fdb\u540d\u5b57\u91cc"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#3","text":"\u4e0d\u8981\u4f7f\u7528\u6709\u6b67\u4e49\u7684\u540d\u79f0 \u7528 max_ \u548c min_ \u524d\u7f00\u8868\u793a\u4e0a\u9650\u548c\u4e0b\u9650\uff1b\u5bf9\u4e8e\u5305\u542b\u7684\u8303\u56f4\u7528 first \u548c last\uff1b\u5bf9\u4e8e\u5305\u542b/\u6392\u9664\u8303\u56f4\uff08\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff09\u7528 begin \u548c end is\u3001has\u3001can\u3001\u6216 should \u8fd9\u6837\u7684\u8bcd\u80fd\u4f7f\u5f97 bool \u503c\u66f4\u660e\u786e\uff0c\u5e76\u4e14\u5c3d\u91cf\u907f\u514d\u7528\u53cd\u4e49\u8bcd\u6c47\u3002\u6bd4\u5982 use_ssl \u597d\u4e8e disable_ssl\u3002\uff08\u4eba\u8111\u66f4\u6613\u4e8e\u7406\u89e3\u6b63\u5411\u8bcd\u6c47\uff09 \u4e0e\u4f7f\u7528\u8005\u7684\u671f\u671b\u5339\u914d\uff1a\u6bd4\u5982\u4f7f\u7528 get \u8bef\u8ba9\u4f7f\u7528\u8005\u4ee5\u4e3a\u8fd9\u662f\u8f7b\u91cf\u7ea7\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528 compute \u66ff\u4ee3","title":"3.\u4e0d\u4f1a\u8bef\u89e3\u7684\u540d\u5b57"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#4","text":"\u597d\u7684\u4ee3\u7801\u5e94\u8be5\u770b\u4e0a\u53bb\u300e\u517b\u773c\u300f\uff0c\u4e09\u6761\u539f\u5219\uff1a \u4f7f\u7528\u4e00\u81f4\u7684\u5e03\u5c40\uff0c\u8ba9\u8bfb\u8005\u5f88\u5feb\u5c31\u80fd\u4e60\u60ef\u8fd9\u79cd\u98ce\u683c \u8ba9\u76f8\u4f3c\u7684\u4ee3\u7801\u770b\u4e0a\u53bb\u76f8\u4f3c \u628a\u76f8\u5173\u7684\u4ee3\u7801\u5206\u7ec4\uff0c\u5f62\u6210\u4ee3\u7801\u5757 \u7f16\u7a0b\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u82b1\u5728\u770b\u4ee3\u7801\u4e0a\uff0c\u6d4f\u89c8\u4ee3\u7801\u7684\u901f\u5ea6\u8d8a\u5feb\uff0c\u8d8a\u5bb9\u6613\u4f7f\u7528\u5b83\uff1a \u91cd\u65b0\u5b89\u6392\u6362\u884c\u6765\u4fdd\u6301\u4e00\u81f4\u548c\u7d27\u51d1 \u63d0\u70bc\u51fa\u300e\u65b9\u6cd5\u300f\u6574\u7406\u4e0d\u89c4\u5219\u7684\u4e1c\u897f \u5728\u9700\u8981\u7684\u65f6\u5019\u4f7f\u7528\u300e\u5217\u5bf9\u9f50\u300f\u3002\uff08\u6709\u4e9b\u7f16\u8f91\u5668\u63d2\u4ef6\u80fd\u5e2e\u52a9\u4f60\u505a\u8fd9\u79cd\u4e8b\uff0c\u6bd4\u5982 http://vimcasts.org/episodes/aligning-text-with-tabular-vim/\uff09 \u9009\u62e9\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u987a\u5e8f\u3002\u6bd4\u5982\u5b57\u5178\u5e8f\u3001\u91cd\u8981\u6027\u7b49\u6392\u5e8f \u628a\u58f0\u660e\u6309\u7167\u5757\u7ec4\u7ec7\u8d77\u6765\uff0c\u6309\u7167\u903b\u8f91\u5206\u7ec4 \u628a\u4ee3\u7801\u5206\u6210\u6bb5\u843d\uff0c\u6bd4\u5982\u6309\u7167\u6b65\u9aa4\u6765\u5206\u6bb5 \u4e00\u81f4\u7684\u98ce\u683c\u6bd4\u6b63\u786e\u7684\u98ce\u683c\u91cd\u8981","title":"4. \u5ba1\u7f8e"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#5","text":"\u597d\u4ee3\u7801>\u5dee\u4ee3\u7801+\u597d\u6ce8\u91ca \u4ec0\u4e48\u65f6\u5019\u52a0\u4e0a\uff1a\u522b\u4eba\u770b\u4e0d\u61c2\uff1b\u4ee3\u7801\u4f7f\u7528\u7684\u6ce8\u610f\u4e8b\u9879\uff1b \u4ec0\u4e48\u4e0d\u9700\u8981\u6ce8\u91ca\u3002\u4e0d\u8981\u62d0\u6756\u5f0f\u6ce8\u91ca\uff0c\u8bd5\u56fe\u7c89\u9970\u53ef\u8bfb\u6027\u5dee\u7684\u4ee3\u7801\u7684\u6ce8\u91ca\u3002 \u7528\u4ee3\u7801\u8bb0\u5f55\u4f60\u7684\u601d\u60f3\u3002\u52a0\u5165\u300e\u6307\u5bfc\u6027\u6279\u6ce8\u300f\uff1b\u4e3a\u7455\u75b5\u5199\u6ce8\u91ca(TODO,FIXME,HACK)\uff1b\u7ed9\u5e38\u91cf\u52a0\u6ce8\u91ca\uff1b \u7ad9\u5728\u8bfb\u8005\u7684\u89d2\u5ea6\uff0c\u53bb\u60f3\u8c61\u4ed6\u4eec\u9700\u8981\u77e5\u9053\u4ec0\u4e48\u3002 \u522b\u4eba\u8bfb\u4f60\u4ee3\u7801\u5728\u60f3\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u7684\u5730\u65b9\u9700\u8981\u6ce8\u91ca\uff1b \u53ef\u80fd\u7684\u9677\u9631\u3002\u6bd4\u5982\u4ee3\u7801\u4e2d\u6570\u636e\u4e0a\u89c4\u6a21\u4ee5\u540e\u6709\u4e25\u91cd\u6027\u80fd\u95ee\u9898\u7b49 \u5168\u5c40\u89c2\u6ce8\u91ca\u3002\u7c7b\u4e4b\u95f4\u5982\u4f55\u4ea4\u4e92\uff0c\u6570\u636e\u6d41\u52a8\uff0c\u5165\u53e3\u70b9\u5728\u54ea\u91cc\u7b49\u3002 \u603b\u7ed3\u6027\u6ce8\u91ca\u3002\u5e2e\u52a9\u5feb\u901f\u7406\u89e3\u4ee3\u7801\u5757\uff0c\u4e0d\u7528\u8ff7\u5931\u5728\u7ec6\u8282\u4e2d","title":"5. \u8be5\u5199\u4ec0\u4e48\u6837\u7684\u6ce8\u91ca"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#6","text":"\u6ce8\u91ca\u5e94\u5f53\u5177\u6709\u5f88\u9ad8\u7684\u9ad8\u4fe1\u606f/\u7a7a\u95f4\u7387 \u8ba9\u6ce8\u91ca\u4fdd\u6301\u7d27\u51d1 \u907f\u514d\u4f7f\u7528\u4e0d\u660e\u786e\u7684\u4ee3\u8bcd\uff0c\u7528\u4ee3\u7801\u540d\u79f0\u4ee3\u66ff it \u7b49\u8bcd\u8bed \u6da6\u8272\u7c97\u7cd9\u7684\u53e5\u5b50 \u7cbe\u786e\u63cf\u8ff0\u51fd\u6570\u7684\u884c\u4e3a \u7528\u8f93\u5165\u8f93\u51fa\u4f8b\u5b50\u6765\u63cf\u8ff0\u7279\u6b8a\u7684\u60c5\u51b5\uff08\u66f4\u76f4\u89c2\uff09 \u58f0\u660e\u4ee3\u7801\u7684\u610f\u56fe\u3002\u5f88\u591a\u65f6\u5019\u6ce8\u91ca\u5c31\u662f\u544a\u8bc9\u8bfb\u8005\u4f60\u5199\u4ee3\u7801\u7684\u65f6\u5019\u600e\u4e48\u60f3\u7684\u3002 \u4f7f\u7528\u5177\u540d\u51fd\u6570\u3002python \u7b49\u8bed\u8a00\u80fd\u8fd9\u4e48\u8c03\u7528 f(timeout=1) \u91c7\u7528\u4fe1\u606f\u91cf\u9ad8\u7684\u8bcd\u8bed\u3002\u4e1a\u754c\u5e38\u7528\u8bcd\u6c47","title":"6. \u5199\u51fa\u8a00\u7b80\u610f\u8d45\u7684\u6ce8\u91ca"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#7","text":"\u6761\u4ef6\u8bed\u53e5\u4e2d\u53c2\u6570\u7684\u987a\u5e8f\u3002\u6761\u4ef6\u8868\u8fbe\u5f0f\u5de6\u8fb9\u7684\u503c\u503e\u5411\u4e8e\u662f\u53d8\u5316\u7684\u503c\uff0c\u53f3\u8fb9\u7684\u503c\u503e\u5411\u4e8e\u5e38\u91cf if/else \u8bed\u53e5\u5757\u7684\u987a\u5e8f\u3002\u5efa\u8bae\uff1a\u5148\u5904\u7406\u6b63\u5e38\u903b\u8f91\uff1b\u5148\u5904\u7406\u7b80\u5355\u7684\u60c5\u51b5\uff1b\u5148\u5904\u7406\u6709\u8da3\u6216\u8005\u53ef\u7591\u7684\u60c5\u51b5 \u4e09\u76ee\u8fd0\u7b97\u7b26\u3002 \u76f8\u5bf9\u4e8e\u51cf\u5c11\u4ee3\u7801\u884c\u6570\uff0c\u66f4\u597d\u7684\u5ea6\u91cf\u65b9\u6cd5\u662f\u7406\u89e3\u5b83\u7684\u65f6\u95f4\u3002\u4e0d\u592a\u5efa\u8bae\u5728\u4e09\u76ee\u8fd0\u7b97\u7b26\u4e2d\u4f7f\u7528\u590d\u6742\u7684\u8868\u8fbe\u5f0f\uff0c\u4e0d\u5982 if/else \u76f4\u89c2 \u907f\u514d\u4f7f\u7528 do/while \u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de \u6700\u5c0f\u5316\u5d4c\u5957\u3002\u8fc7\u591a\u7684\u903b\u8f91\u5d4c\u5957\u4f1a\u5bfc\u81f4\u96be\u4ee5\u7406\u89e3\uff0c\u5927\u8111\u4e0d\u65ad\"\u5165\u6808\u51fa\u6808\"\uff0c\u589e\u5927\u5708\u590d\u6742\u5ea6 \u901a\u8fc7\u63d0\u524d\u8fd4\u56de\u51cf\u5c11\u5d4c\u5957 \u4f60\u80fd\u7406\u89e3\u7a0b\u5e8f\u6267\u884c\u7684\u6d41\u7a0b\u5417\uff1f\u7ebf\u7a0b\u3001\u4fe1\u53f7\u91cf\uff08\u4e2d\u65ad\uff09\u3001\u5f02\u5e38\u3001\u533f\u540d\u51fd\u6570\u3001\u865a\u65b9\u6cd5\u7b49\u4f1a\u8ba9\u6d41\u7a0b\u96be\u4ee5\u7406\u89e3\uff0c\u4e0d\u8981\u6ee5\u7528\u3002","title":"7. \u628a\u63a7\u5236\u6d41\u53d8\u5f97\u6613\u8bfb"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#8","text":"\u5927\u591a\u6570\u4eba\u7684\u5927\u8111\u6700\u591a\u53ea\u80fd\u540c\u65f6\u8003\u8651 3~4 \u4ef6\u4e8b\u60c5\uff0c\u4ee3\u7801\u4e2d\u7684\u8868\u8fbe\u5f0f\u8d8a\u957f\uff0c\u5c31\u8d8a\u96be\u7406\u89e3\u3002 \u5f15\u5165\u89e3\u91ca\u53d8\u91cf\u3002 if line.split(':')[0].strip() == \"root\" \u6539\u4e3a\u5982\u4e0b\u8868\u8fbe\u5f0f: username = line.split(':')[0].strip(); if username == \"root\" \u603b\u7ed3\u53d8\u91cf\u3002 boolean user_owns_document = (request.user.id == document.owner_id) \u4f7f\u7528\u5fb7\u6469\u6839\u5f8b\u7b80\u5316\u903b\u8f91\u8868\u8fbe\u5f0f\u3002\uff08\u53e3\u8bc0\uff1a\u5206\u522b\u53d6\u53cd\uff0c\u8f6c\u6362\u4e0e/\u6216\uff09 not (a or b or c) <=> (not a) and (not b) and (not c) not (a and b and c) <=> (not a) or (not b) or (not c) \u4e0d\u8981\u6ee5\u7528\u77ed\u8def\u903b\u8f91\u3002\u77ed\u8def\u6c42\u503c\u6709\u65f6\u5019\u4f1a\u5f88\u7b80\u6d01\uff0c\u4f46\u662f\u5f71\u54cd\u53ef\u8bfb\u6027 \u4ece\u903b\u8f91\u7684\u53cd\u9762\u601d\u8003\u6709\u65f6\u5019\u80fd\u7b80\u5316\u8868\u8fbe\u5f0f \u63d0\u70bc\u91cd\u590d\u8868\u8fbe\u5f0f\u4e3a\u53d8\u91cf","title":"8. \u62c6\u5206\u8d85\u957f\u8868\u8fbe\u5f0f"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#9","text":"\u53d8\u91cf\u7684\u8349\u7387\u8fd0\u7528\u4f1a\u8ba9\u7a0b\u5e8f\u66f4\u96be\u7406\u89e3\uff1a \u53d8\u91cf\u8d8a\u591a\uff0c\u8d8a\u96be\u4ee5\u8ddf\u8e2a\u4ed6\u4eec\u7684\u52a8\u5411 \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u8d8a\u5927\uff0c\u5c31\u9700\u8981\u8ddf\u8e2a\u5b83\u7684\u52a8\u5411\u8d8a\u4e45 \u53d8\u91cf\u6539\u53d8\u5730\u8d8a\u9891\u7e41\uff0c\u5c31\u8d8a\u96be\u4ee5\u8ddf\u8e2a\u5b83\u7684\u5f53\u524d\u503c \u589e\u5f3a\u53ef\u8bfb\u6027\u7684\u65b9\u5f0f\uff1a \u51cf\u5c11\u4e0d\u5fc5\u8981\u4e34\u65f6\u53d8\u91cf\uff1b\u6bd4\u5982\u5b83\u6ca1\u6709\u62c6\u5206\u4efb\u4f55\u590d\u6742\u7684\u8868\u8fbe\u5f0f\uff1b\u6ca1\u6709\u505a\u51fa\u66f4\u591a\u6f84\u6e05\uff1b\u53ea\u4f7f\u7528\u8fc7\u4e00\u6b21\u7b49 \u51cf\u5c11\u4e2d\u95f4\u7ed3\u679c \u51cf\u5c11\u63a7\u5236\u6d41\u53d8\u91cf\uff1a\u6bd4\u5982 done \u6807\u8bb0\u3002\u53ef\u4ee5\u901a\u8fc7\u8fd0\u7528\u7ed3\u6784\u5316\u7f16\u7a0b\u6d88\u9664 \u7f29\u5c0f\u53d8\u91cf\u4f5c\u7528\u57df\uff1a\u9632\u6b62\u540d\u79f0\u6c61\u67d3\u3002\u8ba9\u4f60\u7684\u53d8\u91cf\u5bf9\u5c3d\u91cf\u5c11\u7684\u4ee3\u7801\u53ef\u89c1\uff0c\u51cf\u5c11\u8bfb\u8005\u540c\u65f6\u9700\u8981\u601d\u8003\u7684\u53d8\u91cf\u4e2a\u6570\u3002 \u628a\u53d8\u91cf\u5b9a\u4e49\u653e\u5230\u4f7f\u7528\u524d \u53ea\u5199\u4e00\u6b21\u7684\u53d8\u91cf\u66f4\u597d\u3002\u5e38\u91cf\u5f80\u5f80\u4e0d\u4f1a\u5f15\u6765\u9ebb\u70e6\u3002\u8ba9\u53d8\u91cf\u5728\u8f83\u5c11\u7684\u5730\u65b9\u6709\u6539\u52a8\uff0c\u64cd\u4f5c\u5b83\u7684\u5730\u65b9\u8d8a\u591a\uff0c\u8d8a\u96be\u4ee5\u786e\u5b9a\u5b83\u7684\u503c","title":"9. \u53d8\u91cf\u4e0e\u53ef\u8bfb\u6027"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#10","text":"\u79ef\u6781\u62bd\u51fa\u4e0d\u76f8\u5173\u5b50\u95ee\u9898\uff0c\u80fd\u8ba9\u8bfb\u4ee3\u7801\u7684\u4eba\u5173\u6ce8\u7a0b\u5e8f\u7684\u66f4\u9ad8\u5c42\u6b21\u76ee\u6807 \u4e0d\u76f8\u5173\u5b50\u95ee\u9898\uff1a\u81ea\u5305\u542b\u7684\uff0c\u4e0d\u77e5\u9053\u5176\u4ed6\u7a0b\u5e8f\u5982\u4f55\u4f7f\u7528\u5b83\u3002 \u7eaf\u5de5\u5177\u4ee3\u7801 \u7b80\u5316\u5df2\u6709\u63a5\u53e3 \u4e0d\u8981\u8fc7\u72b9\u4e0d\u53ca\uff0c\u592a\u591a\u5c0f\u51fd\u6570\u4f1a\u8df3\u8f6c\u589e\u52a0\u7406\u89e3\u8d1f\u62c5\u3002","title":"10. \u62bd\u53d6\u4e0d\u76f8\u5173\u5b50\u95ee\u9898"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#11","text":"\u4f7f\u300e\u4ee3\u7801\u300f\u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b\u6240\u7528\u5230\u7684\u6d41\u7a0b\uff1a 1.\u5217\u51fa\u4ee3\u7801\u6240\u505a\u7684\u6240\u6709\u300e\u4efb\u52a1\u300f\u3002 2.\u5c3d\u529b\u628a\u8fd9\u4e9b\u4efb\u52a1\u62c6\u5206\u5230\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\uff0c\u6216\u8005\u81f3\u5c11\u662f\u4ee3\u7801\u4e2d\u7684\u4e0d\u540c\u6bb5\u843d\u4e2d\u3002 \u5bf9\u4e8e\u96be\u5ea6\u7684\u4ee3\u7801\uff0c\u5c1d\u8bd5\u5217\u51fa\u6240\u6709\u4efb\u52a1\uff0c\u5176\u4e2d\u4e00\u4e9b\u4efb\u52a1\u53ef\u4ee5\u6210\u4e3a\u5355\u72ec\u7684\u51fd\u6570\u6216\u8005\u7c7b\uff0c\u4e5f\u53ef\u4ee5\u6210\u4e3a\u51fd\u6570\u4e2d\u7684\u300e\u903b\u8f91\u6bb5\u843d\u300f","title":"11. \u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#12","text":"\u4e00\u4e2a\u7b80\u5355\u7684\u8fc7\u7a0b\u4f7f\u4f60\u5199\u51fa\u66f4\u6e05\u6670\u7684\u4ee3\u7801: 1.\u50cf\u5bf9\u7740\u4e00\u4e2a\u540c\u4e8b\u4e00\u6837\u7528\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u4ee3\u7801\u8981\u505a\u4ec0\u4e48\u3002 2.\u6ce8\u610f\u63cf\u8ff0\u4e2d\u6240\u7528\u7684\u5173\u952e\u8bcd\u548c\u77ed\u8bed 3.\u5199\u51fa\u4e0e\u63cf\u8ff0\u5339\u914d\u7684\u4ee3\u7801","title":"12. \u628a\u60f3\u6cd5\u53d8\u6210\u4ee3\u7801"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#13","text":"\u4f60\u4e0d\u4f1a\u9700\u8981\u5b83\uff1a\u4e0d\u8981\u63d0\u524d\u5b9e\u73b0\u4e0d\u9700\u8981\u7684\u529f\u80fd \u8d28\u7591\u548c\u62c6\u5206\u4f60\u7684\u9700\u6c42\uff1a\u300e\u51cf\u5c11\u9700\u6c42\u300f\u548c\u300e\u89e3\u51b3\u66f4\u7b80\u5355\u7684\u95ee\u9898\u300f \u4fdd\u6301\u5c0f\u4ee3\u7801\u5e93\uff1a \u521b\u5efa\u8d8a\u591a\u8d8a\u597d\u7684\u300e\u5de5\u5177\u300f\u4ee3\u7801\u6765\u51cf\u5c11\u91cd\u590d\u4ee3\u7801 \u51cf\u5c11\u65e0\u7528\u4ee3\u7801\u6216\u6ca1\u6709\u7528\u5230\u7684\u529f\u80fd \u8ba9\u4f60\u7684\u9879\u76ee\u4fdd\u6301\u5206\u5f00\u7684\u5b50\u9879\u76ee\u72b6\u6001 \u5c0f\u5fc3\u4ee3\u7801\u300e\u91cd\u91cf\u300f\u3002\u7a0b\u5e8f\u5458\u5f80\u5f80\u4e0d\u60c5\u613f\u5220\u9664\u65e0\u7528\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b83\u4ee3\u8868\u5f88\u591a\u5b9e\u9645\u7684\u5de5\u4f5c\u91cf \u719f\u6089\u4f60\u5468\u8fb9\u7684\u5e93\uff1a\u6bcf\u4e2a\u4e00\u6bb5\u65f6\u95f4\u65f6\u95f4\u9605\u8bfb\u4e0b\u6807\u51c6\u5e93\u4e2d\u6240\u6709\u51fd\u6570\u3001\u6a21\u5757\u3001\u7c7b\u578b\u7684\u540d\u5b57\uff0c\u9632\u6b62\u91cd\u590d\u53d1\u660e\u8f6e\u5b50","title":"13. \u5c11\u5199\u4ee3\u7801"},{"location":"09_books/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/#14","text":"\u6d4b\u8bd5\u5e94\u5177\u6709\u53ef\u8bfb\u6027\uff0c\u5176\u4ed6\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8212\u670d\u5730\u6539\u53d8\u6216\u8005\u589e\u52a0\u6d4b\u8bd5\u3002 \u4f7f\u7528\u8f85\u52a9\u51fd\u6570\u9690\u85cf\u4e0d\u91cd\u8981\u7ec6\u8282\u3002\uff08\u5982\u6784\u5efa\u5bf9\u8c61\uff09 \u8ba9\u51fa\u9519\u6d88\u606f\u6613\u8bfb\u3002 \u4f7f\u7528\u7b80\u5355\u4f46\u662f\u53ef\u4ee5\u8986\u76d6\u8fb9\u754c\u6761\u4ef6\u7684\u6d4b\u8bd5\u503c\u3002 TDD: \u4ec5\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u60f3\u7740\u6d4b\u8bd5\u8fd9\u4ef6\u4e8b\u5c31\u80fd\u5e2e\u52a9\u628a\u4ee3\u7801\u5199\u5f97\u66f4\u597d \u6240\u6709\u89e3\u8026\u7684\u65b9\u6cd5\u4e2d\uff0c\u6700\u597d\u7684\u5f80\u5f80\u5c31\u662f\u6700\u5bb9\u6613\u6d4b\u8bd5\u7684\u90a3\u4e2a\u3002 \u4e0d\u8981\u8d70\u5f97\u592a\u8fdc\uff1a \u4e3a\u4e86\u6d4b\u8bd5\u727a\u7272\u771f\u5b9e\u4ee3\u7801\u7684\u53ef\u8bfb\u6027 \u7740\u8ff7\u4e8e 100% \u7684\u6d4b\u8bd5\u8986\u76d6\u7387 \u8ba9\u6d4b\u8bd5\u6210\u4e3a\u4ea7\u54c1\u5f00\u53d1\u7684\u963b\u788d \u53ef\u8bfb\u6027\u5dee\u7684\u4ee3\u7801\u53ca\u5176\u6d4b\u8bd5\u95ee\u9898\u548c\u8bbe\u8ba1\u95ee\u9898\uff1a \u5168\u5c40\u53d8\u91cf\uff1a\u4e0d\u540c\u6d4b\u8bd5\u4e92\u76f8\u5f71\u54cd\uff1a\u96be\u4ee5\u7406\u89e3\u51fd\u6570\u526f\u4f5c\u7528 \u5927\u91cf\u4f9d\u8d56\uff1a\u96be\u4ee5\u6784\u5efa\u6d4b\u8bd5\u811a\u624b\u67b6\uff1a\u96be\u4ee5\u91cd\u6784 \u4ee3\u7801\u4e0d\u786e\u5b9a\u884c\u4e3a\uff1a\u6d4b\u8bd5\u53e4\u602a\uff1a\u96be\u4ee5\u8ddf\u8e2a\u7684bug \u53ef\u6d4b\u8bd5\u8f83\u597d\u7684\u4ee3\u7801\u7279\u5f81\uff1a \u7c7b\u4e2d\u5f88\u5c11\u6216\u6ca1\u6709\u5185\u90e8\u72b6\u6001\uff1a\u5bb9\u6613\u6d4b\u8bd5\uff0c\u5f88\u5c11\u68c0\u67e5\u9690\u85cf\u72b6\u6001\uff1a\u6613\u4e8e\u7406\u89e3 \u53ea\u505a\u4e00\u4ef6\u4e8b\uff1a\u9700\u8981\u8f83\u5c11\u6d4b\u8bd5\u7528\u4f8b\uff1a\u6a21\u5757\u5316\uff0c\u5c11\u8026\u5408 \u4f9d\u8d56\u5c11\uff1a\u53ef\u4ee5\u72ec\u7acb\u6d4b\u8bd5\uff1a\u53ef\u4ee5\u5e76\u884c\u5f00\u53d1 \u63a5\u53e3\u7b80\u5355\u660e\u786e\uff1a\u660e\u786e\u7684\u884c\u4e3a\u6d4b\u8bd5\uff1b\u53ef\u91cd\u7528\u9ad8","title":"14. \u6d4b\u8bd5\u4e0e\u53ef\u8bfb\u6027"}]}